'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by Measurement Studio for NI-RFSA 16.0.
'     
'     Documentation is available at Start»All Programs»National Instruments»NI-RFSA»NI-RFSA Documentation>>NI RF Vector Signal Analyzers Help.
'      
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System.Runtime.InteropServices
Imports System.Text

Namespace NationalInstruments.ModularInstruments.Interop
	Public Class niRFSA
		Inherits Object
		Implements System.IDisposable

		Private _handle As HandleRef

		Private _disposed As Boolean = True

		Public ReadOnly Property Handle() As HandleRef
			Get
				Return _handle
			End Get
		End Property

		Protected Overrides Sub Finalize()
			Try
				Dispose(False)
			Finally
				MyBase.Finalize()
			End Try
		End Sub

		#Region "Constructors"
		Public Sub New(instrumentHandle As System.IntPtr)
			Me._handle = New HandleRef(Me, instrumentHandle)
			Me._disposed = False
		End Sub

		''' <summary>
		''' 
		''' Creates a new session for the device and performs the following initialization actions:
		''' 
		''' Creates a new instrument driver session to the RF vector signal analyzer, using the downconverter resource name you specify with resourceName.
		''' Sends initialization commands to reset all hardware modules to a known state necessary for NI-RFSA operation.
		''' 
		''' Note:Before initializing the RF vector signal analyzer, an IF digitizer module (and an LO source for the NI 5663 only) must be associated with the RF downconverter module in MAX. After association, pass the RF downconverter device name to this VI to initialize both modules. To change the digitizer and LO source associations, modify the downconverter Properties page in MAX, or use the niRFSA_InitWithOptions function to override the association specified in MAX. Refer to the NI RF Vector Signal                 Analyzers Getting Started Guide, installed at Start&#187;All Programs?National  Instruments&#187;NI-RFSA&#187;Documentation for information about MAX association.
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' </summary>
		''' <param name="Resource_Name">
		''' 
		''' resourceName
		''' ViRsrc
		''' Specifies the resource name of the device to initialize.
		''' 
		''' Example #
		''' Device Type
		''' Syntax
		''' 1
		''' myDAQmxDevice
		''' NI-DAQmx device, device name =
		'''                &quot;myDAQmxDevice&quot;
		''' 2
		''' myLogicalName
		''' IVI logical name, name =
		'''                   &quot;myLogicalName&quot;
		''' 
		''' For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
		'''             Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
		'''             can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new
		'''             name. You also can pass in the name of an IVI logical name configured with the IVI
		'''             Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
		'''             Measurement &amp; Automation Explorer Help.
		''' 
		''' Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
		''' 
		''' </param>
		''' <param name="ID_Query">
		''' 
		''' IDQuery
		''' ViBoolean
		''' specifies whether NI-RFSA performs an ID query. When you perform an ID query, NI-RFSA verifies that the device you initialize is supported. 
		'''                                             VI_TRUE (Yes)
		''' 
		'''                     Perform an ID query. This value is the default.
		''' 
		'''                                                             VI_FALSE (No)
		''' 
		'''                     Do not perform an ID query.
		''' 
		''' </param>
		''' <param name="Reset">
		''' 
		''' reset
		''' ViBoolean
		''' Specifies whether the NI-RFSA device is reset during the initialization procedure.
		''' 
		''' VI_TRUE (Yes)The device is reset.
		''' VI_FALSE (No)The device is not reset. This value is the default.
		''' 
		''' </param>
		Public Sub New(Resource_Name As String, ID_Query As Boolean, Reset As Boolean)
			Dim handle As System.IntPtr
			Dim pInvokeResult As Integer = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset), handle)
			_handle = New HandleRef(Me, handle)
			TestForError(pInvokeResult)
			Me._disposed = False
		End Sub

		''' <summary>
		''' 
		''' Creates a new session for the device and performs the following initialization actions:
		''' Creates a new instrument driver session to the RF vector signal analyzer, using the downconverter resource name you specify with resourceName.
		''' Sends initialization commands to reset all hardware modules to a known state necessary for NI-RFSA operation.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Resource_Name">
		''' 
		''' resourceName
		''' ViRsrc
		''' Specifies the resource name of the device to initialize.
		''' 
		''' Example #
		''' Device Type
		''' Syntax
		''' 1
		''' myDAQmxDevice
		''' NI-DAQmx device, device name =
		'''                &quot;myDAQmxDevice&quot;
		''' 2
		''' myLogicalName
		''' IVI logical name, name =
		'''                   &quot;myLogicalName&quot;
		''' 
		''' For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
		'''             Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
		'''             can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new
		'''             name. You also can pass in the name of an IVI logical name configured with the IVI
		'''             Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
		'''             Measurement &amp; Automation Explorer Help.
		''' 
		''' Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
		'''  
		''' </param>
		''' <param name="ID_Query">
		''' 
		''' IDQuery
		''' ViBoolean
		''' specifies whether NI-RFSA performs an ID query. When you perform an ID query, NI-RFSA verifies that the device you initialize is supported. 
		'''                                             VI_TRUE (Yes)
		''' 
		'''                     Perform an ID query. This value is the default.
		''' 
		'''                                                             VI_FALSE (No)
		''' 
		'''                     Do not perform an ID query.
		''' 
		''' </param>
		''' <param name="Reset">
		''' 
		''' reset
		''' ViBoolean
		''' Specifies whether the NI-RFSA device is reset during the initialization procedure.
		''' 
		''' VI_TRUE (Yes)The device is reset.
		''' VI_FALSE (No)The device is not reset. This value is the default.
		''' 
		''' </param>
		''' <param name="Option_String">
		''' 
		''' optionString
		''' ViConstString
		''' Sets the initial value of certain attributes for the session. The following attributes are used in this parameter.
		''' 
		''' Name
		''' Attribute
		''' RangeCheck
		''' NIRFSA_ATTR_RANGE_CHECK
		''' QueryInstrStatus
		''' NIRFSA_ATTR_QUERY_INSTRUMENT_STATUS
		''' Cache
		''' NIRFSA_ATTR_CACHE
		''' RecordCoercions
		''' NIRFSA_ATTR_RECORD_COERCIONS
		''' DriverSetup
		''' NIRFSA_ATTR_DRIVER_SETUP
		''' 
		''' The format of this string is, &quot;AttributeName=Value&quot; where AttributeName is the name of the attribute and Value is the value to which the attribute will be set.  To set multiple attributes, separate their assignments with a comma.
		''' 
		''' Example Option String:
		''' &quot;RangeCheck=1,QueryInstrStatus=0,Cache=1,DriverSetup=Digitizer:pxi1slot4&quot;.
		''' 
		''' If you want to use the NI 5600/5601 with an external digitizer for downconverter-only mode, use the following DriverSetup string: DriverSetup=Digitizer:&lt;external&gt;.
		''' 
		''' NI 5663&#8212;LO source&#8212;Specifies the resource name of the LO source to use for this session. If you want to use the NI&#160;5601 with an LO source other than the NI 5652, use the following DriverSetup tag:DriverSetup=LO:&lt;external&gt;.
		''' 
		''' To specify multiple resources in the DriverSetup string, separate their assignments with a semicolon.
		''' 
		''' </param>
		Public Sub New(Resource_Name As String, ID_Query As Boolean, Reset As Boolean, Option_String As String)
			Dim handle As System.IntPtr
			Dim pInvokeResult As Integer = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset), Option_String, handle)
			_handle = New HandleRef(Me, handle)
			TestForError(pInvokeResult)
			Me._disposed = False
		End Sub
		#End Region

		#Region "ErrorMethods"
		Private Function TestForError(status As Integer) As Integer
			If (status < 0) Then
				ThrowError(status)
			End If
			Return status
		End Function

		Private Function ThrowError(code As Integer) As Integer
			Dim size As Integer = PInvoke.GetError(Handle, code, 0, Nothing)
			Dim msg As New System.Text.StringBuilder()
			If (size >= 0) Then
				msg.Capacity = size
				PInvoke.GetError(Handle, code, size, msg)
			End If
			Throw New System.Runtime.InteropServices.ExternalException(msg.ToString(), code)
		End Function

		' The next two methods are there because of the static versions of 
		' GetError() and ErrorMessage()
		' If those two are not needed, then these two can be gone as well
		Private Shared Function TestForError(handle As HandleRef, status As Integer) As Integer
			If (status < 0) Then
				niRFSA.ThrowError(handle, status)
			End If
			Return status
		End Function

		Private Shared Function ThrowError(handle As HandleRef, code As Integer) As Integer
			Dim size As Integer = PInvoke.GetError(handle, code, 0, Nothing)
			Dim msg As New System.Text.StringBuilder()
			If (size >= 0) Then
				msg.Capacity = size
				PInvoke.GetError(handle, code, size, msg)
			End If
			Throw New System.Runtime.InteropServices.ExternalException(msg.ToString(), code)
		End Function

		#End Region

		#Region "VstSelfCalibrateErrorMethods"

		Private Shared Function TestForVstSelfCalibrateError(status As Integer) As Integer
			If (status < 0) Then
				niRFSA.GetVstSelfCalibrateException(status)
			End If
			Return status
		End Function

		Private Shared Function GetVstSelfCalibrateException(code As Integer) As Integer
			Dim size As Integer = PInvoke.VstSelfCalibrateErrorMessage(code, 0, Nothing)
			Dim msg As New System.Text.StringBuilder()
			If (size >= 0) Then
				msg.Capacity = size
				PInvoke.VstSelfCalibrateErrorMessage(code, size, msg)
			End If
			Throw New System.Runtime.InteropServices.ExternalException(msg.ToString(), code)
		End Function

		#End Region

		#Region "DriverMethods"
		''' <summary>
		''' Retrieves and then clears the IVI error information for the session or the current execution thread.
		''' 
		''' </summary>
		'''<param name="handle">
		''' Identifies your instrument session. vi is obtained from the niRFSA_init or niRFSA_InitExtCal function and identifies a particular instrument session.
		''' 
		'''</param>
		'''<param name="code">
		''' Specifies the error code.
		''' 
		'''</param>
		'''<param name="msg">
		''' Specifies the error message returned.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Shared Function GetError(handle As HandleRef, code As Integer, msg As StringBuilder) As Integer
			Dim pInvokeResult As Integer = 0
			Dim size As Integer = PInvoke.GetError(handle, code, 0, Nothing)
			If (size >= 0) Then
				msg.Capacity = size
				pInvokeResult = PInvoke.GetError(handle, code, size, msg)
				msg.AppendLine("ErrorCode: " & code.ToString())
			End If
			niRFSA.TestForError(handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Retrieves and then clears the IVI error information for the session or the current execution thread.
		''' 
		''' </summary>
		'''<param name="code">
		''' Specifies the error code.
		''' 
		'''</param>
		'''<param name="msg">
		''' Specifies the error message returned.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function GetError(code As Integer, msg As StringBuilder) As Integer
			Return niRFSA.GetError(Handle, code, msg)
		End Function

		''' <summary>
		''' Converts a status code returned by an NI-RFSA function into a user-readable string.
		''' 
		''' </summary>
		'''<param name="handle">
		''' Identifies your instrument session. vi is obtained from the niRFSA_init or niRFSA_InitExtCal function and identifies a particular instrument session.
		''' 
		'''</param>
		'''<param name="code">
		''' Passes the Status parameter that is returned from any NI-RFSA function. The default value is 0 (VI_SUCCESS).
		''' 
		'''</param>
		'''<param name="msg">
		''' Returns the user-readable message string that corresponds to the status code you specify.
		''' 
		'''</param>
		'''<returns>
		''' Converts a status code returned by an NI-RFSA function into a user-readable string.
		''' 
		'''</returns>
		Public Shared Function ErrorMessage(handle As HandleRef, code As Integer, msg As StringBuilder) As Integer
			Dim pInvokeResult As Integer = 0
			Dim size As Integer = 256
			msg.Capacity = size
			pInvokeResult = PInvoke.error_message(handle, code, msg)
			niRFSA.TestForError(handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Converts a status code returned by an NI-RFSA function into a user-readable string.
		''' 
		''' </summary>
		'''<param name="code">
		''' Passes the Status parameter that is returned from any NI-RFSA function. The default value is 0 (VI_SUCCESS).
		''' 
		'''</param>
		'''<param name="msg">
		''' Returns the user-readable message string that corresponds to the status code you specify.
		''' 
		'''</param>
		'''<returns>
		''' Converts a status code returned by an NI-RFSA function into a user-readable string.
		''' 
		'''</returns>
		Public Function ErrorMessage(code As Integer, msg As StringBuilder) As Integer
			Return niRFSA.ErrorMessage(Handle, code, msg)
		End Function

		''' <summary>
		''' Closes the rfsa session and releases resources associated with that session. 
		''' </summary>
		Public Sub Close()
			Dispose()
		End Sub

		''' <summary>
		''' 
		''' Configures whether the session acquires I/Q data or computes a power spectrum over the specified frequency range. 
		''' 
		''' </summary>
		''' <param name="Acquisition_Type">
		''' 
		''' acquisitionType
		''' ViInt32
		''' Configures the type of acquisition.
		''' 
		'''  IQ
		''' Configures the driver for I/Q acquisitions. This value is the default.
		''' Spectrum
		''' Configures the driver for spectrum acquisitions.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureAcquisitionType(Acquisition_Type As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureAcquisitionType(Me._handle, Acquisition_Type)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the reference level. The reference level represents the maximum expected power of an input RF signal.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Reference_Level">
		''' 
		''' referenceLevel
		''' ViReal64
		''' Specifies the expected total integrated power, in dBm, of the RF input signal.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureReferenceLevel(Channel_List As String, Reference_Level As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureReferenceLevel(Me._handle, Channel_List, Reference_Level)
			TestForError(pInvokeResult)
			Return pInvokeResult
        End Function

        ''' <summary>
        ''' 
        ''' Enables or disables SFP session access for the specified instrument.
        ''' SFP session access allows the NI-RFSA Soft Front Panel (SFP) to access a device with an existing open session and can help you debug your code. To enable session access, pass VI_TRUE to the enabled parameter. To disable session access, pass VI_FALSE to the enabled parameter.
        ''' Refer to Configuring SFP Session Access using LabWindows/CVI or C for more information about SFP session access. 
        ''' </summary>
        ''' <param name="enable">
        ''' 
        ''' enable
        ''' bool
        ''' Enables or disables SFP session access for the specified device. 
        ''' True
        ''' Enables session access.
        ''' False
        ''' Disables session access.
        ''' 
        ''' </param>
        ''' <returns>
        ''' Returns the status code of this operation. The status code either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
        ''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
        ''' The general meaning of the status code is as follows:
        ''' Value           Meaning
        ''' 0               Success
        ''' Positive Values Warnings
        ''' Negative Values Errors
        ''' 
        ''' </returns>
        Public Function EnableSessionAccess(enable As Boolean) As Integer
            Dim pInvokeResult As Integer = PInvoke.EnableSessionAccess(Me._handle, enable)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function


		''' <summary>
		''' 
		''' Configures the carrier frequency of the RF vector signal analyzer hardware for an I/Q acquisition. The carrier frequency is the center frequency of the I/Q acquisition.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Carrier_Frequency">
		''' 
		''' carrierFrequency
		''' ViReal64
		''' Specifies the carrier frequency, in hertz (Hz), of the RF signal to acquire. The RF vector signal analyzer tunes to this frequency. NI-RFSA may coerce this value based on hardware settings and downconversion settings.
		''' 
		''' NI-RFSA sets the NIRFSA_ATTR_IQ_CARRIER_FREQUENCY attribute to this value. Refer to the specifications document that shipped with your device for allowable frequency settings.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureIQCarrierFrequency(Channel_List As String, Carrier_Frequency As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureIQCarrierFrequency(Me._handle, Channel_List, Carrier_Frequency)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		#Region "Functions added between 2.5.2 and 2.9"

		''' <summary>
		''' Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
		''' 
		''' </summary>
		'''<returns>
		''' ViStatus _VI_FUNC niRFSA_Disable(ViSession vi);
		''' Purpose
		''' Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
		''' 
		'''</returns>
		Public Function Disable() As Integer
			Dim pInvokeResult As Integer = PInvoke.Disable(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' </summary>
        <Obsolete("Use overload FetchIQSingleRecordComplexF32(string, Int64, Int64, double, niComplexNumberF32[], out niRFSA_wfmInfo")> _
        Public Function FetchIQSingleRecordComplexF32(ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            Dim pInvokeResult As Integer = PInvoke.FetchIQSingleRecordComplexF32(Me._handle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
             Waveform_Info)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' </summary>
        Public Function FetchIQSingleRecordComplexF32(ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexNumberF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            Dim pInvokeResult As Integer = PInvoke.FetchIQSingleRecordComplexF32(Me._handle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
             Waveform_Info)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

		''' <summary>
		''' Specifies the calibration tone power during calibration tone amplitude calibration. You must call the niRFSA_Initiate function before calling this function.
		''' Supported Devices:  NI&#160;5693
		''' 
		''' </summary>
		'''<param name = "channel_List">
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "measurement">
		''' Specifies the calibration tone power, in dBm, for the current device setting.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_CalAdjustCalTonePower
		''' ViStatus  niRFSA_CalAdjustCalTonePower(ViSession vi,
		'''    ViConstString channelList,
		'''    ViReal64 measurement);
		''' Purpose
		''' Specifies the calibration tone power during calibration tone amplitude calibration. You must call the niRFSA_Initiate function before calling this function.
		''' Supported Devices:  NI&#160;5693
		''' 
		''' </returns>
		Public Function CalAdjustCalTonePower(Channel_List As String, Measurement As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureIQCarrierFrequency(Me._handle, Channel_List, Measurement)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function


		''' <summary>
		''' Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
		''' This function internally queries the attributes you set, and you must commit all attributes appropriate for your device calibration procedure prior to calling this function. Refer to ni.com/manuals for the most recent version of the calibration procedure for your device.
		''' Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
		''' Supported Devices:  NI&#160;5693/5694
		''' 
		''' </summary>
		'''<param name = "channel_List">
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "frequency">
		''' Specifies the RF frequency, in Hz, of the measurement taken.
		''' 
		'''</param>
		'''<param name = "gain">
		''' Specifies the gain measurement, in dB.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_CalAdjustDeviceGain
		''' ViStatus  niRFSA_CalAdjustDeviceGain(ViSession vi,
		'''    ViConstString channelList,
		'''    ViReal64 frequency,
		'''    ViReal64 gain);
		''' Purpose
		''' Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
		''' This function internally queries the attributes you set, and you must commit all attributes appropriate for your device calibration procedure prior to calling this function. Refer to ni.com/manuals for the most recent version of the calibration procedure for your device.
		''' Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
		''' Supported Devices:  NI&#160;5693/5694
		''' 
		''' </returns>
		Public Function CalAdjustDeviceGain(Channel_List As String, Frequency As Double, Gain As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.CalAdjustDeviceGain(Me._handle, Channel_List, Frequency, Gain)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Self-calibrates all configurations within the specified frequency and reference level limits.
		''' NI recommends that no external signals are present on the RF In port while the calibration is taking place.
		''' For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
		''' Supported Devices: NI&#160;5644R/5645R/5646R   
		''' 
		''' </summary>
		'''<param name = "stepsToOmit">
		'''     Specifies which calibration steps to skip as part of the self-calibration process. A value of 0 specifies all calibration steps are performed.
		'''           Note&#160;&#160;To omit two or more calibration steps, specify a bitwise-OR combination of the following constants. For example, if you wanted to omit NIRFSA_VAL_SELF_CAL_AMPLITUDE_ACCURACY and NIRFSA_VAL_SELF_CAL_LO_SELF_CAL, you would pass the following string to the niRFSA_SelfCalibrate function: NIRFSA_VAL_SELF_CAL_AMPLITUDE_ACCURACY | NIRFSA_VAL_SELF_CAL_LO_SELF_CAL 
		'''                         NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
		'''           Omits the LO Self Cal step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the LO PLL may fail to lock.
		'''                   NIRFSA_VAL_SELF_CAL_AMPLITUDE_ACCURACY
		'''           Omits the Amplitude Accuracy step. If you omit this step, the absolute accuracy of the device is not adjusted.
		'''                   NIRFSA_VAL_SELF_CAL_RESIDUAL_LO_POWER
		'''           Omits the Residual LO Power step. If you omit this step, the Residual LO Power performance is not adjusted.
		'''                   NIRFSA_VAL_SELF_CAL_IMAGE_SUPPRESSION
		'''           Omits the Image Suppression step. If you omit this step, the Residual Sideband Image Performance is not adjusted.
		''' 
		'''</param>
		'''<param name = "minFrequency">
		''' Specifies the minimum RF frequency in Hz.
		''' 
		'''</param>
		'''<param name = "maxFrequency">
		''' Specifies the maximum RF frequency in Hz.
		''' 
		'''</param>
		'''<param name = "minReferenceLevel">
		''' Specifies the minimum reference level in dBm.
		''' 
		'''</param>
		'''<param name = "maxReferenceLevel">
		''' Specifies the maximum reference level in dBm.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SelfCalibrateRange
		''' ViStatus niRFSA_SelfCalibrateRange (ViSession Instrument_Handle,ViInt64 Steps_To_Omit, ViReal64 Min_Frequency, ViReal64 Max_Frequency, ViReal64 Min_Reference_Level, ViReal64                      Max_Reference_Level);
		''' Purpose
		''' Self-calibrates all configurations within the specified frequency and reference level limits.
		''' NI recommends that no external signals are present on the RF In port while the calibration is taking place.
		''' For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
		''' Supported Devices: NI&#160;5644R/5645R/5646R   
		''' 
		'''</returns>
		Public Function SelfCalibrateRange(stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minReferenceLevel As Double, maxReferenceLevel As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.SelfCalibrateRange(Me._handle, stepsToOmit, minFrequency, maxFrequency, minReferenceLevel, maxReferenceLevel)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Resets the attribute to its default value.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
		''' 
		''' </summary>
		'''<returns>
		''' 
		'''niRFSA_ResetWithDefaults
		''' ViStatus _VI_FUNC niRFSA_ResetWithDefaults(ViSession vi);
		''' Purpose
		''' Resets the session to its default value.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
		''' 
		''' </returns>
		Public Function ResetWithDefaults() As Integer
			Dim pInvokeResult As Integer = PInvoke.ResetWithDefaults(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' </summary>
		''' <returns>
		''' </returns>
		Public Function InvalidateAllAttributes() As Integer
			Dim pInvokeResult As Integer = PInvoke.InvalidateAllAttributes(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
		''' Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
		''' 
		''' </summary>
		'''<param name = "Channel_List">
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "startingRecord">
		''' Specifies the first record to retrieve. Record numbers are zero-based. The default value is 0.
		''' 
		'''</param>
		'''<param name = "numberofRecords">
		''' Specifies the number of records to fetch.
		''' 
		'''</param>
		'''<param name = "Number_of_Samples">
		''' Specifies the number of samples per record.
		''' 
		'''</param>
		'''<param name = "timeout">
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data.
		''' 
		'''</param>
		'''<param name = "data">
		''' Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
		''' 
		'''</param>
		'''<param name = "Waveform_Info">
		''' Contains the absolute and relative timestamps for the operation, the time interval (dt), and the
		''' actual number of samples read.
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;Returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;Returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
		''' Note&#160;&#160;For the NI&#160;5644R/5645R/5646R, both timestamps are always set to 0.
		''' dt&#8212;Returns the time interval between data points in the acquired signal. The I/Q data sample rate is the reciprocal of this value.
		''' actual samples read&#8212;Returns an integer representing the number of samples in the waveform.
		''' offset&#8212;Returns the offset to scale data, (b), in mx + b form.
		''' gain&#8212;Returns the gain to scale data, (m), in mx + b form.
		''' Note&#160;&#160;Allocate an array of structures at least as large as numberOfRecords for this parameter.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_FetchIQMultiRecordComplexF32
		''' ViStatus niRFSA_FetchIQMultiRecordComplexF32(ViSession vi, 
		'''    ViConstString channelList, 
		'''    ViInt64 startingRecord, 
		'''    ViInt64 numberOfRecords, 
		'''    ViInt64 numberOfSamples, 
		'''    ViReal64 timeout, 
		'''    NIComplexNumberF32* data,
		'''    niRFSA_wfmInfo* wfmInfo);
		''' Purpose
		''' Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
		''' Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
		''' 
		''' </returns>
        <Obsolete("Use overload FetchIQMultiRecordComplexF32(string, Int64, Int64, Int64, double, niComplexNumberF32[], ByRef niRFSA_wfmInfo)")> _
        Public Function FetchIQMultiRecordComplexF32(ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexF32(), _
   ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            Dim pInvokeResult As Integer = PInvoke.FetchIQMultiRecordComplexF32(Me._handle, Channel_List, StartingRecord, NumberOfRecords, Number_of_Samples, Timeout, _
             Data, Waveform_Info)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
        ''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
        ''' Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
        ''' 
        ''' </summary>
        '''<param name = "Channel_List">
        ''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
        ''' 
        '''</param>
        '''<param name = "startingRecord">
        ''' Specifies the first record to retrieve. Record numbers are zero-based. The default value is 0.
        ''' 
        '''</param>
        '''<param name = "numberofRecords">
        ''' Specifies the number of records to fetch.
        ''' 
        '''</param>
        '''<param name = "Number_of_Samples">
        ''' Specifies the number of samples per record.
        ''' 
        '''</param>
        '''<param name = "timeout">
        ''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data.
        ''' 
        '''</param>
        '''<param name = "data">
        ''' Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
        ''' 
        '''</param>
        '''<param name = "Waveform_Info">
        ''' Contains the absolute and relative timestamps for the operation, the time interval (dt), and the
        ''' actual number of samples read.
        ''' The following list provides more information about each of these properties:
        ''' absolute timestamp&#8212;Returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
        ''' relative timestamp&#8212;Returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
        ''' Note&#160;&#160;For the NI&#160;5644R/5645R/5646R, both timestamps are always set to 0.
        ''' dt&#8212;Returns the time interval between data points in the acquired signal. The I/Q data sample rate is the reciprocal of this value.
        ''' actual samples read&#8212;Returns an integer representing the number of samples in the waveform.
        ''' offset&#8212;Returns the offset to scale data, (b), in mx + b form.
        ''' gain&#8212;Returns the gain to scale data, (m), in mx + b form.
        ''' Note&#160;&#160;Allocate an array of structures at least as large as numberOfRecords for this parameter.
        ''' 
        '''</param>
        '''<returns>
        ''' 
        '''niRFSA_FetchIQMultiRecordComplexF32
        ''' ViStatus niRFSA_FetchIQMultiRecordComplexF32(ViSession vi, 
        '''    ViConstString channelList, 
        '''    ViInt64 startingRecord, 
        '''    ViInt64 numberOfRecords, 
        '''    ViInt64 numberOfSamples, 
        '''    ViReal64 timeout, 
        '''    NIComplexNumberF32* data,
        '''    niRFSA_wfmInfo* wfmInfo);
        ''' Purpose
        ''' Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
        ''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
        ''' Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
        ''' 
        ''' </returns>
        Public Function FetchIQMultiRecordComplexF32(ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexNumberF32(), _
         ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            Dim pInvokeResult As Integer = PInvoke.FetchIQMultiRecordComplexF32(Me._handle, Channel_List, StartingRecord, NumberOfRecords, Number_of_Samples, Timeout, _
             Data, Waveform_Info)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

		''' <summary>
		'''</summary>
		Public Function SetUserData(identifier As String, bufferSize As Integer, data As Byte()) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetUserData(Handle, identifier, bufferSize, data)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		'''</summary>
		Public Function GetUserData(identifier As String, bufferSize As Integer, data As Byte(), ByRef actualDataSize As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetUserData(Handle, identifier, bufferSize, data, actualDataSize)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function
#End Region


#Region "Properties added between 2.9 and 14.1"
        '''<summary>
        '''Description
        '''Returns the actual frequency, in hertz (Hz), of the digitizer Sample Clock.
        '''Units: hertz (Hz)
        '''Supported Devices: NI 5668R
        '''</summary>
        Public Function SetDigitizerSampleClockRate(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.DigitizerSampleClockRate, channel, value)
        End Function
        '''<summary>
        '''Description
        '''Returns the actual frequency, in hertz (Hz), of the digitizer Sample Clock.
        '''Units: hertz (Hz)
        '''Supported Devices: NI 5668R
        '''</summary>
        Public Function GetDigitizerSampleClockRate(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.DigitizerSampleClockRate, channel, value)
        End Function

        '''<summary>
        '''Specifies the terminal at which to export the Digitizer Sample Clock.
        '''Valid Values: "" (empty string), "ClkOut"
        '''Default Value: "" (empty string)
        '''Supported Devices: NI 5668R
        '''</summary>
        Public Function SetExportedDigitizerSampleClockOutputTerminal(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.ExportedDigitizerSampleClockOutputTerminal, channel, value)
        End Function
        '''<summary>
        '''Specifies the terminal at which to export the Digitizer Sample Clock.
        '''Valid Values: "" (empty string), "ClkOut"
        '''Default Value: "" (empty string)
        '''Supported Devices: NI 5668R
        '''</summary>
        Public Function GetExportedDigitizerSampleClockOutputTerminal(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.ExportedDigitizerSampleClockOutputTerminal, channel, value)
        End Function

        '''<summary>
		'''Specifies whether to enable the LO2 OUT terminal on the installed devices.
		'''Set this attribute to TRUE to export the 4 GHz LO signal from the device LO2 IN terminal to the LO2 OUT terminal.
		'''You can also export the LO2 signal by setting the Lo2ExportEnabled attribute by call SetLo2ExportEnabled function with parameter true.
		'''Default Value: false
		'''Supported Devices: NI 5603/5605/5606 (external digitizer mode), NI 5665/5668R
		'''</summary>
        Public Function SetLo2ExportEnabled(channel As String, value As Boolean) As Integer
            Return Me.SetBoolean(niRFSAProperties.Lo2ExportEnabled, channel, value)
        End Function
        '''<summary>
		'''Specifies whether to enable the LO2 OUT terminal on the installed devices.
		'''Set this attribute to TRUE to export the 4 GHz LO signal from the device LO2 IN terminal to the LO2 OUT terminal.
		'''You can also export the LO2 signal by setting the Lo2ExportEnabled attribute by call SetLo2ExportEnabled function with parameter true.
		'''Default Value: false
		'''Supported Devices: NI 5603/5605/5606 (external digitizer mode), NI 5665/5668R
		'''</summary>
        Public Function GetLo2ExportEnabled(channel As String, ByRef value As Boolean) As Integer
            Return Me.GetBoolean(niRFSAProperties.Lo2ExportEnabled, channel, value)
        End Function


		'''<summary>
		'''Specifies the internal gain self-calibration correction for the 100 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
		'''Units: dB
		'''Default Value: 0 
		'''Supported Devices: NI 5606
		'''</summary>

        Public Function SetCalibrationCorrection100mhzFilter(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.CalibrationCorrection100mhzFilter, channel, value)
        End Function
        '''<summary>
        '''Specifies the internal gain self-calibration correction for the 100 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
        '''Units: dB
        '''Default Value: 0 
        '''Supported Devices: NI 5606
        '''</summary>
        Public Function GetCalibrationCorrection100mhzFilter(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.CalibrationCorrection100mhzFilter, channel, value)
        End Function

        '''<summary>
        '''Specifies the internal gain self-calibration correction for the 320 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
        '''Units: dB
        '''Default Value: 0 
        '''Supported Devices: NI 5606
        '''</summary>
        Public Function SetCalibrationCorrection320mhzFilter(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.CalibrationCorrection320mhzFilter, channel, value)
        End Function
        '''<summary>
        '''Specifies the internal gain self-calibration correction for the 320 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
        '''Units: dB
        '''Default Value: 0 
        '''Supported Devices: NI 5606
        '''</summary>
        Public Function GetCalibrationCorrection320mhzFilter(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.CalibrationCorrection320mhzFilter, channel, value)
        End Function

        '''<summary>
        '''Specifies the internal gain self-calibration correction for the 765 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
        '''Units: dB
        '''Default Value: 0 
        '''Supported Devices: NI 5606
        '''</summary>
        Public Function SetCalibrationCorrection765mhzFilter(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.CalibrationCorrection765mhzFilter, channel, value)
        End Function
        '''<summary>
        '''Specifies the internal gain self-calibration correction for the 765 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
        '''Units: dB
        '''Default Value: 0 
        '''Supported Devices: NI 5606
        '''</summary>
        Public Function GetCalibrationCorrection765mhzFilter(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.CalibrationCorrection765mhzFilter, channel, value)
        End Function

        '''<summary>
        '''Specifies the digitizer ID used during self calibration.
        '''Default Value: "" (empty string) 
        '''Supported Devices: NI 5603/5605/5606
        '''</summary>
        Public Function SetCalDigitizerId(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.CalDigitizerId, channel, value)
        End Function
        '''<summary>
        '''Specifies the digitizer ID used during self calibration.
        '''Default Value: "" (empty string) 
        '''Supported Devices: NI 5603/5605/5606
        '''</summary>
        Public Function GetCalDigitizerId(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.CalDigitizerId, channel, value)
        End Function

		'''<summary>
		'''Specifies the RF lowband signal conditioning path.
		'''Valid Values: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath2, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath3, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath4, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath5
		'''Default Value: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1
		'''Supported Devices: NI 5606
		'''</summary>
        Public Function SetCalRfLowbandSignalConditioningPathSelection(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.CalRfLowbandSignalConditioningPathSelection, channel, value)
        End Function
        '''<summary>
		'''Specifies the RF lowband signal conditioning path.
		'''Valid Values: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath2, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath3, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath4, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath5
		'''Default Value: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1
		'''Supported Devices: NI 5606
		'''</summary>
        Public Function GetCalRfLowbandSignalConditioningPathSelection(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.CalRfLowbandSignalConditioningPathSelection, channel, value)
        End Function

        '''<summary>
		'''Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering.
		'''For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this attribute returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
		'''The NI 5606 features high pass filters at 1.35 GHz and 2.2 GHz.
		'''Valid Values: 0 to 26.5
		'''Default Value: 0
		'''Supported Devices: NI 5606
		'''</summary>
        Public Function SetRfHighPassFiltering(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.RfHighPassFiltering, channel, value)
        End Function
        '''<summary>
		'''Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering.
		'''For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this attribute returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
		'''The NI 5606 features high pass filters at 1.35 GHz and 2.2 GHz.
		'''Valid Values: 0 to 26.5
		'''Default Value: 0
		'''Supported Devices: NI 5606
		'''</summary>
        Public Function GetRfHighPassFilteringe(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.RfHighPassFiltering, channel, value)
        End Function

        '''<summary>
        '''Returns the size of the selected IF attenuation table.
        '''Valid Values: 0-132
        '''Default Value: 0
        '''Supported Devices: NI 5606
        '''</summary>
        Public Function SetCalIfAttenuationTableSize(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.CalIfAttenuationTableSize, channel, value)
        End Function
        '''<summary>
        '''Returns the size of the selected IF attenuation table.
        '''Valid Values: 0-132
        '''Default Value: 0
        '''Supported Devices: NI 5606
        '''</summary>
        Public Function GetCalIfAttenuationTableSize(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.CalIfAttenuationTableSize, channel, value)
        End Function

        '''<summary>
        '''Returns the maximum instantaneous bandwidth of the device.
        '''Default Value: N/A
        '''Supported Devices: NI 5600/5601/5603/5605/5606 (external digitizer mode), NI 5661/5663/5663E/5665/5667/5668R, NI 5693/5694
        '''</summary>
        Public Function SetMaxDeviceInstantaneousBandwidth(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.MaxDeviceInstantaneousBandwidth, channel, value)
        End Function
        '''<summary>
        '''Returns the maximum instantaneous bandwidth of the device.
        '''Default Value: N/A
        '''Supported Devices: NI 5600/5601/5603/5605/5606 (external digitizer mode), NI 5661/5663/5663E/5665/5667/5668R, NI 5693/5694
        '''</summary>
        Public Function GetMaxDeviceInstantaneousBandwidth(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.MaxDeviceInstantaneousBandwidth, channel, value)
        End Function

        '''<summary>
        '''Returns the maximum I/Q rate.
        '''Default Value: N/A
        '''Supported Devices: NI 5661/5663/5663E/5665/5667/5668R
        '''</summary>
        Public Function SetMaxIQRate(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.MaxIQRate, channel, value)
        End Function
        '''<summary>
        '''Returns the maximum I/Q rate.
        '''Default Value: N/A
        '''Supported Devices: NI 5661/5663/5663E/5665/5667/5668R
        '''</summary>
        Public Function GetMaxIQRate(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.MaxIQRate, channel, value)
        End Function

        '''<summary>
        '''Enables the 28 V DC source on the device front panel.
        '''Units: dB
        '''Default Value: Disabled
        '''Supported Devices: NI 5606, NI 5668R
        '''</summary>
        Public Function SetNoiseSourcePowerEnabled(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.NoiseSourcePowerEnabled, channel, value)
        End Function
        '''<summary>
        '''Enables the 28 V DC source on the device front panel.
        '''Units: dB
        '''Default Value: Disabled
        '''Supported Devices: NI 5606, NI 5668R
        '''</summary>
        Public Function GetNoiseSourcePowerEnabled(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.NoiseSourcePowerEnabled, channel, value)
        End Function

        '''<summary>
        '''Returns a string containing the name of the FPGA target being used. This name can be used with the RIO open session to open a reference to the FPGA.
        '''This attribute is channel dependent if multiple targets are supported.
        '''Supported Devices: NI 5668R
        '''</summary>
        Public Function SetFpgaTargetName(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.FpgaTargetName, channel, value)
        End Function
        '''<summary>
        '''Returns a string containing the name of the FPGA target being used. This name can be used with the RIO open session to open a reference to the FPGA.
        '''This attribute is channel dependent if multiple targets are supported.
        '''Supported Devices: NI 5668R
        '''</summary>
        Public Function GetFpgaTargetName(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.FpgaTargetName, channel, value)
        End Function

        '''<summary>
		'''Specifies the amount of overlap between consecutive subspans in a multispan acquisition. Overlapping subspans can reduce the power level of spurs in acquired data. The value you specify determines the amount of shift as a percentage of subspan width.
		'''Specifying a value of 0 disables subspan overlap. In this case, NI-RFSA uses either a single-span acquisition or a multispan acquisition without overlap, depending on the frequency range requested and the current device settings.
		'''Specifying a value greater than 0 causes NI-RFSA to use a multispan acquisition with the specified overlap even in situations in which it would normally use a single-span acquisition. NI-RFSA acquires data within the overlapped percentage and uses the minimum of the acquired values.
		'''NoteNI: RFSA may apply further shifts to the specified value to accommodate fixed-frequency edges of components such as preselectors. 
		'''Valid Values: 0 to &lt;100
		'''Default Value: 0
		'''Supported Devices: NI 5665/5668R
		'''</summary>
        Public Function SetSubspanOverlap(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.SubspanOverlap, channel, value)
        End Function
        '''<summary>
		'''Specifies the amount of overlap between consecutive subspans in a multispan acquisition. Overlapping subspans can reduce the power level of spurs in acquired data. The value you specify determines the amount of shift as a percentage of subspan width.
		'''Specifying a value of 0 disables subspan overlap. In this case, NI-RFSA uses either a single-span acquisition or a multispan acquisition without overlap, depending on the frequency range requested and the current device settings.
		'''Specifying a value greater than 0 causes NI-RFSA to use a multispan acquisition with the specified overlap even in situations in which it would normally use a single-span acquisition. NI-RFSA acquires data within the overlapped percentage and uses the minimum of the acquired values.
		'''NoteNI: RFSA may apply further shifts to the specified value to accommodate fixed-frequency edges of components such as preselectors. 
		'''Valid Values: 0 to &lt;100
		'''Default Value: 0
		'''Supported Devices: NI 5665/5668R
		'''</summary>
        Public Function GetSubspanOverlap(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.SubspanOverlap, channel, value)
        End Function

#End Region

		''' <summary>
		''' 
		''' Configures the rate at which the device samples I/Q values. The utilized downconverter bandwidth is equal to the coerced iqRate times 0.8.
		''' 
		''' NI 5661&#8212;You should not need to configure an iqRate higher than 25 Samples per second (S/s) because the NI 5600 RF downconverter bandwidth is 20 MHz. If you choose to configure a higher I/Q rate, you may see aliasing effects at negative frequencies because the IF frequency of the NI 5600 RF downconverter is 15 MHz.
		''' NI 5663&#8212;Your maximum allowed instantaneous bandwidth depends on the I/Q carrier frequency you use. Refer to the NI 5601 RF downconverter overview for more information about instantaneous bandwidth.
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="IQ_Rate">
		''' 
		''' iqRate
		''' ViReal64
		''' Specifies the I/Q rate for the acquisition. The value is expressed in samples per second (S/s).
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureIQRate(Channel_List As String, IQ_Rate As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureIQRate(Me._handle, Channel_List, IQ_Rate)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the number of samples in a finite acquisition or configures the device to continuously acquire samples.
		''' If you configure the device for finite acquisition, it acquires the specified number of samples and then stops the acquisition. You can configure the device to acquire multiple records using the niRFSA_ConfigureNumberOfRecords function. Each record contains the number of samples specified in this function. The default number of records to acquire is 1.
		''' 
		''' If you configure the device to continuously acquire samples, it continues acquiring data until you call the niRFSA_Abort function to abort the acquisition. The device stores data in onboard memory in a circular fashion. After the device fills the memory, it starts overwriting previously acquired data from the beginning of the memory buffer. Retrieve the samples as they are being acquired using the niRFSA fetch IQ functions to avoid overwriting data before you retrieve it.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Number_of_Samples_Is_Finite">
		''' 
		''' numberOfSamplesIsFinite
		''' ViBoolean
		''' Specifies whether to configure the device to acquire a finite number of samples or to acquire samples continuously.
		''' 
		''' VI_TRUEThe device acquires a finite number of samples.
		''' VI_FALSEThe device continuously acquires samples.
		''' 
		''' </param>
		''' <param name="Samples_Per_Record">
		''' 
		''' samplesPerRecord
		''' ViInt64
		''' Specifies the number of samples per record if numberOfSamplesIsFinite is set to VI_TRUE.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureNumberOfSamples(Channel_List As String, Number_of_Samples_Is_Finite As Boolean, Samples_Per_Record As Int64) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureNumberOfSamples(Me._handle, Channel_List, System.Convert.ToUInt16(Number_of_Samples_Is_Finite), Samples_Per_Record)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the number of records in a finite acquisition or configures the device to continuously acquire records. You can only configure the device to acquire multiple records if the numberOfRecordsIsFinite parameter is set to VI_TRUE.
		''' 
		''' If you configure the device to acquire records continuously, it continues acquiring records until you call the niRFSA_abort function to abort the acquisition. The device stores records in onboard memory in a circular fashion. Once the device fills the memory, it starts overwriting previously acquired records from the beginning of the memory buffer. Fetch the records as they are acquired to avoid overwritting data before you retrieve it.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Number_of_Records_Is_Finite">
		''' 
		''' numberOfRecordsIsFinite
		''' ViBoolean
		''' Specifies whether to configure the device to acquire a finite number of records or to acquire records continuously.
		''' 
		''' VI_TRUEThe device acquires a finite number of records.
		''' VI_FALSEThe device continuously acquires records.
		''' 
		''' </param>
		''' <param name="Number_of_Records">
		''' 
		''' numberOfRecords
		''' ViInt64
		''' Specifies the number of records to acquire if numberOfRecordsIsFinite is set to VI_TRUE. The default number of records to acquire is 1.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureNumberOfRecords(Channel_List As String, Number_of_Records_Is_Finite As Boolean, Number_of_Records As Int64) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureNumberOfRecords(Me._handle, Channel_List, System.Convert.ToUInt16(Number_of_Records_Is_Finite), Number_of_Records)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the span and center frequency of the spectrum read by NI-RFSA. A spectrum acquisition consists of data surrounding the center frequency.
		''' 
		''' Note:If you configure the spectrum span to a value larger than the instantaneous bandwidth of the device, NI-RFSA
		'''             performs multiple acquisitions and combines them into a spectrum of the size you
		'''             requested.
		''' 
		''' Note:For the NI 5663, NI-RFSA does not support continuous acquisitions from frequency bands for which the instantaneous bandwidth differs. Refer to the NI 5601 RF Downconverter topic for more information about instantaneous bandwidth.
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Center_Frequency">
		''' 
		''' centerFrequency
		''' ViReal64
		''' Specifies the center frequency of a spectrum acquisition. The value is expressed in hertz (Hz). The NI-RFSA device you use determines the valid range. Refer to your device specifications document for more information about frequency range.
		''' 
		''' </param>
		''' <param name="Span">
		''' 
		''' span
		''' ViReal64
		''' Specifies the span of a spectrum acquisition. The value is expressed in hertz (Hz).
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureSpectrumFrequencyCenterSpan(Channel_List As String, Center_Frequency As Double, Span As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSpectrumFrequencyCenterSpan(Me._handle, Channel_List, Center_Frequency, Span)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the start and stop frequencies of the spectrum read by NI-RFSA.
		''' 
		''' Note:If you configure the spectrum span (stopFrequency &#8211;
		'''                 startFrequency) to a value larger than the instantaneous bandwidth of the device, NI-RFSA
		'''             performs multiple acquisitions and combines them into a spectrum of the size you
		'''             request.
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Start_Frequency">
		''' 
		''' startFrequency
		''' ViReal64
		''' Specifies the lower limit of a span of frequencies. This value is expressed in hertz (Hz).
		''' 
		''' </param>
		''' <param name="Stop_Frequency">
		''' 
		''' stopFrequency
		''' ViReal64
		''' Specifies the upper limit of a span of frequencies. This value is expressed in hertz (Hz).
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureSpectrumFrequencyStartStop(Channel_List As String, Start_Frequency As Double, Stop_Frequency As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSpectrumFrequencyStartStop(Me._handle, Channel_List, Start_Frequency, Stop_Frequency)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the resolution bandwidth of a spectrum acquisition. The resolution bandwidth controls the width of the frequency bins in the power spectrum computed by NI-RFSA. A larger value for resolution bandwidth means the frequency bins are wider, and hence you get fewer bins, or spectral lines.
		''' By default, the resolution bandwidth value corresponds to the 3&#160;decibels (dB) bandwidth of the window type NI-RFSA uses to compute the spectrum. To specify the frequency bin width directly, change the NIRFSA_ATTR_RESOLUTION_BANDWIDTH_TYPE attribute to NIRFSA_VAL_BIN_WIDTH.
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Resolution_Bandwidth">
		''' 
		''' resolutionBandwidth
		''' ViReal64
		''' Specifies the resolution bandwidth of a spectrum acquisition. The value is expressed in hertz (Hz). Configure the type of resolution bandwidth with the NIRFSA_ATTR_RESOLUTION_BANDWIDTH_TYPE attribute.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureResolutionBandwidth(Channel_List As String, Resolution_Bandwidth As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureResolutionBandwidth(Me._handle, Channel_List, Resolution_Bandwidth)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to wait for a digital edge Start trigger at the beginning of the acquisition.
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the source of the digital edge for the Start trigger.
		''' 
		''' PFI0
		''' The trigger is received on PFI 0.
		''' PFI1
		''' The trigger is received on PFI 1.
		''' PXI_Trig0
		''' The trigger is received on PXI trigger line 0.
		''' PXI_Trig1
		''' The trigger is received on PXI trigger line 1.
		''' PXI_Trig2
		''' The trigger is received on PXI trigger line 2.
		''' PXI_Trig3
		''' The trigger is received on PXI trigger line 3.
		''' PXI_Trig4
		''' The trigger is received on PXI trigger line 4.
		''' PXI_Trig5
		''' The trigger is received on PXI trigger line 5.
		''' PXI_Trig6
		''' The trigger is received on PXI trigger line 6.
		''' PXI_Trig7
		''' The trigger is received on PXI trigger line 7.
		''' PXI_STAR
		''' The trigger is received on the PXI star trigger line.
		''' 
		''' </param>
		''' <param name="Edge">
		''' 
		''' edge
		''' ViInt32
		''' Specifies the edge to detect.
		''' 
		''' Rising EdgeNI-RFSA detects a rising edge.
		''' Falling EdgeNI-RFSA detects a falling edge.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureDigitalEdgeStartTrigger(Source As String, Edge As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalEdgeStartTrigger(Me._handle, Source, Edge)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to wait for a software Start trigger at the beginning of the acquisition. The device  waits until you call the niRFSA_SendSoftwareEdgeTrigger function to assert the trigger.
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureSoftwareEdgeStartTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSoftwareEdgeStartTrigger(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to not wait for a Start trigger at the beginning of the acquisition. This function is only necessary if you configured a Start trigger in the past and now want to disable it.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function DisableStartTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.DisableStartTrigger(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to wait for a digital edge Reference trigger to mark a reference point within the record.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the source of the digital edge for the Reference trigger.
		''' 
		'''  NIRFSA_VAL_PFI0_STR  (&quot;PFI0&quot;)
		''' The trigger is received on PFI 0.
		''' NIRFSA_VAL_PFI1_STR  (&quot;PFI1&quot;)
		''' The trigger is received on PFI 1.
		'''  NIRFSA_VAL_PXI_TRIG0_STR (&quot;PXI_Trig0&quot;)
		''' The trigger is received on PXI trigger line 0.
		'''  NIRFSA_VAL_PXI_TRIG1_STR (&quot;PXI_Trig1&quot;)
		''' The trigger is received on PXI trigger line 1.
		'''  NIRFSA_VAL_PXI_TRIG2_STR (&quot;PXI_Trig2&quot;)
		''' The trigger is received on PXI trigger line 2.
		'''  NIRFSA_VAL_PXI_TRIG3_STR (&quot;PXI_Trig3&quot;)
		''' The trigger is received on PXI trigger line 3.
		'''  NIRFSA_VAL_PXI_TRIG4_STR (&quot;PXI_Trig4&quot;)
		''' The trigger is received on PXI trigger line 4.
		'''  NIRFSA_VAL_PXI_TRIG5_STR (&quot;PXI_Trig5&quot;)
		''' The trigger is received on PXI trigger line 5.
		'''  NIRFSA_VAL_PXI_TRIG6_STR (&quot;PXI_Trig6&quot;)
		''' The trigger is received on PXI trigger line 6.
		'''  NIRFSA_VAL_PXI_TRIG7_STR (&quot;PXI_Trig7&quot;)
		''' The trigger is received on PXI trigger line 7.
		'''  NIRFSA_VAL_PXI_STAR_STR (&quot;PXI_STAR&quot;)
		''' The trigger is received on the PXI star trigger line.
		''' 
		''' </param>
		''' <param name="Edge">
		''' 
		''' edge
		''' ViInt32
		''' Specifies the trigger edge to detect.
		''' 
		''' NIRFSA_VAL_RISING_EDGE (900)NI-RFSA detects a rising edge.
		''' NIRFSA_VAL_FALLING_EDGE (901)NI-RFSA detects a falling edge.
		''' 
		''' </param>
		''' <param name="Pretrigger_Samples">
		''' 
		''' pretriggerSamples
		''' ViInt64
		''' Specifies the number of samples to store for each record that was acquired in the time period immediately before the trigger occurred. 
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureDigitalEdgeRefTrigger(Source As String, Edge As Integer, Pretrigger_Samples As Int64) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalEdgeRefTrigger(Me._handle, Source, Edge, Pretrigger_Samples)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to wait for the complex power of the I/Q data to cross the specified threshold to mark a reference point within the record.
		''' 
		''' To trigger on bursted signals, add a minimum quiet time (configured with the NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_MINIMUM_QUIET_TIME attribute) to ensure the trigger does not occur in the middle of a burst if the acquisition starts while a burst is being generated. The quiet time should be set to a value smaller than the time between bursts, but large enough to ignore power changes within a burst.
		''' 
		''' Supported Devices: NI 5661/5663
		''' </summary>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the source of the RF signal for the power edge Reference trigger. The only supported value is channel &quot;0&quot;.
		''' 
		''' </param>
		''' <param name="Level">
		''' 
		''' level
		''' ViReal64
		''' Specifies the threshold above or below which the device  triggers.
		''' 
		''' </param>
		''' <param name="Slope">
		''' 
		''' slope
		''' ViInt32
		''' Specifies whether the device detects a positive or negative slope on the trigger signal.
		''' 
		''' NIRFSA_VAL_RISING_SLOPE (1000)NI-RFSA detects a rising edge (positive slope). This value is the default.
		''' NIRFSA_VAL_FALLING_SLOPE (1001)NI-RFSA detects a falling edge (negative slope).
		''' 
		''' </param>
		''' <param name="Pretrigger_Samples">
		''' 
		''' pretriggerSamples
		''' ViInt64
		''' Specifies the number of samples to store for each record that was acquired in the time period immediately before the trigger occurred. 
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureIQPowerEdgeRefTrigger(Source As String, Level As Double, Slope As Integer, Pretrigger_Samples As Int64) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureIQPowerEdgeRefTrigger(Me._handle, Source, Level, Slope, Pretrigger_Samples)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to wait for a software Reference trigger to mark a reference point within the record. The device waits until you call the niRFSA_SendSoftwareEdgeTrigger function to assert the trigger.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Pretrigger_Samples">
		''' 
		''' pretriggerSamples
		''' ViInt64
		''' Specifies the number of samples to store for each record that was acquired in the time period immediately before the trigger occurred. 
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureSoftwareEdgeRefTrigger(Pretrigger_Samples As Int64) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSoftwareEdgeRefTrigger(Me._handle, Pretrigger_Samples)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to not wait for a Reference trigger to mark a reference point within a record. This function is only necessary if you configured a Reference trigger in the past and now want to disable it.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function DisableRefTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.DisableRefTrigger(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to wait for a digital edge Advance trigger. The Advance trigger indicates where a new record begins.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the source of the digital edge for the Advance trigger.
		''' 
		'''  NIRFSA_VAL_PFI0_STR  (&quot;PFI0&quot;)
		''' The trigger is received on PFI 0.
		''' NIRFSA_VAL_PFI1_STR  (&quot;PFI1&quot;)
		''' The trigger is received on PFI 1.
		'''  NIRFSA_VAL_PXI_TRIG0_STR (&quot;PXI_Trig0&quot;)
		''' The trigger is received on PXI trigger line 0.
		'''  NIRFSA_VAL_PXI_TRIG1_STR (&quot;PXI_Trig1&quot;)
		''' The trigger is received on PXI trigger line 1.
		'''  NIRFSA_VAL_PXI_TRIG2_STR (&quot;PXI_Trig2&quot;)
		''' The trigger is received on PXI trigger line 2.
		'''  NIRFSA_VAL_PXI_TRIG3_STR (&quot;PXI_Trig3&quot;)
		''' The trigger is received on PXI trigger line 3.
		'''  NIRFSA_VAL_PXI_TRIG4_STR (&quot;PXI_Trig4&quot;)
		''' The trigger is received on PXI trigger line 4.
		'''  NIRFSA_VAL_PXI_TRIG5_STR (&quot;PXI_Trig5&quot;)
		''' The trigger is received on PXI trigger line 5.
		'''  NIRFSA_VAL_PXI_TRIG6_STR (&quot;PXI_Trig6&quot;)
		''' The trigger is received on PXI trigger line 6.
		'''  NIRFSA_VAL_PXI_TRIG7_STR (&quot;PXI_Trig7&quot;)
		''' The trigger is received on PXI trigger line 7.
		'''  NIRFSA_VAL_PXI_STAR_STR (&quot;PXI_STAR&quot;)
		''' The trigger is received on the PXI star trigger line.
		''' 
		''' </param>
		''' <param name="Edge">
		''' 
		''' edge
		''' ViInt32
		''' Specifies the trigger edge to detect.
		''' 
		''' NIRFSA_VAL_RISING_EDGE (900)NI-RFSA detects a rising edge.
		''' NIRFSA_VAL_FALLING_EDGE (901)NI-RFSA detects a falling edge.
		''' 
		''' </param>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureDigitalEdgeAdvanceTrigger(Source As String, Edge As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalEdgeAdvanceTrigger(Me._handle, Source, Edge)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to wait for a digital edge Advance trigger. The Advance trigger indicates where a new record begins. The device waits until you call the niRFSA_SendSoftwareEdgeTrigger function to assert the trigger.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function ConfigureSoftwareEdgeAdvanceTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSoftwareEdgeAdvanceTrigger(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the device to not use an Advance trigger. This function is only necessary if you configured an Advance trigger in the past and now want to disable it.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value           Meaning
		''' 0               Success
		''' Positive Values Warnings
		''' Negative Values Errors
		''' 
		''' </returns>
		Public Function DisableAdvanceTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.DisableAdvanceTrigger(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Sends a trigger to the device when you configure a software version of a supported trigger and the device is waiting for the trigger to be sent. This function also can be used to override a hardware trigger.
		''' This function returns an error in the following situations:
		''' You configure an invalid trigger.
		''' The instrument driver is in spectrum mode.
		''' You have not previously called the niRFSA_Initiate function.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Trigger">
		''' 
		''' trigger
		''' ViInt32
		''' Specifies the software signal to send.
		''' 
		''' NIRFSA_VAL_START_TRIGGER (1100)NI-RFSA sends a Start software trigger.
		''' NIRFSA_VAL_REF_TRIGGER (702)NI-RFSA sends a Reference software trigger.
		''' NIRFSA_VAL_ADVANCE_TRIGGER (1102)NI-RFSA sends an Advance software trigger.
		''' NIRFSA_VAL_ARM_REF_TRIGGER (1103)NI-RFSA sends an Arm Reference software trigger.
		''' 
		''' </param>
		''' <param name="Trigger_Identifier">
		''' 
		''' triggerIdentifier
		''' ViConstString
		''' Specifies a particular instance of a trigger. NI-RFSA does not currently support this parameter.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function SendSoftwareEdgeTrigger(Trigger As Integer, Trigger_Identifier As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.SendSoftwareEdgeTrigger(Me._handle, Trigger, Trigger_Identifier)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Routes signals (triggers, clocks, and events) to the specified output terminal.
		''' 
		''' If you export a signal with this function and  commit the session, the signal is routed to the output terminal you specify. If you then reconfigure the signal to have a different output terminal, the previous output terminal is tristated when the session is next committed. If you change the outputTerminal to NIRFSA_VAL_DO_NOT_EXPORT and commit, the previous output terminal is tristated.
		''' 
		''' Any signals, except for those exported over PXI trigger lines, that are exported within a session persist after the session closes to prevent signal glitches between sessions. PXI trigger lines are always set to tristate when a session is closed. If you wish to have the output terminal tristated when the session closes, first change the outputTerminal for the exported signal to NIRFSA_VAL_DO_NOT_EXPORT and commit the session again before closing it.
		''' 
		''' You can also tristate all PFI lines by setting the resetDevice parameter in the niRFSA_init function or by using the niRFSA_reset function.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Signal">
		''' 
		''' signal
		''' ViInt32
		''' Specifies the type of signal to route. You can choose to export the Start, Reference, and Advance triggers and the Ready for Start, Ready for Advance, Ready for Ref, End of Record, and Done events.
		''' 
		''' NIRFSA_VAL_START_TRIGGER (1100)NI-RFSA routes a Start trigger signal.
		''' NIRFSA_VAL_REF_TRIGGER (702)NI-RFSA routes a Reference trigger signal.
		''' NIRFSA_VAL_ADVANCE_TRIGGER (1102)NI-RFSA routes an Advance trigger signal.
		''' NIRFSA_VAL_READY_FOR_START_EVENT (1200)NI-RFSA routes a Ready for Start event signal.
		''' NIRFSA_VAL_READY_FOR_ADVANCE_EVENT (1202)NI-RFSA routes a  Ready for Advance event signal.
		''' NIRFSA_VAL_READY_FOR_REF_EVENT (1201)NI-RFSA routes a Ready for Reference event signal.
		''' NIRFSA_VAL_END_OF_RECORD_EVENT (1203)NI-RFSA routes an End of Record event signal.
		''' NIRFSA_VAL_DONE_EVENT (1204)NI-RFSA routes a Done event signal.
		''' NIRFSA_VAL_REF_CLOCK (1205)NI-RFSA routes a Reference clock signal.
		''' </param>
		''' <param name="Signal_Identifier">
		''' 
		''' signalIdentifier
		''' ViConstString
		''' Specifies a particular instance of a trigger. NI-RFSA does not currently support this parameter.
		''' 
		''' </param>
		''' <param name="Output_Terminal">
		''' 
		''' outputTerminal
		''' ViConstString
		''' Specifies the terminal where the signal will be exported. You can also choose not to export any signal.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function ExportSignal(Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ExportSignal(Me._handle, Signal, Signal_Identifier, Output_Terminal)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Configures the NI-RFSA device Reference clock.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Ref_Clock_Source">
		''' 
		''' refClockSource
		''' ViConstString
		''' Specifies the Reference clock source.
		''' 
		''' NIRFSA_VAL_ONBOARD_CLOCK_STR (&quot;OnboardClock&quot;)
		''' NI 5661&#8212;Lock the NI-RFSA device to the NI 5600 RF downconverter onboard clock.
		''' 
		''' NI 5663&#8212;Lock the NI 5622 to the NI 5652 LO source onboard clock. Connect the REF IN/OUT connector on the NI 5652 to the CLK IN terminal on the NI 5622.
		''' NIRFSA_VAL_REF_IN_STR (&quot;RefIn&quot;)
		''' NI 5661&#8212;Lock the NI-RFSA device to the signal at the external FREQ REF IN connector on the
		'''                   NI 5600.
		''' 
		''' NI 5663&#8212;Connect the external signal to the NI&#160;5652 REF IN/OUT connector. Only use this configuration in downconverter-only mode.
		''' NIRFSA_VAL_CLK_IN_STR (&quot;ClkIn&quot;)
		''' NI 5661&#8212;This configuration does not apply to the NI 5661.
		''' 
		''' NI 5663&#8212;Lock the NI 5622 to an external 10 MHz signal. Connect the external signal to the CLK IN connector on the NI 5622, and connect the NI 5622 CLK&#160;OUT connector to the REF IN/OUT connector on the NI 5652.
		''' NIRFSA_VAL_PXI_CLK_STR (&quot;PXI_Clk&quot;)
		''' NI 5661&#8212;Lock the NI-RFSA device to the PXI backplane clock using the NI&#160;5600. You must connect the PXI 10 MHz connector to the FREQ REF IN connector on the
		'''                   NI&#160;5600 front panel to use this option.
		''' 
		''' NI 5663&#8212;Lock the NI 5663 to the PXI backplane clock.
		''' 
		''' </param>
		''' <param name="Ref_Clock_Rate">
		''' 
		''' refClockRate
		''' ViReal64
		''' Specifies the reference clock rate, expressed in hertz (Hz). The default value is 10 MHz, which is the only supported value.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function ConfigureRefClock(Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureRefClock(Me._handle, Ref_Clock_Source, Ref_Clock_Rate)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Specifies the signal to drive the 10&#160;MHz Reference clock on the PXI backplane. This option can only be configured when the NI&#160;5600 is installed in Slot&#160;2 of the PXI chassis. 
		''' 
		''' Supported Devices: NI 5600 (downconverter only mode), NI 5661
		''' </summary>
		''' <param name="PXI_Clk_10_Source">
		''' 
		''' PXIClk10Source
		''' ViConstString
		''' Specifies the signal to drive the 10 MHz Reference clock on the PXI backplane. This option can only be configured when the NI&#160;5600 is in Slot&#160;2 of the PXI chassis. 
		''' 
		'''                                                              NIRFSA_VAL_NONE_STR (&quot;None&quot;)
		''' 
		'''                     The device does not drive the PXI 10 MHz backplane Reference
		'''                   clock.
		''' 
		'''                                                             NIRFSA_VAL_ONBOARD_CLOCK_STR (&quot;OnboardClock&quot;)
		''' 
		'''                     The device drives the PXI 10 MHz backplane Reference clock with
		'''                   the NI&#160;5600 onboard clock. You must connect the 10 MHz OUT connector to the
		'''                   PXI 10 MHz I/O connector on the NI&#160;5600 front panel to use this option.
		''' 
		'''                                                             NIRFSA_VAL_REF_IN_STR (&quot;RefIn&quot;)
		''' 
		'''                     The device drives the PXI 10 MHz backplane Reference clock with
		'''                   the reference source attached to the NI&#160;5600 FREQ REF IN connector. You must
		'''                   connect the 10&#160;MHz&#160;OUT connector to the PXI&#160;10&#160;MHz&#160;I/O connector on the NI&#160;5600 front
		'''                   panel to use this option.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function ConfigurePXIChassisClk10(PXI_Clk_10_Source As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigurePXIChassisClk10(Me._handle, PXI_Clk_10_Source)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Resets the attribute to its default value.
		''' 
		''' Supported Devices: 
		''' 
		''' </summary>
		''' <param name="Channel_Name">
		''' 
		''' channelName
		''' ViConstString
		''' Specifies the name of the channel on which to reset the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &quot;&quot; (empty string) or VI_NULL.
		''' 
		''' </param>
		''' <param name="Attribute_ID">
		''' 
		''' attributeID
		''' ViAttr
		''' Pass the ID of an attribute.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function ResetAttribute(Channel_Name As String, Attribute_ID As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ResetAttribute(Me._handle, Channel_Name, Attribute_ID)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Starts an I/Q acquisition. You may use this function in conjunction with the NI-RFSA fetch IQ functions to retrieve acquired I/Q data, or use the NI-RFSA read IQ functions to both initiate the acquisition and retrieve I/Q data at one time.
		''' 
		''' For improved accuracy, add a wait after calling the niRFSA_Commit function and before calling the niRFSA_Initiate function to allow the device additional settling time. Refer to the specifications document that shipped with your device for information about settling time and accuracy.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function Initiate() As Integer
			Dim pInvokeResult As Integer = PInvoke.Initiate(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Fetches binary I/Q data from a single record in an acquisition. The fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' 
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as a fetch is performed as part of that function.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Record_Number">
		''' 
		''' recordNumber
		''' ViInt64
		''' Specifies the record to retrieve. Record numbers are zero-based.
		''' 
		''' </param>
		''' <param name="Number_of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt64
		''' Specifies the number of samples to fetch. A value of &#8211;1 specifies that NI-RFSA will fetch all samples. The default value is 1000.
		''' 
		''' </param>
		''' <param name="Timeout">
		''' 
		''' timeout
		''' ViReal64
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' data
		''' NIComplexI16*
		''' Returns the acquired waveform. Allocate an NI ComplexI16 array at least as large as numberOfSamples.
		''' 
		''' </param>
		''' <param name="Waveform_Info">
		''' 
		''' wfmInfo
		''' niRFSA_wfmInfo*
		''' Contains the absolute and relative timestamps for the operation, the time interval, and the actual number of samples read.
		''' 
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
		''' dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
		''' actual samples read&#8212;returns an integer representing the number of samples in the waveform.
		''' offset&#8212;returns the offset to scale data (b) in mx+b form.
		''' gain&#8212;returns the gain to scale data (m) in mx+b form.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		<Obsolete("This method is obsolete; use the method FetchIQSingleRecordComplexI16 which receives an array of niComplexI16 instead")> _
		Public Function FetchIQSingleRecordComplexI16(Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, Data As Short(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			Dim pInvokeResult As Integer = PInvoke.FetchIQSingleRecordComplexI16(Me._handle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
				Waveform_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Fetches binary I/Q data from a single record in an acquisition. The fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as a fetch is performed as part of that function.
		''' Supported Devices: NI 5661/5663
		''' </summary>
		''' <param name = "Channel_List">
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' </param>
		''' <param name = "Record_Number">
		''' recordNumber
		''' ViInt64
		''' Specifies the record to retrieve. Record numbers are zero-based.
		''' </param>
		''' <param name = "Number_of_Samples">
		''' numberOfSamples
		''' ViInt64
		''' Specifies the number of samples to fetch. A value of &#8211;1 specifies that NI-RFSA will fetch all samples. The default value is 1000.
		''' </param>
		''' <param name = "Timeout">
		''' timeout
		''' ViReal64
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
		''' </param>
		''' <param name = "Data">
		''' data
		''' NIComplexI16*
		''' Returns the acquired waveform. Allocate an NI ComplexI16 array at least as large as numberOfSamples.
		''' </param>
		''' <param name = "Waveform_Info">
		''' wfmInfo
		''' niRFSA_wfmInfo*
		''' Contains the absolute and relative timestamps for the operation, the time interval, and the actual number of samples read.
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
		''' dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
		''' actual samples read&#8212;returns an integer representing the number of samples in the waveform.
		''' offset&#8212;returns the offset to scale data (b) in mx+b form.
		''' gain&#8212;returns the gain to scale data (m) in mx+b form.
		''' </param>
		''' <returns>
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' </returns>
		Public Function FetchIQSingleRecordComplexI16(Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, Data As niComplexI16(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			Dim pInvokeResult As Integer = PInvoke.FetchIQSingleRecordComplexI16(Me._handle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
				Waveform_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function


		''' <summary>
		''' 
		''' Fetches I/Q data from a single record in an acquisition. The fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' 
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Record_Number">
		''' 
		''' recordNumber
		''' ViInt64
		''' Specifies the record to retrieve. Record numbers are zero-based.
		''' 
		''' </param>
		''' <param name="Number_of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt64
		''' Specifies the number of samples to fetch.
		''' 
		''' </param>
		''' <param name="Timeout">
		''' 
		''' timeout
		''' ViReal64
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' data
		''' NIComplexNumber*
		''' Returns the acquired waveform. Allocate an NIComplexNumber array at least as large as numberOfSamples.
		''' 
		''' </param>
		''' <param name="Waveform_Info">
		''' 
		''' wfmInfo
		''' niRFSA_wfmInfo*
		''' Returns the absolute and relative timestamps for the operation, the time interval, and the actual number of samples read.
		''' 
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
		''' dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
		''' actual samples read&#8212;returns an integer representing the number of samples in the waveform.
		''' offset&#8212;returns the offset to scale data (b) in mx+b form.
		''' gain&#8212;returns the gain to scale data (m) in mx+b form.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function FetchIQSingleRecordComplexF64(Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, Data As niComplexNumber(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			Dim pInvokeResult As Integer = PInvoke.FetchIQSingleRecordComplexF64(Me._handle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
				Waveform_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Initiates an acquisition and fetches a single I/Q data record. Do not use this function if you have configured the device to continuously acquire data samples or to acquire multiple records.
		''' 
		''' Supported Devices: NI 5661/5663
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Timeout">
		''' 
		''' timeout
		''' ViReal64
		''' Specifies in seconds the time allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' data
		''' NIComplexNumber*
		''' Returns the acquired waveform. Allocate an NIComplexNumber array at least as large as numberOfSamples.
		''' 
		''' </param>
		''' <param name="Data_Array_Size">
		''' 
		''' dataArraySize
		''' ViInt64
		''' Specifies the size of the array for the data parameter. The array needs to be at least as large as the number of samples configured in the niRFSA_ConfigureNumberOfSamples function.
		''' 
		''' </param>
		''' <param name="Waveform_Info">
		''' 
		''' wfmInfo*
		''' niRFSA_wfmInfo
		''' Returns additional information about the data array.
		''' 
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
		''' dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
		''' actual samples read&#8212;returns an integer representing the number of samples in the waveform.
		''' offset&#8212;returns the offset to scale data (b) in mx+b form.
		''' gain&#8212;returns the gain to scale data (m) in mx+b form.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function ReadIQSingleRecordComplexF64(Channel_List As String, Timeout As Double, Data As niComplexNumber(), Data_Array_Size As Int64, ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			Dim pInvokeResult As Integer = PInvoke.ReadIQSingleRecordComplexF64(Me._handle, Channel_List, Timeout, Data, Data_Array_Size, Waveform_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Fetches binary I/Q data from multiple records in an acquisition. Fetching transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' 
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Starting_Record">
		''' 
		''' startingRecord
		''' ViInt64
		''' Specifies the first record to retrieve. Record numbers are zero-based.
		''' 
		''' </param>
		''' <param name="Number_of_Records">
		''' 
		''' numberOfRecords
		''' ViInt64
		''' Specifies the number of records to fetch. A value of &#8211;1 specifies that NI-RFSA fetches all records in an acquisition starting with the record specified by startingRecord. Record numbers are zero-based. The default value is &#8211;1.
		''' 
		''' </param>
		''' <param name="Number_of_Samples">
		''' 
		''' numberofSamples
		''' ViInt64
		''' Specifies the number of samples per record.
		''' </param>
		''' <param name="Timeout">
		''' 
		''' timeout
		''' ViReal64
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' data
		''' NIComplexI16*
		''' Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
		''' 
		''' </param>
		''' <param name="Waveform_Info">
		''' 
		''' wfmInfo
		''' niRFSA_wfmInfo*
		''' Returns an array of structures containing information about each record fetched. Each structure contains the absolute and relative timestamps, the dt, and the actual number of samples read for the corresponding record.
		''' 
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;returns the timestamp in seconds of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;returns a timestamp that corresponds to the difference in seconds between the first sample returned and the Reference trigger location.
		''' dt&#8212;returns the time interval between data points in the acquired signal. The IQ data sampling rate is the reciprocal of this value.
		''' actual samples read&#8212;returns an integer representing the number of samples in the waveform.
		''' offset&#8212;returns the offset to scale data in mx+b form.
		''' gain&#8212;returns the gain to scale data in mx+b form.
		''' Note:Allocate an array of structures at least as large as numberOfRecords for this parameter.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		<Obsolete("This method is obsolete; use the method FetchIQMultiRecordComplexI16 which receives an array of niComplexI16 instead")> _
		Public Function FetchIQMultiRecordComplexI16(Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, Data As Short(), _
			Waveform_Info As niRFSA_wfmInfo()) As Integer
			Dim pInvokeResult As Integer = PInvoke.FetchIQMultiRecordComplexI16(Me._handle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
				Data, Waveform_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Fetches binary I/Q data from multiple records in an acquisition. Fetching transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
		''' Supported Devices: NI 5661/5663
		''' </summary>
		''' <param name = "Channel_List">
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' </param>
		''' <param name = "Starting_Record">
		''' startingRecord
		''' ViInt64
		''' Specifies the first record to retrieve. Record numbers are zero-based.
		''' </param>
		''' <param name = "Number_of_Records">
		''' numberOfRecords
		''' ViInt64
		''' Specifies the number of records to fetch. A value of &#8211;1 specifies that NI-RFSA fetches all records in an acquisition starting with the record specified by startingRecord. Record numbers are zero-based. The default value is &#8211;1.
		''' </param>
		''' <param name = "Number_of_Samples">
		''' numberofSamples
		''' ViInt64
		''' Specifies the number of samples per record.
		''' </param>
		''' <param name = "Timeout">
		''' timeout
		''' ViReal64
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
		''' </param>
		''' <param name = "Data">
		''' data
		''' NIComplexI16*
		''' Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
		''' </param>
		''' <param name = "Waveform_Info">
		''' wfmInfo
		''' niRFSA_wfmInfo*
		''' Returns an array of structures containing information about each record fetched. Each structure contains the absolute and relative timestamps, the dt, and the actual number of samples read for the corresponding record.
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;returns the timestamp in seconds of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;returns a timestamp that corresponds to the difference in seconds between the first sample returned and the Reference trigger location.
		''' dt&#8212;returns the time interval between data points in the acquired signal. The IQ data sampling rate is the reciprocal of this value.
		''' actual samples read&#8212;returns an integer representing the number of samples in the waveform.
		''' offset&#8212;returns the offset to scale data in mx+b form.
		''' gain&#8212;returns the gain to scale data in mx+b form.
		''' Note:Allocate an array of structures at least as large as numberOfRecords for this parameter.
		''' </param>
		''' <returns>
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' The general meaning of the status code is as follows:
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' </returns>
		Public Function FetchIQMultiRecordComplexI16(Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, Data As niComplexI16(), _
			Waveform_Info As niRFSA_wfmInfo()) As Integer
			Dim pInvokeResult As Integer = PInvoke.FetchIQMultiRecordComplexI16(Me._handle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
				Data, Waveform_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
		''' 
		''' This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Starting_Record">
		''' 
		''' startingRecord
		''' ViInt64
		''' Specifies the first record to retrieve. Record numbers are zero-based.
		''' 
		''' </param>
		''' <param name="Number_of_Records">
		''' 
		''' numberOfRecords
		''' ViInt64
		''' Specifies the number of records to fetch. A value of &#8211;1 specifies that NI-RFSA fetches all records in an acquisition starting with the record specified by startingRecord. Record numbers are zero-based.  The default value is &#8211;1.
		''' 
		''' </param>
		''' <param name="Number_of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt64
		''' Specifies the number of samples per record.
		''' 
		''' </param>
		''' <param name="Timeout">
		''' 
		''' timeout
		''' ViReal64
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' data
		''' NIComplexNumber*
		''' Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
		''' 
		''' </param>
		''' <param name="Waveform_Info">
		''' 
		''' wfmInfo
		''' niRFSA_wfmInfo*
		''' Returns an array of structures containing information about each record fetched. Each structure contains the absolute and relative timestamps, the dt, and the actual number of samples read for the corresponding record.
		''' 
		''' The following list provides more information about each of these properties:
		''' absolute timestamp&#8212;returns the timestamp in seconds of the first fetched sample that is comparable between records and acquisitions.
		''' relative timestamp&#8212;returns a timestamp that corresponds to the difference in seconds between the first sample returned and the Reference trigger location.
		''' dt&#8212;returns the time interval between data points in the acquired signal. The IQ data sampling rate is the reciprocal of this value.
		''' actual samples read&#8212;returns an integer representing the number of samples in the waveform.
		''' offset&#8212;returns the offset to scale data in mx+b form.
		''' gain&#8212;returns the gain to scale data in mx+b form.
		''' Note:Allocate an array of structures at least as large as numberOfRecords for this parameter.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function FetchIQMultiRecordComplexF64(Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, Data As niComplexNumber(), _
			Waveform_Info As niRFSA_wfmInfo()) As Integer
			Dim pInvokeResult As Integer = PInvoke.FetchIQMultiRecordComplexF64(Me._handle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
				Data, Waveform_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Stops an acquisition previously started with the niRFSA_Initiate function. Calling this function is optional, unless you want to stop an acquisition before it is complete or you are continuously acquiring data.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function Abort() As Integer
			Dim pInvokeResult As Integer = PInvoke.Abort(Handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Initiates a spectrum acquisition and returns power spectrum data.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Timeout">
		''' 
		''' timeout
		''' ViReal64
		''' Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. The default value is 10.
		''' 
		''' </param>
		''' <param name="Power_Spectrum_Data">
		''' 
		''' powerSpectrumData[]
		''' ViReal64
		''' Returns power spectrum data. Allocate an array as large as dataArraySize.
		''' 
		''' </param>
		''' <param name="Data_Array_Size">
		''' 
		''' dataArraySize
		''' ViInt64
		''' Specifies the size of the array you specify for the powerSpectrumData parameter. Use the niRFSA_GetNumberOfSpectralLines function to obtain the array size to allocate. The array must be at least as large as the number of spectral lines that NI-RFSA computes for the power spectrum.
		''' 
		''' </param>
		''' <param name="Spectrum_Info">
		''' 
		''' spectrumInfo
		''' niRFSA_spectrumInfo*
		''' Returns additional information about the powerSpectrumData array. This information includes the frequency, in hertz (Hz) corresponding to the first element in the array, the frequency increment, in Hz, between adjacent array elements, and the number of spectral lines the function returned.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function ReadPowerSpectrumF64(Channel_List As String, Timeout As Double, Power_Spectrum_Data As Double(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
			Dim pInvokeResult As Integer = PInvoke.ReadPowerSpectrumF64(Me._handle, Channel_List, Timeout, Power_Spectrum_Data, Data_Array_Size, Spectrum_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Returns the number of spectral lines that NI-RFSA will compute with the current power spectrum configuration.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Number_of_Spectral_Lines">
		''' 
		''' numberOfSpectralLines
		''' ViInt32*
		''' Returns the value of the NIRFSA_ATTR_NUM_SPECTRAL_LINES attribute.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function GetNumberOfSpectralLines(Channel_List As String, ByRef Number_of_Spectral_Lines As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetNumberOfSpectralLines(Me._handle, Channel_List, Number_of_Spectral_Lines)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Checks the status of the acquisition. Use this function to check for any errors that may occur during signal acquisition or to check whether the device has completed the acquisition operation. 
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Is_Done">
		''' 
		''' isDone
		''' ViBoolean*
		''' Returns signal acquisition status.
		''' 
		''' VI_TRUESignal acquisition is complete.
		''' VI_FALSESignal acquisition is not complete.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function CheckAcquisitionStatus(ByRef Is_Done As Boolean) As Integer
			Dim Is_DoneAsUShort As UShort
			Dim pInvokeResult As Integer = PInvoke.CheckAcquisitionStatus(Me._handle, Is_DoneAsUShort)
			Is_Done = System.Convert.ToBoolean(Is_DoneAsUShort)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Resets the device to a default initialization state.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function reset() As Integer
			Dim pInvokeResult As Integer = PInvoke.reset(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Commits settings to hardware. Calling this function is optional. Settings are automatically committed to hardware when you call the niRFSA_Initiate function, a read IQ function, or the niRFSA_ReadPowerSpectrumF64 function. 
		''' 
		''' For improved accuracy, add a wait after calling this function and before calling the niRFSA_Initiate function to allow the device additional settling time. Refer to the specifications document that shipped with your device for information about settling time and accuracy.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function Commit() As Integer
			Dim pInvokeResult As Integer = PInvoke.Commit(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Performs a self-test on the NI-RFSA device and returns the test result. This function performs a simple series of tests verifying that the NI-RFSA device is powered on and responding.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <param name="testResult">
		''' 
		''' testResult
		''' ViInt16*
		''' Returns the value from the device self-test. A value of 0 means success.
		''' 
		''' </param>
		''' <param name="testMessage">
		''' 
		''' testMessage[]
		''' ViChar
		''' Returns the self-test response string from the NI-RFSA device.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function self_test(ByRef testResult As Short, testMessage As System.Text.StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.self_test(Me._handle, testResult, testMessage)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Self-calibrates the IF digitizer associated with the NI-RFSA device. If self calibration is performed successfully, the new calibration constants are immediately stored in the self calibration area of the digitizer EEPROM. Refer to the NI High-Speed Digitizers Help for more information about how often to self-calibrate. 
		''' 
		''' Call this function to obtain more accurate acquisition results when the environmental conditions change significantly.
		''' 
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		<Obsolete("The function is obslete and is no longer supported")> _
		Public Function SelfCal() As Integer
			Dim pInvokeResult As Integer = PInvoke.SelfCal(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Corrects for temperature variations while acquiring the same signal for extended periods of time in a continuous acquisition. Measurements are affected by changes in temperature. NI-RFSA internally acquires the
		'''             temperature every time you initiate an acquisition. If you are performing a continuous acquisition, National Instruments recommends calling this function once every 10&#160;minutes in a stable temperature environment to periodically update temperature calibration.
		'''             Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function PerformThermalCorrection() As Integer
			Dim pInvokeResult As Integer = PInvoke.PerformThermalCorrection(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Returns the number of points acquired that have not been fetched yet.
		''' 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Record_Number">
		''' 
		''' recordNumber
		''' ViInt64
		''' Specifies the record from which to read the backlog. Record numbers are zero-based. The default value is 0.
		''' 
		''' </param>
		''' <param name="Backlog">
		''' 
		''' backlog
		''' ViInt64*
		''' Returns the number of samples available to read for the requested record.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function GetFetchBacklog(Channel_List As String, Record_Number As Int64, ByRef Backlog As Int64) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetFetchBacklog(Me._handle, Channel_List, Record_Number, Backlog)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Returns the revision numbers of the NI-RFSA instrument driver.
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' </summary>
		''' <param name="Instrument_Driver_Revision">
		''' 
		''' driverRev
		''' ViChar[]
		''' Returns the instrument driver software revision numbers in the form of a string. The value of the NIRFSA_ATTR_SPECIFIC_DRIVER_REVISION attribute is returned.
		''' 
		''' You must pass a ViChar array with at least 256&#160;bytes.
		''' 
		''' </param>
		''' <param name="Firmware_Revision">
		''' 
		''' instRev
		''' ViChar[]
		''' Returns the instrument firmware revision numbers in the form of a string. The value of the NIRFSA_ATTR_INSTRUMENT_FIRMWARE_REVISION attribute is returned.
		''' 
		''' You must pass a ViChar array with at least 256&#160;bytes.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function revision_query(Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.revision_query(Me._handle, Instrument_Driver_Revision, Firmware_Revision)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Returns information about the power spectrum NI-RFSA computes.
		''' 
		''' Note:The NI Spectral Measurements Toolkit (SMT) requires this information. 
		''' Supported Devices: NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Spectrum_Info">
		''' 
		''' spectrumInfo
		''' SmtSpectrumInfo*
		''' Returns a cluster containing information about the power spectrum NI-RFSA computes that is needed by the SMT.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function GetSpectralInfoForSMT(ByRef Spectrum_Info As SmtSpectrumInfo) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetSpectralInfoForSMT(Me._handle, Spectrum_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' Returns the IF response, based upon current NI-RFSA settings. The NI 5661/5663 automatically corrects for the IF response when Digital IF Equalization is enabled, which is the default state. If you are using downconverter only mode, you can use information returned from this VI to correct your measurement.
		''' Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
		''' 
		''' </summary>
		''' <param name="Channel_List">
		''' 
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Use &quot;&quot; (an empty string) or VI_NULL to specify all channels.
		''' 
		''' </param>
		''' <param name="Buffer_Size">
		''' 
		''' bufferSize
		''' ViInt32
		''' Specifies the size of the array you specify for the powerSpectrumData parameter. Use the niRFSA_GetNumberOfSpectralLines function to learn the array size you need to allocate. The array must be at least as large as the number of spectral lines that NI-RFSA computes for the power spectrum.
		''' 
		''' </param>
		''' <param name="Frequencies">
		''' 
		''' frequencies[]
		''' ViReal64
		''' Returns an array containing the frequencies, in hertz (Hz), that correspond to the response data.
		''' 
		''' Pass VI_NULL if you do not want to use this parameter.
		''' 
		''' </param>
		''' <param name="Magnitude_Response">
		''' 
		''' magnitudeResponse[]
		''' ViReal64
		''' Returns an array containing the magnitude IF response, in decibels (dB). The magnitude IF response is normalized to the center frequency at each frequency in the frequencies array.
		''' 
		''' Pass VI_NULL if you do not want to use this parameter.
		''' 
		''' </param>
		''' <param name="Phase_Response">
		''' 
		''' phaseResponse[]
		''' ViReal64
		''' Returns an array containing the phase IF response, in degrees. The phase IF response is normalized to the center frequency at each frequency entry in the frequencies array.
		''' 
		''' Pass VI_NULL if you do not want to use this parameter.
		''' 
		''' </param>
		''' <param name="Number_of_Frequencies">
		''' 
		''' numberOfFrequencies
		''' ViInt32*
		''' Returns the required number of elements in the frequencies array and the response arrays. If bufferSize is 0, this parameter returns the expected array size. The expected array size depends on which NI-RFSA device you use (NI&#160;5661 or NI&#160;5663) and on the current settings (NI&#160;5663 only).
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
		''' 
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.
		''' 
		''' The general meaning of the status code is as follows:
		''' 
		''' Value
		''' Meaning
		''' 0
		''' Success
		''' Positive Values
		''' Warnings
		''' Negative Values
		''' Errors
		''' 
		''' </returns>
		Public Function GetFrequencyResponse(Channel_List As String, Buffer_Size As Integer, Frequencies As Double(), Magnitude_Response As Double(), Phase_Response As Double(), ByRef Number_of_Frequencies As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetFrequencyResponse(Me._handle, Channel_List, Buffer_Size, Frequencies, Magnitude_Response, Phase_Response, _
				Number_of_Frequencies)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Specifies the IF attenuation settings. Call this function for every measurement taken.
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "iFFilter">
		''' IFFilter
		''' ViInt32
		''' Specifies the IF filter used.
		''' NIRFSA_VAL_187_5_MHZ_WIDE (1400)
		''' Uses the 187.5 MHz wide bandwidth filter.
		''' NIRFSA_VAL_187_5_MHZ_NARROW (1401)
		''' Uses the 187.5 MHz narrow bandwidth filter.
		''' NIRFSA_VAL_53_MHZ (1402)
		''' Uses the 53 MHz filter.
		''' NIRFSA_VAL_BYPASS (1403)
		''' Bypasses the IF filter.
		''' 
		'''</param>
		'''<param name = "numberofAttenuators">
		''' numberOfAttenuators
		''' ViInt32
		''' Specifies the number of attenuators to use during the IF attenuation adjustment.
		''' 
		'''</param>
		'''<param name = "attenuatorSettings">
		''' attenuatorSettings
		''' ViReal64* 
		''' Specifies the IF attenuator settings for the measurement. The first element in the array corresponds with IF1, the next element corresponds to IF2, and so on.
		''' 
		'''</param>
		'''<param name = "measurement">
		''' measurement
		''' ViReal64
		''' Specifies the measurement taken for the current input configuration.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function CalAdjustIFAttenuationCalibration(channelList As String, iFFilter As Integer, numberofAttenuators As Integer, attenuatorSettings As Double(), measurement As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.CalAdjustIFAttenuationCalibration(Me._handle, channelList, iFFilter, numberofAttenuators, attenuatorSettings, measurement)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Specifies the IF response settings for the driver.
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "iFFilter">
		''' IFFilter
		''' ViInt32
		''' Specifies the IF filter used.
		''' NIRFSA_VAL_187_5_MHZ_WIDE (1400)
		''' Uses the 187.5 MHz wide bandwidth path.
		''' NIRFSA_VAL_187_5_MHZ_NARROW (1401)
		''' Uses the 187.5 MHz narrow bandwidth path.
		''' NIRFSA_VAL_53_MHZ (1402)
		''' Uses the 53 MHz path.
		''' NIRFSA_VAL_BYPASS (1403)
		''' Bypasses the IF path.
		''' 
		'''</param>
		'''<param name = "rFFrequency">
		''' RFFrequency
		''' ViReal64
		''' Specifies the RF frequency used during the IF response adjustment.
		''' 
		'''</param>
		'''<param name = "bandwidth">
		''' bandwidth
		''' ViReal64
		''' Specifies the bandwidth to use for the IF response adjustment.
		''' 
		'''</param>
		'''<param name = "numberofMeasurements">
		''' numberOfMeasurements
		''' ViInt32
		''' Specifies the number of measurements to make.
		''' 
		'''</param>
		'''<param name = "measurements">
		''' measurements
		''' ViReal64*
		''' Specifies the relevant measurements taken for each IF filter configuration.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function CalAdjustIFResponseCalibration(channelList As String, iFFilter As Integer, rFFrequency As Double, bandwidth As Double, numberofMeasurements As Integer, measurements As Double()) As Integer
			Dim pInvokeResult As Integer = PInvoke.CalAdjustIFResponseCalibration(Me._handle, channelList, iFFilter, rFFrequency, bandwidth, numberofMeasurements, _
				measurements)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Write the reference level settings to the driver. The reference level calibration data is split into either the default configuration data or the mechanical relay disabled configuration data.
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "referenceLevelCalDataType">
		''' referenceLevelCalDataType
		''' ViInt32
		''' Specifies whether the reference level calibration data being used is the default configuration data or the mechanical relay disabled configuration data.
		''' NIRFSA_VAL_EXT_CAL_DEFAULT (1800)
		''' The data is the default configuration data.
		''' NIRFSA_VAL_EXT_CAL_MECHANICAL_ATTENUATOR_DISABLED (1801)
		''' The data is the configuration data when the mechanical relay is disabled. Use this option to save uncalibrated measurements for more advanced operation.
		''' 
		'''</param>
		'''<param name = "rFBand">
		''' RFBand
		''' ViInt32
		''' Specifies the RF band used during the reference level calibration.
		''' NIRFSA_VAL_RF_BAND_1
		''' The RF band 1 path is used.
		''' NIRFSA_VAL_RF_BAND_2
		''' The RF band 2 path is used.
		''' NIRFSA_VAL_RF_BAND_3
		''' The RF band 3 path is used.
		''' NIRFSA_VAL_RF_BAND_4
		''' The RF band 4 path is used.
		''' 
		'''</param>
		'''<param name = "attenuatorTableNumber">
		''' attenuatorTableNumber
		''' ViInt32
		''' Specifies which attenuation table you are using. Valid values are 0 to 2.
		''' 
		'''</param>
		'''<param name = "frequency">
		''' frequency
		''' ViReal64
		''' Specifies the frequency for the reference level adjustment.
		''' 
		'''</param>
		'''<param name = "measurement">
		''' measurement
		''' ViReal64
		''' Specifies the relevant measurement taken for the current configuration.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function CalAdjustRefLevelCalibration(channelList As String, referenceLevelCalDataType As Integer, rFBand As Integer, attenuatorTableNumber As Integer, frequency As Double, measurement As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.CalAdjustRefLevelCalibration(Me._handle, channelList, referenceLevelCalDataType, rFBand, attenuatorTableNumber, frequency, _
				measurement)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Writes the calibration temperature to the driver. 
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "temperaturedegreesC">
		''' temperature
		''' ViReal64
		''' Specifies the calibration temperature.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function CalSetTemperature(temperaturedegreesC As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.CalSetTemperature(Me._handle, temperaturedegreesC)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Changes the password that is required to initialize an external calibration session.
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "oldpassword">
		''' ViConstString
		''' oldPassword
		''' Specifies the previous password used to protect the calibration values.
		''' 
		'''</param>
		'''<param name = "newpassword">
		''' ViConstString
		''' newPassword
		''' Specifies the new password to use to protect the calibration values.
		''' The maximum length of the password varies by device. The NI 5601 can have a password that is up to 10 characters long.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function ChangeExtCalPassword(oldpassword As String, newpassword As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ChangeExtCalPassword(Me._handle, oldpassword, newpassword)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Closes an EEPROM-specific calibration step. This step ensures that all the measurements required for this particular calibration step haven been recorded by the user via the adjust function calls. 
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<returns>
		''' Closes an EEPROM-specific calibration step. This step ensures that all the measurements required for this particular calibration step haven been recorded by the user via the adjust function calls. 
		''' Supported Devices: NI 5601
		''' 
		'''</returns>
		Public Function CloseCalibrationStep() As Integer
			Dim pInvokeResult As Integer = PInvoke.CloseCalibrationStep(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Closes an NI-RFSA external calibration session and, if specified, stores the new calibration constants and calibration data, such as time, in the onboard EEPROM.
		''' Supported Devices: NI 5661/5663/5663E
		''' 
		''' </summary>
		'''<param name = "action">
		''' action
		''' ViInt32
		''' Specifies how to use the calibration values from this session as the session is closed.
		''' Defined Values:
		'''           NIRFSA_VAL_EXT_CAL_ABORT               The old calibration constants are kept, and the new ones are discarded.
		''' NIRFSA_VAL_EXT_CAL_COMMITThe new calibration constants are stored in the EEPROM.
		''' 
		'''</param>
		'''<returns>
		''' Closes an NI-RFSA external calibration session and, if specified, stores the new calibration constants and calibration data, such as time, in the onboard EEPROM.
		''' Supported Devices: NI 5661/5663/5663E
		''' 
		'''</returns>
		Public Function CloseExtCal(action As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.CloseExtCal(Me._handle, action)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Creates an empty RF configuration list for RF list mode. An RF configuration list is composed of configuration list steps. Each step specifies the state of the instrument by specifying values for attributes/properties.
		''' After a configuration list is created, the list is enabled using the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST attribute or by setting setAsActiveList to  VI_TRUE. Call the niRFSA_CreateConfigurationListStep function to add steps to the configuration list.
		''' Supported Devices: NI 5663E
		''' 
		''' </summary>
		'''<param name = "listName">
		''' listName
		''' ViConstString
		''' Specifies the name of the configuration list. This string  may not contain spaces, special characters, or punctuation marks.
		''' 
		'''</param>
		'''<param name = "numberOfListAttributes">
		''' numberOfListAttributes
		''' ViInt32
		''' Specifies the number of list attributes to set.
		''' 
		'''</param>
		'''<param name = "listAttributeIDs">
		''' listAttributeIDs
		''' ViAttr[]
		''' Specifies the configuration list attributes that will be set.
		''' You can include the following properties in your configuration list:
		''' NIRFSA_ATTR_IQ_CARRIER_FREQUENCY
		''' NIRFSA_ATTR_REFERENCE_LEVEL
		''' NIRFSA_ATTR_DOWNCONVERTER_CENTER_FREQUENCY
		''' NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_LEVEL
		''' NIRFSA_ATTR_TIMER_EVENT_INTERVAL
		''' NIRFSA_ATTR_FREQUENCY_SETTLING
		''' 
		'''</param>
		'''<param name = "setAsActiveList">
		''' setAsActiveList
		''' ViBoolean
		''' Sets the current list as the active configuration list when this parameter is set to TRUE. 
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function CreateConfigurationList(listName As String, numberOfListAttributes As Integer, listAttributeIDs As niRFSAProperties(), setAsActiveList As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.CreateConfigurationList(Me._handle, listName, numberOfListAttributes, listAttributeIDs, setAsActiveList)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Creates a new configuration list step in the configuration list for RF list mode specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST attribute. When you create a configuration list step, a new instance of each attribute specified by the configuration list is created. Configuration list attributes are specified when a configuration list is created.  
		''' Supported Devices: NI 5663E
		''' 
		''' </summary>
		'''<param name = "setAsActiveStep">
		''' setAsActiveStep
		''' ViBoolean
		''' Sets this step as the active step for the active configuration list. If you do not set this parameter, use the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attribute to set the active step.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function CreateConfigurationListStep(setAsActiveStep As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.CreateConfigurationListStep(Me._handle, setAsActiveStep)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Deletes a previously created configuration list and all the configuration list steps in the RF list mode configuration list. When a configuration list step is deleted, all the instances of the properties associated with the configuration list step are also removed.
		''' Supported Devices: NI 5663E
		''' 
		''' </summary>
		'''<param name = "listName">
		''' listName
		''' ViConstString
		''' Specifies the name of the configuration list. This string  may not contain spaces, special characters, or punctuation marks.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function DeleteConfigurationList(listName As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.DeleteConfigurationList(Me._handle, listName)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns user-defined information from the onboard EEPROM.
		''' Supported Devices: NI 5661/5663/5663E
		''' 
		''' </summary>
		'''<param name = "userdefinedinfo">
		''' info
		''' ViChar[]
		''' Returns the user-defined information stored in the device onboard EEPROM.
		''' 
		'''</param>
		'''<returns>
		''' Returns user-defined information from the onboard EEPROM.
		''' Supported Devices: NI 5661/5663/5663E
		''' 
		'''</returns>
		Public Function GetCalUserDefinedInfo(userdefinedinfo As StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetCalUserDefinedInfo(Me._handle, userdefinedinfo)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns user-defined information from the onboard EEPROM. The size of the cal user defined information is 21 characters.
		''' Supported Devices: NI 5661/5663/5663E
		''' 
		''' </summary>
		'''<param name = "infoSize">
		''' infoSize
		''' ViInt32* 
		''' Returns the number of characters of user-defined information that can be stored in the device onboard EEPROM.
		''' 
		'''</param>
		'''<returns>
		''' Returns user-defined information from the onboard EEPROM. The size of the cal user defined information is 21 characters.
		''' Supported Devices: NI 5661/5663/5663E
		''' 
		'''</returns>
		Public Function GetCalUserDefinedInfoMaxSize(ByRef infoSize As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetCalUserDefinedInfoMaxSize(Me._handle, infoSize)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the date and time of the last successful external calibration. The time returned is 24-hour local time; for example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter.
		''' Supported Devices: NI 5600/5601 and NI 5661/5663/5663E
		''' 
		''' </summary>
		'''<param name = "year">
		''' year
		''' ViInt32*
		''' Returns the year of the last external calibration. It is expressed as an integer.
		''' 
		'''</param>
		'''<param name = "month">
		''' month
		''' ViInt32*
		''' Returns the month of the last external calibration. It is expressed as an integer. For example, December is represented as 12.
		''' 
		'''</param>
		'''<param name = "day">
		''' day
		''' ViInt32*
		''' Returns the day of the last external calibration. It is expressed as an integer.
		''' 
		'''</param>
		'''<param name = "hour">
		''' hour
		''' ViInt32*
		''' Returns the year of the last external calibration. It is expressed as an integer.
		''' 
		'''</param>
		'''<param name = "minute">
		''' minute
		''' ViInt32*
		''' Returns the minute of the last external calibration. It is expressed as an integer.
		''' 
		'''</param>
		'''<returns>
		''' Returns the date and time of the last successful external calibration. The time returned is 24-hour local time; for example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter.
		''' Supported Devices: NI 5600/5601 and NI 5661/5663/5663E
		''' 
		'''</returns>
		Public Function GetExtCalLastDateAndTime(ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, ByRef minute As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetExtCalLastDateAndTime(Me._handle, year, month, day, hour, minute)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the temperature recorded at the last successful external calibration. The temperature is returned in degrees Celsius.
		''' Supported Devices: NI 5661/5663/5663E
		''' 
		''' </summary>
		'''<param name = "temperature">
		''' temperature
		''' ViReal64*
		''' Returns the temperature of the last external calibration. It is expressed in degrees Celsius.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function GetExtCalLastTemp(ByRef temperature As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetExtCalLastTemp(Me._handle, temperature)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the recommended interval between external calibrations in months.
		''' Supported Devices: NI 5600/5601 and NI 5661/5663/5663E
		''' 
		''' </summary>
		'''<param name = "months">
		''' months
		''' ViInt32*
		''' Specifies the recommended maximum interval between external calibrations in months.
		''' 
		'''</param>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function GetExtCalRecommendedInterval(ByRef months As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetExtCalRecommendedInterval(Me._handle, months)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns coefficients for the specified channel list that you can use to convert binary data to normalized and calibrated data.
		''' The raw data of an acquisition may not perfectly map to the digitizer vertical range. The difference is due to the digitizer's internal hardware settings being set so that NI-RFSA can handle issues such as range overflow. This function returns niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values that you can use normalize the data. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter.
		''' To get data that maps to the digitizer vertical range, normalize the raw data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element, then adding the offset value from the same element.
		''' Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
		''' After applying the gain and offset, the normalized data is such that:
		''' The maximum possible positive binary value maps to the maximum positive value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
		''' The maximum possible negative binary value maps to the maximum negative value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
		''' The value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. is divided evenly across the possible binary values.
		''' To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
		''' Supported Devices: NI 5663/5663E
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "bufferSize">
		''' bufferSize
		''' ViInt32
		''' Specifies the size of the array you specify for the coefficientInfo parameter.
		''' 
		'''</param>
		'''<param name = "coefficientInfo">
		''' coefficientInfo
		''' niRFSA_coefficientInfo[]
		''' Specifies the array for storing the coefficient info.
		''' offset is the number that should be added to the data from a peer-to-peer stream after the gain has been applied if you want to scale unscaled data.
		''' gain returns the multiplier that you should use to scale data obtained from a peer-to-peer stream.
		''' 
		'''</param>
		'''<param name = "numberofCoefficientSets">
		''' numberOfCoefficientSets
		''' ViInt32*
		''' Returns the number of valid coefficient sets. 
		''' 
		'''</param>
		'''<returns>
		''' Returns coefficients for the specified channel list that you can use to convert binary data to normalized and calibrated data.
		''' The raw data of an acquisition may not perfectly map to the digitizer vertical range. The difference is due to the digitizer's internal hardware settings being set so that NI-RFSA can handle issues such as range overflow. This function returns niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values that you can use normalize the data. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter.
		''' To get data that maps to the digitizer vertical range, normalize the raw data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element, then adding the offset value from the same element.
		''' Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
		''' After applying the gain and offset, the normalized data is such that:
		''' The maximum possible positive binary value maps to the maximum positive value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
		''' The maximum possible negative binary value maps to the maximum negative value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
		''' The value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. is divided evenly across the possible binary values.
		''' To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
		''' Supported Devices: NI 5663/5663E
		''' 
		'''</returns>
		Public Function GetNormalizationCoefficients(channelList As String, bufferSize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberofCoefficientSets As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetNormalizationCoefficients(Me._handle, channelList, bufferSize, coefficientInfo, numberofCoefficientSets)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns coefficients for the specified channel list that you can use to convert unscaled data to scaled I/Q data.
		''' Data from an acquisition may be unscaled if sent by a peer-to-peer stream or fetched as unscaled data. You can use this function to obtain niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values you can use scale this data into the actual I/Q values. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter. To get the actual I/Q values, scale the unscaled data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element then adding the offset from the same element.
		''' Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
		''' To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
		''' Supported Devices: NI 5663/5663E
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' channelList
		''' ViConstString
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "arraySize">
		''' arraySize
		''' ViInt32
		''' Specifies the size of the array you specify for the coefficientInfo parameter.
		''' 
		'''</param>
		'''<param name = "coefficientInfo">
		''' coefficientInfo
		''' niRFSA_coefficientInfo[]
		''' Specifies the array for storing the coefficient info.
		''' offset is the number that should be added to the data from a peer-to-peer stream after the gain has been applied if you want to scale unscaled data.
		''' gain returns the multiplier that you should use to scale data obtained from a peer-to-peer stream.
		''' 
		'''</param>
		'''<param name = "numberOfCoefficientSets">
		''' numberOfCoefficientSets
		''' ViInt32*
		''' Returns the number of valid coefficient sets. 
		''' 
		'''</param>
		'''<returns>
		''' Returns coefficients for the specified channel list that you can use to convert unscaled data to scaled I/Q data.
		''' Data from an acquisition may be unscaled if sent by a peer-to-peer stream or fetched as unscaled data. You can use this function to obtain niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values you can use scale this data into the actual I/Q values. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter. To get the actual I/Q values, scale the unscaled data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element then adding the offset from the same element.
		''' Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
		''' To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
		''' Supported Devices: NI 5663/5663E
		''' 
		'''</returns>
		Public Function GetScalingCoefficients(channelList As String, arraySize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberOfCoefficientSets As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetScalingCoefficients(Me._handle, channelList, arraySize, coefficientInfo, numberOfCoefficientSets)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns a writer endpoint handle that can be used with NI-P2P to configure a peer-to-peer stream with the digitizer as an endpoint.
		''' Supported Devices: NI 5663/5663E
		''' 
		''' </summary>
		'''<param name = "streamEndpoint">
		''' streamEndpoint
		''' ViConstString
		''' Specifies the name of the stream resources you want to use.
		''' 
		'''</param>
		'''<param name = "writerHandle">
		''' writerHandle
		''' ViUInt32*
		''' Returns the writer endpoint handle which will be used with NI-P2P API to create a stream with the digitizer as an endpoint.
		''' 
		'''</param>
		'''<returns>
		''' Returns a writer endpoint handle that can be used with NI-P2P to configure a peer-to-peer stream with the digitizer as an endpoint.
		''' Supported Devices: NI 5663/5663E
		''' 
		'''</returns>
		Public Function GetStreamEndpointHandle(streamEndpoint As String, ByRef writerHandle As UInteger) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetStreamEndpointHandle(Me._handle, streamEndpoint, writerHandle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Creates and initializes a special NI-RFSA external calibration session. The instrumentHandle returned is an NI-RFSA session that can be used to configure the device using normal attributes and functions. However, flags have been set that allow you to program an external calibration procedure using the special calibration attributes and functions.
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "resourceName">
		''' <table><tr><td>
		''' resourceName
		''' ViRsrc
		''' Specifies the resource name of the device to initialize.
		''' Example #
		''' Device Type
		''' Syntax
		''' 1
		''' myDAQmxDevice
		''' NI-DAQmx device, device name =
		'''                &#34;myDAQmxDevice&#34;
		''' 2
		''' myLogicalName
		''' IVI logical name, name =
		'''                   &#34;myLogicalName&#34;
		''' For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
		'''             Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
		'''             can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new
		'''             name. You also can pass in the name of an IVI logical name configured with the IVI
		'''             Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
		'''             Measurement &#38; Automation Explorer Help.
		''' Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
		''' </td>
		'''  </tr></table>
		''' 
		'''</param>
		'''<param name = "password">
		''' password
		''' ViConstString
		''' Specifies the password for opening a calibration session. The initial password is factory configured to "NI". password can be a maximum of ten alphanumeric characters.
		''' 
		'''</param>
		'''<param name = "optionstring">
		''' optionString
		''' ViConstString
		''' Sets the initial value of certain options for the session.
		''' The following options are used in this parameter.
		''' calAction:create&#08211;Use this option when starting a calibration step for the first time.
		''' calAction:append&#08211;Use this option when appending to existing calibration data.
		''' 
		'''</param>
		'''<param name = "instrumentHandle">
		''' vi
		''' ViSession
		''' Identifies your instrument session.
		''' 
		'''</param>
		'''<returns>
		''' Creates and initializes a special NI-RFSA external calibration session. The instrumentHandle returned is an NI-RFSA session that can be used to configure the device using normal attributes and functions. However, flags have been set that allow you to program an external calibration procedure using the special calibration attributes and functions.
		''' Supported Devices: NI 5601
		''' 
		'''</returns>
		Public Function InitExtCal(resourceName As String, password As String, optionstring As String, ByRef instrumentHandle As HandleRef) As Integer
			Dim handle As IntPtr
			Dim pInvokeResult As Integer = PInvoke.InitExtCal(resourceName, password, optionstring, handle)
			TestForError(pInvokeResult)
			instrumentHandle = New HandleRef(Me, handle)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Initializes an EEPROM-specific calibration step.
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "calibrationstep">
		''' calibrationStep
		''' ViInt32
		''' Specifies the EEPROM-specific calibration step to initialize.
		''' Defined Values:
		''' NIRFSA_VAL_EXT_CAL_IF_ATTENUATION_CALIBRATION
		''' Initializes the IF attenuation calibration step.
		''' NIRFSA_VAL_EXT_CAL_IF_RESPONSE_CALIBRATION
		''' Initializes the IF response calibration step.
		''' NIRFSA_VAL_EXT_CAL_REF_LEVEL_CALIBRATION
		''' Initializes the reference level calibration step.
		''' 
		'''</param>
		'''<returns>
		''' Initializes an EEPROM-specific calibration step.
		''' Supported Devices: NI 5601
		''' 
		'''</returns>
		Public Function InitializeCalibrationStep(calibrationstep As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.InitializeCalibrationStep(Me._handle, calibrationstep)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Performs a hard reset on the device which consists of the following actions:
		''' Signal acquisition is stopped
		''' All routes are released
		''' External bidirectional terminals are tristated
		''' FPGAs are reset
		''' Hardware is configured to its default state
		''' All session attributes are reset to their default states
		''' During a device reset, routes of signals between this and other devices are released, regardless of which device created the route.
		''' On the NI 5600, if you are using PXI_CLK10, you continue to drive the clock even after a device reset.
		''' Supported Devices: NI 5600/5601 (external digitizer mode), NI 5661/5663/5663E
		''' 
		''' </summary>
		'''<returns>	
		''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
		''' To obtain a text description of the status code and additional information about the error condition, call the niRFSA_GetError function. To clear the error information from NI-RFSA, call the niRFSA_ClearError function.	
		''' The general meaning of the status code is as follows:	
		''' Value           Meaning	
		''' 0               Success	
		''' Positive Values Warnings	
		''' Negative Values Errors	
		'''	
		''' </returns>
		Public Function ResetDevice() As Integer
			Dim pInvokeResult As Integer = PInvoke.ResetDevice(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' niRFSA_SetCalUserDefinedInfo
		''' ViStatus _VI_FUNC niRFSA_SetCalUserDefinedInfo(ViSession vi, 
		'''    ViConstString info);
		''' Purpose
		''' Stores user-defined information in the onboard EEPROM.
		''' Supported Devices: NI 5601
		''' 
		''' </summary>
		'''<param name = "userdefinedinfo">
		''' info
		''' ViConstString
		''' Specifies the string to store in the device onboard EEPROM. This string can be up to 21 characters long.
		''' 
		'''</param>
		'''<returns>
		''' niRFSA_SetCalUserDefinedInfo
		''' ViStatus _VI_FUNC niRFSA_SetCalUserDefinedInfo(ViSession vi, 
		'''    ViConstString info);
		''' Purpose
		''' Stores user-defined information in the onboard EEPROM.
		''' Supported Devices: NI 5601
		''' 
		'''</returns>
		Public Function SetCalUserDefinedInfo(userdefinedinfo As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetCalUserDefinedInfo(Me._handle, userdefinedinfo)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function


		''' <summary>
		''' Indicates which calibration steps contain valid calibration data. To omit the unnecessary self-calibration of steps with valid calibration data, you can pass the validSteps parameter to the stepsToOmit parameter of the niRFSA_SelfCalibrate function.
		''' Supported Devices: NI&#160;5661/5663/5663E/5665
		''' 
		''' </summary>
		'''<param name = "selfCalValid">
		''' Returns VI_TRUE if all the calibration data is valid and VI_FALSE if any of the calibration data is invalid.
		''' 
		'''</param>
		'''<param name = "validSteps">
		''' Returns valid steps.
		''' Note&#160;&#160;If two or more calibration steps are valid, this parameter returns a bitwise-OR combination of the calibration steps. For example, if both NIRFSA_VAL_SELF_CAL_IF_FLATNESS and NIRFSA_VAL_SELF_CAL_LO_SELF_CAL steps are valid, NI-RFSA returns the following string: NIRFSA_VAL_SELF_CAL_IF_FLATNESS | NIRFSA_VAL_SELF_CAL_LO_SELF_CAL    
		''' NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
		''' Indicates the Gain Reference calibration data is valid. This step measures the changes in gain since the last external calibration was run.
		'''  NIRFSA_VAL_SELF_CAL_IF_FLATNESS
		''' Indicates the IF Flatness calibration data is valid. This step measures the IF response of the entire system for each of the supported IF filters.
		'''  NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
		''' Indicates the Digitizer Self Cal calibration data is valid. This step calls for digitizer self-calibration if the digitizer is associated with the RF downconverter.
		'''   NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
		''' Indicates the LO Self Cal calibration data is valid. This step calls for LO self-calibration if the LO source module is associated with the RF downconverter.
		'''  NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
		''' Indicates the Preselector Alignment calibration data is valid. This step generates coefficients to align the preselector across the frequency range of 3.6 GHz to 14 GHz.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_IsSelfCalValid
		''' ViStatus niRFSA_IsSelfCalValid(ViSession vi, ViBoolean* selfCalValid, ViInt64* validSteps);
		''' Purpose
		''' Indicates which calibration steps contain valid calibration data. To omit the unnecessary self-calibration of steps with valid calibration data, you can pass the validSteps parameter to the stepsToOmit parameter of the niRFSA_SelfCalibrate function.
		''' Supported Devices: NI&#160;5661/5663/5663E/5665
		''' 
		'''</returns>
		Public Function IsSelfCalValid(ByRef selfCalValid As Boolean, ByRef validSteps As Long) As Integer
			Dim pInvokeResult As Integer = PInvoke.IsSelfCalValid(Handle, selfCalValid, validSteps)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function


		''' <summary>
		''' Initializes an EEPROM-specific external alignment step.
		''' Supported Devices: NI&#160;5605
		''' 
		''' </summary>
		'''<param name = "externalAlignmentStep">
		''' Specifies which external alignment step you want to initialize. 
		''' NIRFSA_VAL_PRESELECTOR_ALIGNMENT
		''' Initiates preselector alignment. This step generates coefficients to align the preselector across the frequency range of 3.6 GHz to 14 GHz.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_InitializeExternalAlignmentStep
		''' ViStatus niRFSA_InitializeExternalAlignmentStep(ViSession vi,
		'''    ViInt32 externalAlignmentStep);
		''' Purpose
		''' Initializes an EEPROM-specific external alignment step.
		''' Supported Devices: NI&#160;5605
		''' 
		'''</returns>
		Public Function InitializeExternalAlignmentStep(externalAlignmentStep As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.InitializeExternalAlignmentStep(Handle, externalAlignmentStep)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function


		''' <summary>
		''' Creates and initializes a special NI-RFSA external alignment session.
		'''  The ViSession returned is an NI-RFSA session that you can use to configure the device using normal attributes and functions. However, NI-RFSA sets flags that allow you to program an external alignment procedure using the external alignment attributes and functions.
		''' Supported Devices: NI&#160;5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "resourceName">
		''' Specifies the resource name of the device to initialize.
		''' Example #
		''' Device Type
		''' Syntax
		''' 1
		''' myDAQmxDevice
		''' NI-DAQmx device, device name =
		'''                &#34;myDAQmxDevice&#34;
		''' 2
		''' myLogicalName
		''' IVI logical name, name =
		'''                   &#34;myLogicalName&#34;
		''' For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
		'''             Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
		'''             can rename an NI-DAQmx device by right-clicking the name in MAX, selecting Rename from the drop-down menu, and entering a new name. You can also pass in the name of an IVI logical name configured with the IVI
		'''             Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
		'''             Measurement &#38; Automation Explorer Help.
		''' Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
		''' 
		'''</param>
		'''<param name = "optionstring">
		''' Sets the initial value of certain attributes for the session. The attributes shown in the following table are used in this parameter.
		''' Name
		''' Attribute
		''' RangeCheck
		''' NIRFSA_ATTR_RANGE_CHECK
		''' QueryInstrStatus
		''' NIRFSA_ATTR_QUERY_INSTRUMENT_STATUS
		''' Cache
		''' NIRFSA_ATTR_CACHE
		''' RecordCoercions
		''' NIRFSA_ATTR_RECORD_COERCIONS
		''' DriverSetup
		''' NIRFSA_ATTR_DRIVER_SETUP
		''' Simulate
		''' NIRFSA_ATTR_SIMULATE
		''' The format of this string is &#34;AttributeName=Value&#34;, where AttributeName is the name of the attribute and Value is the value to which the attribute will be set. To set multiple attributes, separate their assignments with a comma.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_InitializeExternalAlignment
		''' ViStatus niRFSA_InitializeExternalAlignment(ViRsrc resourceName, 
		'''    ViConstString optionString,
		'''    ViSession* vi);
		''' Purpose
		''' Creates and initializes a special NI-RFSA external alignment session.
		'''  The ViSession returned is an NI-RFSA session that you can use to configure the device using normal attributes and functions. However, NI-RFSA sets flags that allow you to program an external alignment procedure using the external alignment attributes and functions.
		''' Supported Devices: NI&#160;5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function InitializeExternalAlignment(resourceName As String, optionstring As String, ByRef instrumentHandle As HandleRef) As Integer
			Dim pInvokeResult As Integer = PInvoke.InitializeExternalAlignment(resourceName, optionstring, instrumentHandle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the temperature, in degrees Celsius, at the last successful self-calibration.
		''' Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "selfCalibrationStep">
		''' Specifies the self-calibration step to query for the last successful self-calibration temperature data.
		''' NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
		''' Selects the Preselector Alignment self-calibration step.
		''' NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
		''' Selects the Gain Reference self-calibration step.
		'''  NIRFSA_VAL_SELF_CAL_IF_FLATNESS
		''' Selects the IF Flatness self-calibration step.
		'''  NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
		''' Selects the Digitizer Self Cal self-calibration step.
		'''   NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
		''' Selects the LO Self Cal self-calibration step.
		''' 
		'''</param>
		'''<param name = "temperature">
		''' The temperature, in degrees Celsius, of the last self-calibration.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetSelfCalLastTemp
		''' ViStatus niRFSA_GetSelfCalLastTemp(ViSession vi,
		'''    ViInt64 selfCalibrationStep,
		'''    ViReal64* temp);
		''' Purpose
		''' Returns the temperature, in degrees Celsius, at the last successful self-calibration.
		''' Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function GetSelfCalLastTemp(selfCalibrationStep As Long, ByRef temperature As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetSelfCalLastTemp(Handle, selfCalibrationStep, temperature)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the date and time of the last successful self-calibration.
		''' The time returned is 24-hour local time and the date is returned as integer values. For example, if the device was calibrated at 2:30 PM on December 31, 2010, this function returns 14 for the hour parameter, 30 for the minute parameter, 12 for the month parameter, 31 for the day parameter, and 2010 for the year parameter.
		''' Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "selfCalibrationStep">
		''' Specifies the self-calibration step to query for the last successful self-calibration date and time data.
		''' NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
		''' Selects the Gain Reference self-calibration step.
		'''  NIRFSA_VAL_SELF_CAL_IF_FLATNESS
		''' Selects the IF Flatness self-calibration step.
		'''  NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
		''' Selects the Digitizer Self Cal self-calibration step.
		'''   NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
		''' Selects the LO Self Cal self-calibration step.
		''' NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
		''' Selects the Preselector Alignment self-calibration step.
		''' 
		'''</param>
		'''<param name = "year">
		''' Returns the year of the last external calibration. 
		''' 
		'''</param>
		'''<param name = "month">
		''' Returns the month of the last external calibration. 
		''' 
		'''</param>
		'''<param name = "day">
		''' Returns the day of the last external calibration. 
		''' 
		'''</param>
		'''<param name = "hour">
		''' Returns the year of the last external calibration. It is expressed as an integer.
		''' 
		'''</param>
		'''<param name = "minute">
		''' Returns the minute of the last external calibration. 
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetSelfCalLastDateAndTime
		''' ViStatus  niRFSA_GetSelfCalLastDateAndTime(ViSession vi, ViInt64 selfCalibrationStep,
		'''    ViInt32* year, 
		'''    ViInt32* month, 
		'''    ViInt32* day, 
		'''    ViInt32* hour, 
		'''    ViInt32* minute);
		''' Purpose
		''' Returns the date and time of the last successful self-calibration.
		''' The time returned is 24-hour local time and the date is returned as integer values. For example, if the device was calibrated at 2:30 PM on December 31, 2010, this function returns 14 for the hour parameter, 30 for the minute parameter, 12 for the month parameter, 31 for the day parameter, and 2010 for the year parameter.
		''' Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function GetSelfCalLastDateAndTime(selfCalibrationStep As Long, ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, ByRef minute As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetSelfCalLastDateAndTime(Handle, selfCalibrationStep, year, month, day, hour, _
				minute)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns an array consisting of all the relay counts for your device. When you call this function and pass a VI_NULL pointer to the operationsCount parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the number of relays, the operationsCount parameter returns the appropriate value.
		''' Supported Devices: NI&#160;5603/5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "operationsCountArray">
		''' Specifies the operations count array, when used as an input. You can select VI_NULL or a pointer to a ViInt32 array. VI_NULL is the default. 
		'''   When bufferSize is greater than or equal to the number of relays, operationsCount returns the number of relay operations.
		''' 
		'''</param>
		'''<param name = "bufferSize">
		''' Functions as an input or an output. bufferSize receives or returns the number of relays that are on the device.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetRelayOperationsCount
		''' ViStatus niRFSA_GetRelayOperationsCount(ViSession vi,
		'''    ViConstString channelList,
		'''    ViInt32 operationsCount[],
		'''    ViInt32* bufferSize);
		''' Purpose
		''' Returns an array consisting of all the relay counts for your device. When you call this function and pass a VI_NULL pointer to the operationsCount parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the number of relays, the operationsCount parameter returns the appropriate value.
		''' Supported Devices: NI&#160;5603/5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function GetRelayOperationsCount(channelList As String, operationsCountArray As Integer(), ByRef bufferSize As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetRelayOperationsCount(Handle, channelList, operationsCountArray, bufferSize)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function


		''' <summary>
		''' Returns the name of a relay for your device. When you call this function and pass a VI_NULL pointer to the name parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the name of relay, the name parameter returns the appropriate value.
		''' Supported Devices: NI&#160;5603/5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "indexofRelay">
		''' Specifies the index of the relay. 
		''' 
		'''</param>
		'''<param name = "name">
		''' Specifies the relay name, when used as an input. You can select VI_NULL or a pointer to a ViInt32 array. VI_NULL is the default.  When bufferSize is greater than or equal to the number of relays, name returns the relay name.
		''' 
		'''</param>
		'''<param name = "bufferSize">
		''' When a VI_NULL pointer is passed in for the name, bufferSize is populated with the number of relays on the device. When bufferSize equals the size of the name, the relay is identified in the name parameter.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetRelayName
		''' ViStatus niRFSA_GetRelayName(ViSession vi,
		'''    ViConstString channelList,
		'''    ViInt32 index,
		'''    ViChar name[],
		'''    ViInt32* bufferSize);
		''' Purpose
		''' Returns the name of a relay for your device. When you call this function and pass a VI_NULL pointer to the name parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the name of relay, the name parameter returns the appropriate value.
		''' Supported Devices: NI&#160;5603/5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function GetRelayName(channelList As String, indexofRelay As Integer, name As StringBuilder, ByRef bufferSize As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetRelayName(Handle, channelList, indexofRelay, name, bufferSize)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the gain reference calibration constants. 
		''' Supported Devices: NI&#160;5603/5605 (external digitizer mode), NI 5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "bufferSize">
		''' Specifies the buffer size.
		''' 
		'''</param>
		'''<param name = "gainReferenceCalConstants">
		''' Returns the gain reference calibration constants. 
		''' 
		'''</param>
		'''<param name = "numberofRefCalConstants">
		''' Specifies the number of elements in the gainReferenceCalConstants array.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetGainReferenceCalBaseline
		''' ViStatus niRFSA_GetGainReferenceCalBaseline(ViSession vi, ViInt32 bufferSize, ViReal64 gainReferenceCalConstants[], ViInt32* numberOfRefCalConstants);
		''' Purpose
		''' Returns the gain reference calibration constants. 
		''' Supported Devices: NI&#160;5603/5605 (external digitizer mode), NI 5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function GetGainReferenceCalBaseline(bufferSize As Integer, gainReferenceCalConstants As Double(), ByRef numberofRefCalConstants As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetGainReferenceCalBaseline(Handle, bufferSize, gainReferenceCalConstants, numberofRefCalConstants)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the requested response type, based on current NI-RFSA settings. The NI&#160;5661/5663/5663E/5665 automatically corrects for the IF and RF response when you set the NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED attribute to VI_TRUE. If you are using external digitizer mode, you can use information returned from this function to correct your measurement.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "responseType">
		''' Specifies the IF, RF, or combined (IF and RF) response of the downconverter or RF vector signal analyzer (VSA) that NI-RFSA returns. The default value is NIRFSA_VAL_DOWNCONVERTER_IF_RESPONSE.
		'''  NIRFSA_VAL_DOWNCONVERTER_IF_RESPONSE
		''' Returns the IF response of the downconverter.
		''' NIRFSA_VAL_DOWNCONVERTER_RF_RESPONSE
		''' Returns the RF response of the downconverter. This value is supported only for the NI&#160;5603/5605/5665.
		''' NIRFSA_VAL_DOWNCONVERTER_COMBINED_RESPONSE
		''' Returns the combined RF and IF response of the downconverter. The combined response is in terms of IF frequency. This value is supported only for the NI&#160;5603/5605/5665.
		''' NIRFSA_VAL_VSA_IF_RESPONSE
		''' Returns the IF response of the entire RF vector signal analyzer. This value is supported only for the NI&#160;5665.
		''' NIRFSA_VAL_VSA_COMBINED_RESPONSE
		''' Returns the combined IF and RF response of the entire RF vector signal analyzer. The combined response is in terms of IF frequency. This value is supported only for the NI&#160;5665.
		''' 
		'''</param>
		'''<param name = "bufferSize">
		''' Specifies the size of the array you specify for the frequencies, magnitudeResponse, and phaseResponse parameters.
		''' 
		'''</param>
		'''<param name = "frequencies">
		''' Returns an array containing the frequencies, in hertz (Hz), that correspond to the response data.
		''' Pass VI_NULL if you do not want to use this parameter.
		''' 
		'''</param>
		'''<param name = "magnitudeResponse">
		''' Returns an array containing the magnitude of the requested response, in decibels (dB). The magnitude response is normalized to the center frequency at each frequency in the frequencies array.
		''' Pass VI_NULL if you do not want to use this parameter.
		''' 
		'''</param>
		'''<param name = "phaseResponse">
		''' Returns an array containing the phase of the requested response, in radians. The phase response is normalized to the center frequency at each frequency entry in the frequencies array.
		''' Pass VI_NULL if you do not want to use this parameter.
		''' 
		'''</param>
		'''<param name = "numberofFrequencies">
		''' Returns the required number of elements in the frequencies array and the response arrays. If bufferSize is 0, this parameter returns the expected array size. The expected array size depends on which NI-RFSA device you use (NI&#160;5661/5663/5663E/5665) and on the current settings (NI&#160;5663/5663E/5665 only).
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetDeviceResponse
		''' ViStatus niRFSA_GetDeviceResponse(ViSession vi,
		'''    ViConstString channelList,
		'''    ViInt32 bufferSize,
		'''    ViInt32 responseType,
		'''    ViReal64 frequencies[],
		'''    ViReal64 magnitudeResponse[],
		'''    ViReal64 phaseResponse[],
		'''    ViInt32* numberOfFrequencies);
		''' Purpose
		''' Returns the requested response type, based on current NI-RFSA settings. The NI&#160;5661/5663/5663E/5665 automatically corrects for the IF and RF response when you set the NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED attribute to VI_TRUE. If you are using external digitizer mode, you can use information returned from this function to correct your measurement.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function GetDeviceResponse(channelList As String, responseType As Integer, bufferSize As Integer, frequencies As Double(), magnitudeResponse As Double(), phaseResponse As Double(), _
			ByRef numberofFrequencies As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetDeviceResponse(Handle, channelList, responseType, bufferSize, frequencies, magnitudeResponse, _
				phaseResponse, numberofFrequencies)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function


		''' <summary>
		''' 
		''' Enables or disables SFP session access for the specified instrument.
		''' SFP session access allows the NI-RFSA Soft Front Panel (SFP) to access a device with an existing open session and can help you debug your code. To enable session access, pass VI_TRUE to the enabled parameter. To disable session access, pass VI_FALSE to the enabled parameter.
		''' Refer to Configuring SFP Session Access in LabWindows/CVI or C for more information about SFP session access.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
		''' 
		''' </summary>
		'''<param name = "enable">
		''' Enables or disables SFP session access for the specified device.
		''' VI_TRUEEnables session access.
		''' VI_FALSEDisables session access.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_EnableSessionAccess
		''' ViStatus niRFSA_EnableSessionAccess(ViSession vi,
		'''    ViBoolean enable);
		''' Purpose
		''' Enables or disables SFP session access for the specified instrument.
		''' SFP session access allows the NI-RFSA Soft Front Panel (SFP) to access a device with an existing open session and can help you debug your code. To enable session access, pass VI_TRUE to the enabled parameter. To disable session access, pass VI_FALSE to the enabled parameter.
		''' Refer to Configuring SFP Session Access in LabWindows/CVI or C for more information about SFP session access.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
		''' 
		'''</returns>
		Public Function EnableSessionAccess(channelList As String, enable As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.EnableSessionAccess(Handle, channelList, enable)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function
		''' <summary>
		''' Stores the preselector alignment coefficients that NI-RFSA uses to compute the preselector-tuning DAC value whenever the preselector is enabled. These coefficients are based on the desired center frequency for the preselector. 
		''' Supported Devices: NI 5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "numberOfCoefficients">
		''' Specifies the length for the coefficients array.
		''' 
		'''</param>
		'''<param name = "coefficients">
		''' Specifies the coefficients in the polynomial used to map the preselector center frequency to a preselector-tuning DAC value. Enter the coefficients in the array in order of highest order coefficient first (index 0) down to lowest order coefficient last. 
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_ExternalAlignmentAdjustPreselector
		''' ViStatus  niRFSA_ExternalAlignmentAdjustPreselector(ViSession vi,
		'''    ViInt32 numberOfCoefficients,
		'''    ViReal64* coefficients);
		''' Purpose
		''' Stores the preselector alignment coefficients that NI-RFSA uses to compute the preselector-tuning DAC value whenever the preselector is enabled. These coefficients are based on the desired center frequency for the preselector. 
		''' Supported Devices: NI 5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function ExternalAlignmentAdjustPreselector(numberOfCoefficients As Integer, coefficients As Double()) As Integer
			Dim pInvokeResult As Integer = PInvoke.ExternalAlignmentAdjustPreselector(Handle, numberOfCoefficients, coefficients)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Specifies the external calibration step to run and stores the associated constants in the device memory so that they can be compared with the computed constants at run time. A password is required to run the function.
		''' Supported Devices: NI&#160;5603/5605/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "password">
		''' Specifies the password for the calibration session. The initial password is factory configured to NI. password can be a maximum of ten alphanumeric characters.
		''' 
		'''</param>
		'''<param name = "stepToRun">
		''' Specifies the step for which constants are computed. 
		''' NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
		''' Calls for preselector alignment.
		''' NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
		''' Measures the changes in gain since the last external calibration was run.
		'''  NIRFSA_VAL_SELF_CAL_IF_FLATNESS
		''' Measures the IF response of the entire system for each of the supported IF filters.
		'''  NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
		''' Calls for digitizer self-calibration, if the digitizer is associated with the RF downconverter.
		'''   NIRFSA_VAL_SELF_CAL_LO_SELF_CALL
		''' Calls for LO self-calibration, if the LO source module is associated with the RF downconverter.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_ExtCalStoreBaselineForSelfCalibration
		''' ViStatus niRFSA_ExtCalStoreBaselineForSelfCalibration(ViSession vi, ViConstString password, ViReal64 stepToRun);
		''' Purpose
		''' Specifies the external calibration step to run and stores the associated constants in the device memory so that they can be compared with the computed constants at run time. A password is required to run the function.
		''' Supported Devices: NI&#160;5603/5605/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function ExtCalStoreBaselineForSelfCalibration(password As String, stepToRun As Long) As Integer
			Dim pInvokeResult As Integer = PInvoke.ExtCalStoreBaselineForSelfCalibration(Handle, password, stepToRun)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Closes an EEPROM-specific external alignment step.
		''' Supported Devices: NI&#160;5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<returns>
		''' 
		'''niRFSA_CloseExternalAlignmentStep
		''' ViStatus  niRFSA_CloseExternalAlignmentStep(ViSession vi);
		''' Purpose
		''' Closes an EEPROM-specific external alignment step.
		''' Supported Devices: NI&#160;5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		Public Function CloseExternalAlignmentStep() As Integer
			Dim pInvokeResult As Integer = PInvoke.CloseExternalAlignmentStep(Handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
		''' This function internally queries the attributes you set, and you must set and commit the following attributes prior to calling this function.
		''' NIRFSA_ATTR_CAL_RF_ELECTRONIC_ATTENUATION_INDEX (This attribute is required only when the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute is set to NIRFSA_VAL_EXT_CAL_RF_BAND_1.)
		''' NIRFSA_ATTR_CAL_RF_MECHANICAL_ATTENUATION_INDEX
		''' NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION
		''' NIRFSA_ATTR_CAL_IF_ATTENUATION_INDEX
		''' NIRFSA_ATTR_CAL_IF_FILTER_SELECTION
		''' NIRFSA_ATTR_CHANNEL_COUPLING
		''' NIRFSA_ATTR_RF_PREAMP_ENABLED
		''' Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
		''' Supported Devices: NI&#160;5603/5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "frequency">
		''' Specifies the RF frequency, in Hz, of the measurement taken.
		''' 
		'''</param>
		'''<param name = "gain">
		''' Specifies the gain measurement, in dB.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_CalAdjustDownconverterGain
		''' ViStatus  niRFSA_CalAdjustDownconverterGain(ViSession vi,
		'''    ViConstString channelList,
		'''    ViReal64 frequency,
		'''    ViReal64 gain);
		''' Purpose
		''' Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
		''' This function internally queries the attributes you set, and you must set and commit the following attributes prior to calling this function.
		''' NIRFSA_ATTR_CAL_RF_ELECTRONIC_ATTENUATION_INDEX (This attribute is required only when the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute is set to NIRFSA_VAL_EXT_CAL_RF_BAND_1.)
		''' NIRFSA_ATTR_CAL_RF_MECHANICAL_ATTENUATION_INDEX
		''' NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION
		''' NIRFSA_ATTR_CAL_IF_ATTENUATION_INDEX
		''' NIRFSA_ATTR_CAL_IF_FILTER_SELECTION
		''' NIRFSA_ATTR_CHANNEL_COUPLING
		''' NIRFSA_ATTR_RF_PREAMP_ENABLED
		''' Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
		''' Supported Devices: NI&#160;5603/5605
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("Use CalAdjustDeviceGain instead")> _
		Public Function CalAdjustDownconverterGain(channelList As String, frequency As Double, gain As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.CalAdjustDownconverterGain(Handle, channelList, frequency, gain)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Self-calibrates the modules associated with the NI RF vector signal analyzer that support self-calibration. If self-calibration is performed successfully, the new calibration constants are stored immediately in the self-calibration area of the module EEPROM. Refer to the specifications document for your device for more information about how often to self-calibrate. 
		''' For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if the niRFSA_IsSelfCalValid function indicates that the calibration data for a specific step is still valid, you can omit that step for faster execution. 
		''' Note&#160;&#160;The IF Flatness step can take approximately 15 minutes to complete on the NI&#160;5603 and approximately 25 minutes to complete on the NI&#160;5605.
		''' Supported Devices: NI&#160;5661/5663/5663E/5665
		''' 
		''' </summary>
		'''<param name = "stepsToOmit">
		''' Specifies which calibration steps to skip as part of the self-calibration process. A value of 0 specifies that no calibration steps are omitted.
		''' Note&#160;&#160;To omit two or more calibration steps, specify a bitwise-OR combination of the following constants. For example, if you wanted to omit NIRFSA_VAL_SELF_CAL_IF_FLATNESS and NIRFSA_VAL_SELF_CAL_LO_SELF_CAL, you would pass the following string to the niRFSA_SelfCalibrate function: NIRFSA_VAL_SELF_CAL_IF_FLATNESS | NIRFSA_VAL_SELF_CAL_LO_SELF_CAL   
		''' NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
		''' Omits the Gain Reference step. If you omit this step and the  niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the absolute accuracy of the device is not guaranteed.
		'''  NIRFSA_VAL_SELF_CAL_IF_FLATNESS
		''' Omits the IF Flatness step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the IF flatness specifications are not guaranteed.
		'''  NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
		''' Omits the Digitizer Self Cal step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the absolute accuracy of the device is not guaranteed.
		'''   NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
		''' Omits the LO Self Cal step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the LO PLL may fail to lock.
		''' NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
		''' Omits the Preselector Alignment step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the preselector alignment specifications are not guaranteed. 
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SelfCalibrate
		''' ViStatus niRFSA_SelfCalibrate(ViSession vi, 
		'''    ViInt64 stepsToOmit);
		''' Purpose
		''' Self-calibrates the modules associated with the NI RF vector signal analyzer that support self-calibration. If self-calibration is performed successfully, the new calibration constants are stored immediately in the self-calibration area of the module EEPROM. Refer to the specifications document for your device for more information about how often to self-calibrate. 
		''' For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if the niRFSA_IsSelfCalValid function indicates that the calibration data for a specific step is still valid, you can omit that step for faster execution. 
		''' Note&#160;&#160;The IF Flatness step can take approximately 15 minutes to complete on the NI&#160;5603 and approximately 25 minutes to complete on the NI&#160;5605.
		''' Supported Devices: NI&#160;5661/5663/5663E/5665
		''' 
		'''</returns>
		Public Function SelfCalibrate(stepsToOmit As Long) As Integer
			Dim pInvokeResult As Integer = PInvoke.SelfCalibrate(Handle, stepsToOmit)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Returns the fully qualified name of the signal being queried. Signals can be triggers, clocks, or events.
		''' You can pass the terminalName parameter that is returned to the source parameter of a configure trigger function.
		''' Supported Devices: NI&#160;5663/5663E/5665
		''' 
		''' </summary>
		'''<param name = "signal">
		''' Specifies the signal for which you want to query the terminal.
		''' NIRFSA_VAL_START_TRIGGER (1100)NI-RFSA returns the terminal name for the Start trigger.
		''' NIRFSA_VAL_REF_TRIGGER (702)NI-RFSA returns the terminal name for the Reference trigger.
		''' NIRFSA_VAL_ADVANCE_TRIGGER (1102)NI-RFSA returns the terminal name for the Advance trigger.
		''' NIRFSA_VAL_READY_FOR_START_EVENT (1200)NI-RFSA returns the terminal name for the Ready for Start event.
		''' NIRFSA_VAL_READY_FOR_ADVANCE_EVENT (1202)NI-RFSA returns the terminal name for the Ready for Advance event.
		''' NIRFSA_VAL_READY_FOR_REF_EVENT (1201)NI-RFSA returns the terminal name for the Ready for Reference event.
		''' NIRFSA_VAL_END_OF_RECORD_EVENT (1203)NI-RFSA returns the terminal name for the End of Record event.
		''' NIRFSA_VAL_DONE_EVENT (1204)NI-RFSA returns the terminal name for the Done event.
		''' NIRFSA_VAL_REF_CLOCK (1205)NI-RFSA does not support this option for the niRFSA_GetTerminalName function. 
		''' 
		'''</param>
		'''<param name = "signalIdentifier">
		''' Specifies a particular instance of a trigger. NI-RFSA does not support this parameter.
		''' 
		'''</param>
		'''<param name = "bufferSize">
		''' Passes the number of bytes in the ViChar buffer that you allocate for the terminalName parameter.
		''' If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the buffer.
		''' 
		'''</param>
		'''<param name = "terminalName">
		''' Returns the fully qualified name of the signal being queried. For example, if you select NIRFSA_VAL_START_TRIGGER 
		'''  as the signal, this parameter returns /DigitizerName/StartTrigger, where DigitizerName is the name of your associated digitizer module in MAX.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetTerminalName
		''' ViStatus niRFSA_GetTerminalName(ViSession vi, 
		'''    ViInt32 signal, 
		'''    ViConstString signalIdentifier, 
		'''    ViInt32 bufferSize,
		'''    ViChar terminalName[]);
		''' Purpose
		''' Returns the fully qualified name of the signal being queried. Signals can be triggers, clocks, or events.
		''' You can pass the terminalName parameter that is returned to the source parameter of a configure trigger function.
		''' Supported Devices: NI&#160;5663/5663E/5665
		''' 
		'''</returns>
		Public Function GetTerminalName(signal As Integer, signalIdentifier As String, bufferSize As Integer, terminalName As StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetTerminalName(Handle, signal, signalIdentifier, bufferSize, terminalName)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' LO export calibration measures the NI&#160;5603/5605 LO output power level.
		'''  The LO output power measurements are taken from the NI&#160;5653 module. In MIMO applications, when the LO is exported from one NI&#160;5603/5605 module to another subsequent NI&#160;5603/5605, an output power signal of approximately +7 dBm is expected on each LO connector (LO1, LO2, and LO3). This function records the LO attenuation that results in an output power of +7 dBm (or greater) on the three LO output terminals.
		''' The NI 5665 uses three LOs, but only LO1 is variable in frequency. This VI takes an array of frequencies and attenuations; however, for LO2 and LO3, this array must have only one element because these two LO sources operate only at one frequency. LO1 can have multiple values for specific frequencies.
		''' Supported Devices: NI&#160;5603/5605
		''' 
		''' </summary>
		'''<param name = "channelList">
		''' Identifies which channels to apply settings. Specify 0 as the value of this parameter.
		''' 
		'''</param>
		'''<param name = "lONumber">
		''' Specifies the LO source to use for the LO export calibration.
		''' NIRFSA_VAL_EXT_CAL_LO1 &#160;&#160;&#160; (2200)
		''' Selects LO1, which is the 3.2&#160;GHz to 8.3&#160;GHz variable signal path.
		''' NIRFSA_VAL_EXT_CAL_LO2 &#160;&#160;&#160; (2201)
		''' Selects LO2, which is the 4&#160;GHz signal path.
		''' NIRFSA_VAL_EXT_CAL_LO3 &#160;&#160;&#160; (2202)
		''' Selects LO3, which is the 800&#160;MHz signal path.
		''' 
		'''</param>
		'''<param name = "numberOfFrequencyPoints">
		''' Specifies the length of the frequencies and LOAttenuation arrays.
		''' 
		'''</param>
		'''<param name = "frequencies">
		''' Specifies frequencies for the LO output power measurement.  The length of this array equals the numberOfFrequencyPoints parameter.
		''' 
		'''</param>
		'''<param name = "lOAttenuations">
		''' Specifies the attenuation value of the corresponding frequency point that results in a +7 dBm output signal on the respective LO OUT connector. The length of this array equals the numberOfFrequencyPoints parameter.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_CalAdjustLOExportCalibration
		''' ViStatus  niRFSA_CalAdjustLOExportCalibration(ViSession vi, 
		'''    ViConstString channelList, 
		'''    ViInt32 LONumber, 
		'''    ViInt32 numberOfFrequencyPoints, 
		'''    ViReal64* frequencyPoints, 
		'''    ViReal64* LOAttenuation);
		''' Purpose
		''' LO export calibration measures the NI&#160;5603/5605 LO output power level.
		'''  The LO output power measurements are taken from the NI&#160;5653 module. In MIMO applications, when the LO is exported from one NI&#160;5603/5605 module to another subsequent NI&#160;5603/5605, an output power signal of approximately +7 dBm is expected on each LO connector (LO1, LO2, and LO3). This function records the LO attenuation that results in an output power of +7 dBm (or greater) on the three LO output terminals.
		''' The NI 5665 uses three LOs, but only LO1 is variable in frequency. This VI takes an array of frequencies and attenuations; however, for LO2 and LO3, this array must have only one element because these two LO sources operate only at one frequency. LO1 can have multiple values for specific frequencies.
		''' Supported Devices: NI&#160;5603/5605
		''' 
		'''</returns>
		Public Function CalAdjustLOExportCalibration(channelList As String, LONumber As Integer, numberOfFrequencyPoints As Integer, frequencies As Double(), LOAttenuations As Double()) As Integer
			Dim pInvokeResult As Integer = PInvoke.CalAdjustLOExportCalibration(Handle, channelList, LONumber, numberOfFrequencyPoints, frequencies, LOAttenuations)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Clears the error information associated with the session. 
		''' Supported Devices: NI&#160;5600/5661/5663/5663E/5665
		''' 
		''' </summary>
		'''<returns>
		''' 
		'''niRFSA_ClearError
		''' ViStatus niRFSA_ClearError(ViSession vi);
		''' Purpose
		''' Clears the error information associated with the session. 
		''' Supported Devices: NI&#160;5600/5661/5663/5663E/5665
		''' 
		'''</returns>
		Public Function ClearError() As Integer
			Dim pInvokeResult As Integer = PInvoke.ClearError(Handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Obtains a multithread lock on the instrument session. Before doing so, this function waits until all other execution threads have released their locks on the instrument session.
		''' Other threads might have obtained a lock on this session in the following ways:
		'''   - Your application already called this function.
		'''   - A call to NI-RFSA locked the session.
		'''
		''' After the call to this function returns successfully, no other threads can access the instrument session until you call the niRFSA_UnlockSession function. Use the niRFSA_LockSession function and the niRFSA_UnlockSession function around a sequence of calls to NI-RFSA functions if you require that the NI-RFSA device retain its settings through the end of the sequence.
		''' You can safely make nested calls to the niRFSA_LockSession function within the same thread. To completely unlock the session, balance each call to the niRFSA_LockSession function with a call to the niRFSA_UnlockSession function.  
		''' If, however, you use callerHasLock in all calls to the niRFSA_LockSession function and the niRFSA_UnlockSession function within a function, the IVI Library locks the session only once within the function regardless of the number of calls you make to the niRFSA_LockSession function. 
		''' Locking the session only once allows you to call the niRFSA_UnlockSession function just once at the end of the function.
		''' Supported Devices: NI&#160;5600/5661/5663/5663E/5665
		''' 
		'''</summary>
		'''<param name = "callerHasLock">
		''' Keeps track of whether you obtain a lock and therefore need to unlock the session in complex functions.   
		''' Pass a reference to a local boolean variable.  In the declaration of the local variable, initialize it to false. Pass the address of the same local variable to any other calls you make to this function or the niRFSA_UnlockSession function in the same function
		''' The niRFSA_LockSession function and the niRFSA_UnlockSession function each inspect the current value and take the following actions:
		''' niRFSA_LockSession
		'''   - true:     The niRFSA_LockSession function does not lock the session again.
		'''   - false:    The niRFSA_LockSession function obtains the lock and sets the value of the parameter to true.
		''' niRFSA_UnlockSession
		'''   - true:     The niRFSA_UnlockSession function releases the lock and sets the value of the parameter to false.
		'''   - false:    The niRFSA_UnlockSession function does not attempt to unlock the session
		'''
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_LockSession
		''' ViStatus niRFSA_LockSession(ViSession vi,
		'''    ViBoolean *callerHasLock);
		''' Purpose
		''' Obtains a multithread lock on the instrument session. Before doing so, this function waits until all other execution threads have released their locks on the instrument session.
		''' Other threads might have obtained a lock on this session in the following ways:
		'''   - Your application already called this function.
		'''   - A call to NI-RFSA locked the session.
		'''
		''' After the call to this function returns successfully, no other threads can access the instrument session until you call the niRFSA_UnlockSession function. Use the niRFSA_LockSession function and the niRFSA_UnlockSession function around a sequence of calls to NI-RFSA functions if you require that the NI-RFSA device retain its settings through the end of the sequence.
		''' You can safely make nested calls to the niRFSA_LockSession function within the same thread. To completely unlock the session, balance each call to the niRFSA_LockSession function with a call to the niRFSA_UnlockSession function.  
		''' If, however, you use callerHasLock in all calls to the niRFSA_LockSession function and the niRFSA_UnlockSession function within a function, the IVI Library locks the session only once within the function regardless of the number of calls you make to the niRFSA_LockSession function. 
		''' Locking the session only once allows you to call the niRFSA_UnlockSession function just once at the end of the function.
		''' Supported Devices: NI&#160;5600/5661/5663/5663E/5665
		'''
		'''</returns>
		Public Function LockSession(ByRef callerHasLock As Boolean) As Integer
			Dim callerHasLockAsUShort As UShort = System.Convert.ToUInt16(callerHasLock)
			Dim pInvokeResult As Integer = PInvoke.LockSession(Handle, callerHasLockAsUShort)
			callerHasLock = System.Convert.ToBoolean(callerHasLockAsUShort)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Releases a lock obtained on an NI-RFSA device session by calling the niRFSA_LockSession function.
		'''
		''' Supported Devices: NI&#160;5600/5661/5663/5663E/5665
		''' 
		'''</summary>
		'''<param name = "callerHasLock">
		''' Reference to a local boolean variable previously initialized by a call to the niRFSA_LockSession function
		''' The niRFSA_LockSession function and the niRFSA_UnlockSession function each inspect the current value and take the following actions:
		''' niRFSA_LockSession
		'''   - true:     The niRFSA_LockSession function does not lock the session again.
		'''   - false:    The niRFSA_LockSession function obtains the lock and sets the value of the parameter to true.
		''' niRFSA_UnlockSession
		'''   - true:     The niRFSA_UnlockSession function releases the lock and sets the value of the parameter to false.
		'''   - false:    The niRFSA_UnlockSession function does not attempt to unlock the session
		'''
		''' Thus, you can call the niRFSA_UnlockSession function at the end of your function regardless of whether you actually have the lock.
		'''
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_UnlockSession
		''' ViStatus niRFSA_UnlockSession(ViSession vi,
		'''    ViBoolean *callerHasLock);
		''' Purpose
		''' Releases a lock obtained on an NI-RFSA device session by calling the niRFSA_LockSession function.
		'''
		''' Supported Devices: NI&#160;5600/5661/5663/5663E/5665
		'''
		'''</returns>
		Public Function UnlockSession(ByRef callerHasLock As Boolean) As Integer
			Dim callerHasLockAsUShort As UShort = System.Convert.ToUInt16(callerHasLock)
			Dim pInvokeResult As Integer = PInvoke.UnlockSession(Handle, callerHasLockAsUShort)
			callerHasLock = System.Convert.ToBoolean(callerHasLockAsUShort)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

        ' Added in 15.0

        ''' <summary>
        ''' Resets all properties to default values and specifies steps to omit during the reset process, such as signal routes.
        ''' For the NI 5600, this function does not reset the PXI Clock signal that is driven by devices installed in the Star Trigger Controller Slot, also known as the System Timing Slot.
        ''' By default, this function resets all properties to their default values, aborts generation, clears all routes, and resets session properties to initial values.
        ''' You can specify steps to omit using the steps to omit parameter. 
        ''' For example, if you specify NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES for the steps to omit parameter, this function does not release signal routes during the reset process.
        ''' When routes of signals between two devices are released, they are released regardless of which device created the route.
        ''' 
        ''' Supported Devices:  NI 5600/5601/5603/5605/5606 (external digitizer mode), NI 5644R/5645R/5646R, NI 5661/5663/5663E/5665/5667/5668R, NI 5693/5694
        ''' 
        ''' </summary>
        ''' <param name="stepsToOmit">
        ''' Specifies a list of steps to skip during the reset process.
        ''' 
        ''' The default value is NIRFSA_VAL_RESET_WITH_OPTIONS_NONE, which specifies that no step is omitted during reset.
        ''' 
        ''' NIRFSA_VAL_RESET_WITH_OPTIONS_NONE (0) : No step is omitted during reset. 
        ''' NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES (1) :  Omits the routing reset step. Routing is preserved after a reset. However, routing related properties are reset to default, and routing is released if the default properties are committed after a reset. 
        ''' 
        '''  Note  NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES is not supported in external calibration or alignment sessions. 
        '''  Note  NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES is not supported for the NI 5600/5661. 
        '''  
        ''' </param>
        '''<returns>	
        ''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
        ''' To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
        ''' The general meaning of the status code is as follows:	
        ''' Value           Meaning	
        ''' 0               Success	
        ''' Positive Values Warnings	
        ''' Negative Values Errors	
        '''	
        ''' </returns>
        Public Function ResetWithOptions(stepsToOmit As ULong) As Integer
            Dim pInvokeResult as Integer = PInvoke.ResetWithOptions(Me._handle, stepsToOmit)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function             

		#End Region

		#Region "DisposeMethods"
		''' <summary>
		''' Closes the rfsa session and releases resources associated with that session. 
		''' </summary>
		Public Sub Dispose() Implements IDisposable.Dispose
			Me.Dispose(True)
			System.GC.SuppressFinalize(Me)
		End Sub

		Private Sub Dispose(disposing As Boolean)
			If Me._disposed = False Then
				'Dispose unmanaged resources
				PInvoke.close(Me._handle)
				Me._handle = New HandleRef(Nothing, System.IntPtr.Zero)
			End If
			' Note disposing has been done.
			Me._disposed = True
		End Sub
		#End Region

		#Region "VstSelfCalibration"
		
		''' <summary>
		''' 
		''' </summary>
		Public Shared Function VstSelfCalibrate(resouceName As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.VstSelfCalibrate(resouceName)
			niRFSA.TestForVstSelfCalibrateError(pInvokeResult)
			Return pInvokeResult
		End Function

		#End Region

		#Region "18.1"
		''' <summary>
		''' 
		''' </summary>
		Public Function ClearSelfCalibrationRange() As Integer
			Dim pInvokeResult As Integer = PInvoke.ClearSelfCalibrationRange(Me._handle)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

        #End Region

        #Region "18.2"

        ''' <summary>
        ''' Creates an S-parameter de-embedding table based on the specified S2P file.
        ''' </summary>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique. If you use the same name as an existing table, the table is replaced.</param>
        ''' <param name="s2pFilePath"> Specifies the path to the S2P file that contains de-embedding information.</param>
        ''' <param name="sParameterOrientation"> Specifies the orientation of the data in the S2P file.</param>
        ''' <remarks>
        ''' If you only create one table, NI-RFSA automatically selects that table to de-embed the measurement.
        ''' </remarks>
        Public Function CreateDeembeddingSParameterTableS2pFile(port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.CreateDeembeddingSParameterTableS2pFile(Me._handle, port, tableName, s2pFilePath, sParameterOrientation)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Creates an S-parameter de-embedding table from the input data.
        ''' </summary>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique. If you use the same name as an existing table, the table is replaced.</param>
        ''' <param name="frequencies"> Specifies the frequencies for the S-parameter table rows. Frequencies must be unique and in ascending order.</param>
        ''' <param name="sParameterTable"> Specifies the S-parameters for each frequency. S-parameters for each frequency are placed in the array in the following order, s11, s12, s21, s22.</param>
        ''' <param name="sParameterOrientation"> Specifies the orientation of the data in the S2P file.</param>
        ''' <remarks>
        ''' If you only create one table, NI-RFSA automatically selects that table to de-embed the measurement.
        ''' </remarks>
        Public Function CreateDeembeddingSParameterTableArray(port As String, tableName As String, frequencies As Double(), sParameterTable As niComplexNumber(,,), sParameterOrientation As Integer) As Integer
            Dim numberOfPorts As Integer = 0
            Dim numberOfRows As Integer = sParameterTable.GetLength(1)
            Dim numberOfCols As Integer = sParameterTable.GetLength(2)
            If numberOfRows = numberOfCols Then
                numberOfPorts = numberOfRows
            End If
            Dim pInvokeResult As Integer = PInvoke.CreateDeembeddingSParameterTableArray(Me._handle, port, tableName, frequencies, frequencies.Length, sParameterTable,
                sParameterTable.Length, numberOfPorts, sParameterOrientation)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Deletes the selected de-embedding table.
        ''' </summary>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique.</param>
        Public Function DeleteDeembeddingTable(port As String, tableName As String) As Integer
            Dim pInvokeResult As Integer = PInvoke.DeleteDeembeddingTable(Me._handle, port, tableName)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Deletes all configured de-embedding tables for the session.
        ''' </summary>
        Public Function DeleteAllDeembeddingTables() As Integer
            Dim pInvokeResult As Integer = PInvoke.DeleteAllDeembeddingTables(Me._handle)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Selects the nearest interpolation method.
        ''' </summary>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique.</param>
        ''' <remarks>
        ''' NI-RFSA uses the parameters of the table nearest to the carrier frequency for de-embedding.
        ''' </remarks>
        Public Function ConfigureDeembeddingTableInterpolationNearest(port As String, tableName As String) As Integer
            Dim pInvokeResult As Integer = PInvoke.ConfigureDeembeddingTableInterpolationNearest(Me._handle, port, tableName)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Selects the linear interpolation method.
        ''' </summary>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique.</param>
        ''' <param name="format"> Specifies the format of parameters to interpolate.</param>
        ''' <remarks>
        ''' If the carrier frequency does not match a row in the de-embedding table, NI-RFSA performs a linear interpolation based on the entries in the de-embedding table to determine the parameters to use for de-embedding.
        ''' </remarks>
        Public Function ConfigureDeembeddingTableInterpolationLinear(port As String, tableName As String, format As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.ConfigureDeembeddingTableInterpolationLinear(Me._handle, port, tableName, format)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Selects the spline interpolation method.
        ''' </summary>
        ''' <param name="tableName"> Specifies the name of the table.</param>
        ''' <remarks>
        ''' If the carrier frequency does not match a row in the de-embedding table, NI-RFSA performs a spline interpolation based on the entries in the de-embedding table to determine the parameters to use for de-embedding.
        ''' </remarks>
        Public Function ConfigureDeembeddingTableInterpolationSpline(port As String, tableName As String) As Integer
            Dim pInvokeResult As Integer = PInvoke.ConfigureDeembeddingTableInterpolationSpline(Me._handle, port, tableName)
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Returns the S-parameters used for de-embedding a measurement. This includes interpolation of the parameters based on the configured carrier frequency.
        ''' </summary>
        ''' <param name="sParameters"> Returns an array of S-parameters. The S-parameters are returned in the following order, s11, s12, s21, s22. </param>
        ''' <remarks>
        ''' This method returns an empty array if no de-embedding is done.
        ''' </remarks>
        Public Function GetDeembeddingSParameters(ByRef sParameters As niComplexNumber(,)) As Integer
            Dim internalSParameters As niComplexNumber() = Nothing
            Dim sParametersSize As Integer = 0

            Dim numberOfSParametersReturned As Integer = 0
            Dim numberOfPorts As Integer = 0

            Dim rows As Integer = 0
            Dim cols As Integer = 0
            Dim count As Integer = 0
            Dim pInvokeResult As Integer = 0

            pInvokeResult = TestForError(PInvoke.GetDeembeddingSParameters(Me._handle, internalSParameters, sParametersSize, numberOfSParametersReturned, numberOfPorts))

            If (sParameters Is Nothing) OrElse (sParameters.Length <> numberOfSParametersReturned) Then
                internalSParameters = New niComplexNumber(numberOfSParametersReturned - 1) {}
                pInvokeResult = PInvoke.GetDeembeddingSParameters(Handle, internalSParameters, numberOfSParametersReturned, sParametersSize, numberOfPorts)
                rows = numberOfPorts
                cols = numberOfPorts
                sParameters = New niComplexNumber(rows - 1, cols - 1) {}
                For i As Integer = 0 To rows - 1
                    Dim j As Integer = 0
                    While j < cols
                        sParameters(i, j) = internalSParameters(count)
                        j += 1
                        count += 1
                    End While
                Next
            End If
            TestForError(pInvokeResult)
            Return pInvokeResult
        End Function

        #End Region

        ' These set and get methods are retained for Backward compatibility reasons
        ' The new method with the out argument should be used instead
        #Region "OldGetMethods"
        <Obsolete> _
		Public Function GetInt32(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String) As Integer
			Dim val As Integer
			Me.GetInt32(propertyId, repeatedCapabilityOrChannel, val)
			Return val
		End Function
		<Obsolete> _
		Public Function GetInt32(propertyId As niRFSAProperties) As Integer
			Return Me.GetInt32(propertyId, "")
		End Function
		<Obsolete> _
		Public Function GetDouble(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String) As Double
			Dim val As Double
			Me.GetDouble(propertyId, repeatedCapabilityOrChannel, val)
			Return val
		End Function
		<Obsolete> _
		Public Function GetDouble(propertyId As niRFSAProperties) As Double
			Return Me.GetDouble(propertyId, "")
		End Function
		<Obsolete> _
		Public Function GetBoolean(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String) As Boolean
			Dim val As Boolean
			Me.GetBoolean(propertyId, repeatedCapabilityOrChannel, val)
			Return val
		End Function
		<Obsolete> _
		Public Function GetBoolean(propertyId As niRFSAProperties) As Boolean
			Return Me.GetBoolean(propertyId, "")
		End Function

        '<Obsolete> _
        'Public Function GetString(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String) As String
        '	Dim val As String
        '	Me.GetString(propertyId, repeatedCapabilityOrChannel, val)
        '	Return val
        'End Function
        '<Obsolete> _
        'Public Function GetString(propertyId As niRFSAProperties) As String
        '	Return Me.GetString(propertyId, "")
        'End Function

		#End Region

		#Region "SetGetMethods"
		Public Function SetInt32(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, val As Integer) As Integer
			Return TestForError(PInvoke.SetAttributeViInt32(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function SetInt32(propertyId As niRFSAProperties, val As Integer) As Integer
			Return Me.SetInt32(propertyId, "", val)
		End Function

		Public Function GetInt32(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, ByRef val As Integer) As Integer
			Return TestForError(PInvoke.GetAttributeViInt32(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function GetInt32(propertyId As niRFSAProperties, ByRef val As Integer) As Integer
			Return Me.GetInt32(propertyId, "", val)
		End Function

		Public Function SetDouble(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, val As Double) As Integer
			Return TestForError(PInvoke.SetAttributeViReal64(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function SetDouble(propertyId As niRFSAProperties, val As Double) As Integer
			Return Me.SetDouble(propertyId, "", val)
		End Function

		Public Function GetDouble(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, ByRef val As Double) As Integer
			Return TestForError(PInvoke.GetAttributeViReal64(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function GetDouble(propertyId As niRFSAProperties, ByRef val As Double) As Integer
			Return Me.GetDouble(propertyId, "", val)
		End Function

		Public Function SetBoolean(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, val As Boolean) As Integer
			Return TestForError(PInvoke.SetAttributeViBoolean(Me._handle, repeatedCapabilityOrChannel, propertyId, System.Convert.ToUInt16(val)))
		End Function

		Public Function SetBoolean(propertyId As niRFSAProperties, val As Boolean) As Integer
			Return Me.SetBoolean(propertyId, "", val)
		End Function

		Public Function GetBoolean(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, ByRef val As Boolean) As Integer
			Dim boolAsShort As UShort
			Dim ret As Integer = PInvoke.GetAttributeViBoolean(Me._handle, repeatedCapabilityOrChannel, propertyId, boolAsShort)
			val = System.Convert.ToBoolean(boolAsShort)
			Return TestForError(ret)
		End Function

		Public Function GetBoolean(propertyId As niRFSAProperties, ByRef val As Boolean) As Integer
			Return Me.GetBoolean(propertyId, "", val)
		End Function

		Public Function SetString(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, val As String) As Integer
			Return TestForError(PInvoke.SetAttributeViString(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function SetString(propertyId As niRFSAProperties, val As String) As Integer
			Return Me.SetString(propertyId, "", val)
		End Function

		Public Function GetString(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, ByRef val As String) As Integer
			Dim newVal As New System.Text.StringBuilder(512)
			Dim size As Integer = PInvoke.GetAttributeViString(Me._handle, repeatedCapabilityOrChannel, propertyId, 0, newVal)
			Dim ret As Integer = 0
			val = ""
			If (size < 0) Then
				Return ThrowError(size)
			Else
				If (size > 0) Then
					newVal.Capacity = size
					ret = PInvoke.GetAttributeViString(Me._handle, repeatedCapabilityOrChannel, propertyId, size, newVal)
					val = newVal.ToString()
				End If
			End If
			Return TestForError(ret)
		End Function

		Public Function GetString(propertyId As niRFSAProperties, ByRef val As String) As Integer
			Return Me.GetString(propertyId, "", val)
		End Function

		Public Function SetInt64(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, val As Int64) As Integer
			Return TestForError(PInvoke.SetAttributeViInt64(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function SetInt64(propertyId As niRFSAProperties, val As Int64) As Integer
			Return Me.SetInt64(propertyId, "", val)
		End Function

		Public Function GetInt64(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, ByRef val As Int64) As Integer
			Return TestForError(PInvoke.GetAttributeViInt64(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function GetInt64(propertyId As niRFSAProperties, ByRef val As Int64) As Integer
			Return Me.GetInt64(propertyId, "", val)
		End Function

		<Obsolete("This method is obsolete; use the override where the propertyID is the first argument")> _
		Public Function GetInt64(repeatedCapabilityOrChannel As String, propertyId As niRFSAProperties, ByRef val As Int64) As Integer
			Return Me.GetInt64(propertyId, repeatedCapabilityOrChannel, val)
		End Function

		Public Function SetSession(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, val As System.IntPtr) As Integer
			Return TestForError(PInvoke.SetAttributeViSession(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function SetSession(propertyId As niRFSAProperties, val As System.IntPtr) As Integer
			Return SetSession(propertyId, "", val)
		End Function

		Public Function GetSession(propertyId As niRFSAProperties, repeatedCapabilityOrChannel As String, ByRef val As System.IntPtr) As Integer
			Return TestForError(PInvoke.GetAttributeViSession(Me._handle, repeatedCapabilityOrChannel, propertyId, val))
		End Function

		Public Function GetSession(propertyId As niRFSAProperties, ByRef val As System.IntPtr) As Integer
			Return GetSession(propertyId, "", val)
		End Function

		#End Region

		#Region "SetGetAttributeMethods"
		''' <summary>
		''' Sets the value of a ViBoolean attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Pass the value to which you want to set the attribute.
		''' Note&#160;&#160;Some of the values might not be valid depending on the
		''' current state of the instrument session.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SetAttributeViBoolean
		''' ViStatus niRFSA_SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean value);
		''' Purpose
		''' Sets the value of a ViBoolean attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use SetBoolean() instead")> _
		Public Function SetAttributeBoolean(channelName As String, attributeID As niRFSAProperties, attributeValue As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetAttributeViBoolean(Handle, channelName, attributeID, If(attributeValue, CUShort(1), CUShort(0)))
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Sets the value of a ViInt32 attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel-based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Pass the value to which you want to set the attribute.
		''' Note&#160;&#160;Some of the values might not be valid depending on the
		''' current state of the instrument session.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SetAttributeViInt32
		''' ViStatus niRFSA_SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 value);
		''' Purpose
		''' Sets the value of a ViInt32 attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use SetInt32() instead")> _
		Public Function SetAttributeInt32(channelName As String, attributeID As niRFSAProperties, attributeValue As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetAttributeViInt32(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Sets the value of a ViInt64 attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes. 
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Pass the value to which you want to set the attribute.
		''' Note&#160;&#160;Some of the values might not be valid depending on the
		''' current state of the instrument session.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SetAttributeViInt64
		''' ViStatus niRFSA_SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 value);
		''' Purpose
		''' Sets the value of a ViInt64 attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes. 
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use SetInt64() instead")> _
		Public Function SetAttributeInt64(channelName As String, attributeID As niRFSAProperties, attributeValue As Long) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetAttributeViInt64(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Sets the value of a ViReal64 attribute.
		''' Use this low-level function to set the values of inherent IVI attributes, and instrument-specific attributes. 
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread-locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Pass the value to which you want to set the attribute.
		''' Note&#160;&#160;Some of the values might not be valid depending on the
		''' current state of the instrument session.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SetAttributeViReal64
		''' ViStatus niRFSA_SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 value);
		''' Purpose
		''' Sets the value of a ViReal64 attribute.
		''' Use this low-level function to set the values of inherent IVI attributes, and instrument-specific attributes. 
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread-locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use SetDouble() instead")> _
		Public Function SetAttributeReal64(channelName As String, attributeID As niRFSAProperties, attributeValue As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetAttributeViReal64(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Sets the value of a ViSession attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Pass the value to which you want to set the attribute.
		''' Note&#160;&#160;Some of the values might not be valid depending on the
		''' current state of the instrument session.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SetAttributeViSession
		''' ViStatus niRFSA_SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession value);
		''' Purpose
		''' Sets the value of a ViSession attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use SetSession() instead")> _
		Public Function SetAttributeSession(channelName As String, attributeID As niRFSAProperties, attributeValue As IntPtr) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetAttributeViSession(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Sets the value of a ViString attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Pass the value to which you want to set the attribute.
		''' Note&#160;&#160;Some of the values might not be valid depending on the
		''' current state of the instrument session.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_SetAttributeViString
		''' ViStatus niRFSA_SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString value);
		''' Purpose
		''' Sets the value of a ViString attribute.
		''' Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
		''' NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use SetString() instead")> _
		Public Function SetAttributeString(channelName As String, attributeID As niRFSAProperties, attributeValue As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.SetAttributeViString(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Queries the value of a ViBoolean attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes.  
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Returns the current value of the attribute. Pass the address of a ViBoolean variable.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetAttributeViBoolean
		''' ViStatus niRFSA_GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean *value);
		''' Purpose
		''' Queries the value of a ViBoolean attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes.  
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use GetBoolean() instead")> _
		Public Function GetAttributeBoolean(channelName As String, attributeID As niRFSAProperties, ByRef attributeValue As Boolean) As Integer
			Dim val As UShort
			Dim pInvokeResult As Integer = PInvoke.GetAttributeViBoolean(Handle, channelName, attributeID, val)
			TestForError(pInvokeResult)
			attributeValue = val = CUShort(1)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Queries the value of a ViInt32 attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Returns the current value of the attribute. Pass the address of a ViInt32 variable.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetAttributeViInt32
		''' ViStatus niRFSA_GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 *value);
		''' Purpose
		''' Queries the value of a ViInt32 attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use GetInt32() instead")> _
		Public Function GetAttributeInt32(channelName As String, attributeID As niRFSAProperties, ByRef attributeValue As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetAttributeViInt32(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Queries the value of a ViInt64 attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Returns the current value of the attribute. Pass the address of a ViInt64 variable.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetAttributeViInt64
		''' ViStatus niRFSA_GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 *value);
		''' Purpose
		''' Queries the value of a ViInt64 attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use GetInt64() instead")> _
		Public Function GetAttributeInt64(channelName As String, attributeID As niRFSAProperties, ByRef attributeValue As Long) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetAttributeViInt64(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Queries the value of a ViReal64 attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Returns the current value of the attribute. Pass the address of a ViReal64 variable.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetAttributeViReal64
		''' ViStatus niRFSA_GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 *value);
		''' Purpose
		''' Queries the value of a ViReal64 attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use GetDouble() instead")> _
		Public Function GetAttributeReal64(channelName As String, attributeID As niRFSAProperties, ByRef attributeValue As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetAttributeViReal64(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Queries the value of a ViSession attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' Returns the current value of the attribute. Pass the address of a ViSession variable.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetAttributeViSession
		''' ViStatus niRFSA_GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession *value);
		''' Purpose
		''' Queries the value of a ViSession attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use GetSession() instead")> _
		Public Function GetAttributeSession(channelName As String, attributeID As niRFSAProperties, ByRef attributeValue As IntPtr) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetAttributeViSession(Handle, channelName, attributeID, attributeValue)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Queries the value of a ViString attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' You must provide a ViChar array to serve as a buffer for the value. You pass the number of bytes in the buffer as the bufferSize parameter. If the current value of the attribute, including the terminating NULL byte, is larger than the size you indicate in the bufferSize parameter, the function copies buffer size &#8211;&#160;1&#160;bytes into the buffer, places an ASCII NULL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is &#34;123456&#34; and the buffer size is 4, the function places &#34;123&#34; into the buffer and returns 7.
		''' If you want to call this function just to get the required buffer size, you can pass 0 for bufferSize and VI_NULL for the attributeValue buffer.
		''' If you want the function to fill in the buffer regardless of the number of bytes in the value, pass a negative number for bufferSize.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		''' </summary>
		'''<param name = "channelName">
		''' Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
		''' 
		'''</param>
		'''<param name = "attributeID">
		''' Pass the ID of an attribute.
		''' 
		'''</param>
		'''<param name = "attributeValue">
		''' The buffer in which the function returns the current value of the attribute.  The buffer must be of type ViChar and have at least as many bytes as indicated in bufferSize.
		''' If you specify 0 for the bufferSize parameter, you can pass VI_NULL for this parameter.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSA_GetAttributeViString
		''' ViStatus niRFSA_GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViChar value[]);
		''' Purpose
		''' Queries the value of a ViString attribute.
		''' You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
		''' You must provide a ViChar array to serve as a buffer for the value. You pass the number of bytes in the buffer as the bufferSize parameter. If the current value of the attribute, including the terminating NULL byte, is larger than the size you indicate in the bufferSize parameter, the function copies buffer size &#8211;&#160;1&#160;bytes into the buffer, places an ASCII NULL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is &#34;123456&#34; and the buffer size is 4, the function places &#34;123&#34; into the buffer and returns 7.
		''' If you want to call this function just to get the required buffer size, you can pass 0 for bufferSize and VI_NULL for the attributeValue buffer.
		''' If you want the function to fill in the buffer regardless of the number of bytes in the value, pass a negative number for bufferSize.
		''' Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
		''' if(typeof(Print_Link)=="function")  {
		''' Print_Link();
		''' }
		''' 
		'''</returns>
		<Obsolete("This method is obsolete; use GetString() instead")> _
		Public Function GetAttributeString(channelName As String, attributeID As niRFSAProperties, ByRef attributeValue As String) As Integer
			Dim newVal As New System.Text.StringBuilder(512)
			Dim size As Integer = PInvoke.GetAttributeViString(Me._handle, channelName, attributeID, 512, newVal)
			If (size < 0) Then
				ThrowError(size)
			Else
				If (size > 0) Then
					newVal.Capacity = size
					Dim pInvokeResult As Integer = PInvoke.GetAttributeViString(Me._handle, channelName, attributeID, size, newVal)
					TestForError(pInvokeResult)
					attributeValue = newVal.ToString()
					Return pInvokeResult
				End If
			End If
			attributeValue = newVal.ToString()
			Return size
		End Function

		#End Region

		#Region "GetSetMethodsForAttributes"

		#Region "Properties added between 2.5 and 2.9"

		''' <summary>
		'''Specifies whether to enable or disable the step gain amplifier. 
		'''    Default Value: NIRFSA_VAL_STEP_GAIN_DISABLED 
		'''    Supported Devices: NI 5694         
		''' 
		''' </summary>
		Public Function SetStepGainEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.StepGainEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether to enable or disable the step gain amplifier. 
		'''    Default Value: NIRFSA_VAL_STEP_GAIN_DISABLED 
		'''    Supported Devices: NI 5694         
		''' 
		''' </summary>
		Public Function GetStepGainEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.StepGainEnabled, channel, value)
		End Function
        ''' <summary>
        '''Specifies the RF preselector filter to use. 
        '''    Default Values: 
        '''    NI 5667, NI 5693: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_9 
        '''    NI 5665: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_NONE 
        '''    Supported Devices: NI 5665/5667, NI 5693        
        ''' 
        ''' </summary>
        Public Function SetRfPreselectorFilter(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.RfPreselectorFilter, channel, value)
        End Function
        ''' <summary>
        '''Specifies the RF preselector filter to use. 
        '''    Default Values: 
        '''    NI 5667, NI 5693: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_9 
        '''    NI 5665: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_NONE 
        '''    Supported Devices: NI 5665/5667, NI 5693        
        ''' 
        ''' </summary>

        Public Function GetRfPreselectorFilter(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.RfPreselectorFilter, channel, value)
        End Function

        ''' <summary>
        '''Specifies whether to use the low-frequency bypass path for the incoming RF signal. 
        '''    Default Value: NIRFSA_VAL_DISABLED 
        '''    Supported Devices: NI 5693, NI 5667        
        ''' 
        ''' </summary>
        Public Function SetLowFrequencyByPassEnabled(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.LowFrequencyByPassEnabled, channel, value)
        End Function
        ''' <summary>
        '''Specifies whether to use the low-frequency bypass path for the incoming RF signal. 
        '''    Default Value: NIRFSA_VAL_DISABLED 
        '''    Supported Devices: NI 5693, NI 5667        
        ''' 
        ''' </summary>
        Public Function GetLowFrequencyByPassEnabled(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.LowFrequencyByPassEnabled, channel, value)
        End Function


        ''' <summary>
        '''Specifies whether the notch filter is enabled on the RF conditioning module. 
        '''    Default Value: NIRFSA_VAL_NOTCH_FILTER_DISABLED 
        '''    Supported Devices: NI 5661/5663/5663E/5665/5667, NI 5693        
        ''' 
        ''' </summary>
        Public Function SetNotchFilterEnabled(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.NotchFilterEnabled, channel, value)
        End Function
        ''' <summary>
        '''Specifies whether the notch filter is enabled on the RF conditioning module. 
        '''    Default Value: NIRFSA_VAL_NOTCH_FILTER_DISABLED 
        '''    Supported Devices: NI 5661/5663/5663E/5665/5667, NI 5693        
        ''' 
        ''' </summary>
        Public Function GetNotchFilterEnabled(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.NotchFilterEnabled, channel, value)
        End Function


        ''' <summary>
        '''Specifies whether all signal conditioning is enabled on the NI 5694. 
        '''    NOTE: If you set this attribute to NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED,    NI-RFSA bypasses all signal conditioning, prevents any signal downconversion,    and fixes the values for NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute, the    NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute, and the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute. 
        '''    Default Value: NIRFSA_VAL_SIGNAL_CONDITIONING_ENABLED 
        '''    Supported Devices:NI 5694        
        '''
        ''' </summary>
        Public Function SetSignalConditioningEnabled(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.SignalConditioningEnabled, channel, value)
        End Function
        ''' <summary>
        '''Specifies whether all signal conditioning is enabled on the NI 5694. 
        '''    NOTE: If you set this attribute to NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED,    NI-RFSA bypasses all signal conditioning, prevents any signal downconversion,    and fixes the values for NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute, the    NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute, and the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute. 
        '''    Default Value: NIRFSA_VAL_SIGNAL_CONDITIONING_ENABLED 
        '''    Supported Devices:NI 5694        
        '''
        ''' </summary>
        Public Function GetSignalConditioningEnabled(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.SignalConditioningEnabled, channel, value)
        End Function

        ''' <summary>
        '''Specifies whether downconversion to 21.4 MHz is enabled for the IF conditioning module.    The IF output frequency is 21.4 MHz when you enable this attribute, and it is 193.6 MHz    when you disable this attribute. 
        '''    NOTE: If you set the NIRFSA_ATTR_SIGNAL_CONDITIONING_ENABLED attribute to    NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED, you cannot set the    NIRFSA_ATTR_IF_CONDITIONING_DOWN_CONVERSION_ENABLED attribute to NIRFSA_VAL_ENABLED. 
        '''    NOTE: For the NI 5661/5663/5663E/5665, the only valid value for this attribute is NIRFSA_VAL_DISABLED. 
        '''    Default Values: NIRFSA_VAL_DISABLED 
        '''    
        ''' </summary>
        Public Function SetIfConditioningDownConversionEnabled(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.IfConditioningDownConversionEnabled, channel, value)
        End Function
        ''' <summary>
        '''Specifies whether downconversion to 21.4 MHz is enabled for the IF conditioning module.    The IF output frequency is 21.4 MHz when you enable this attribute, and it is 193.6 MHz    when you disable this attribute. 
        '''    NOTE: If you set the NIRFSA_ATTR_SIGNAL_CONDITIONING_ENABLED attribute to    NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED, you cannot set the    NIRFSA_ATTR_IF_CONDITIONING_DOWN_CONVERSION_ENABLED attribute to NIRFSA_VAL_ENABLED. 
        '''    NOTE: For the NI 5661/5663/5663E/5665, the only valid value for this attribute is NIRFSA_VAL_DISABLED. 
        '''    Default Values: NIRFSA_VAL_DISABLED 
        '''    
        ''' </summary>
        Public Function GetIfConditioningDownConversionEnabled(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.IfConditioningDownConversionEnabled, channel, value)
        End Function

        ''' <summary>
        '''Specifies the IF filter path bandwidth for your device configuration. 
        '''    NOTE: For composite devices, such as the NI 5663/5663E/5665/5667, the IF filter path    bandwidth includes all IF filters across the component modules of a composite device. 
        '''    NOTE: For the NI 5601 and NI 5663/5663E, set the NIRFSA_ATTR_IF_FILTER attribute to choose    the IF filter you want to use. Read the value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute    to determine the IF filters used by the NI 5601 and NI 5663/5663E. 
        '''    Default Values: For spectrum acquisition types the default is greater than or    equal to the NIRFSA_ATTR_SPECTRUM_SPAN attribute. NI-RFSA chooses the default    value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute to correspond to the    appropriate IF filter. For I/Q acquisition types NI-RFSA chooses the default    value corresponding to the widest IF filter possible for your equipment setup.
        '''    Supported Devices: NI 5601/5603/5605, NI 5663/5663E/5665/5667, NI 5694        
        ''' 
        ''' </summary>
        Public Function SetIfFilterBandwidth(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.IfFilterBandwidth, channel, value)
        End Function
        ''' <summary>
        '''Specifies the IF filter path bandwidth for your device configuration. 
        '''    NOTE: For composite devices, such as the NI 5663/5663E/5665/5667, the IF filter path    bandwidth includes all IF filters across the component modules of a composite device. 
        '''    NOTE: For the NI 5601 and NI 5663/5663E, set the NIRFSA_ATTR_IF_FILTER attribute to choose    the IF filter you want to use. Read the value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute    to determine the IF filters used by the NI 5601 and NI 5663/5663E. 
        '''    Default Values: For spectrum acquisition types the default is greater than or    equal to the NIRFSA_ATTR_SPECTRUM_SPAN attribute. NI-RFSA chooses the default    value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute to correspond to the    appropriate IF filter. For I/Q acquisition types NI-RFSA chooses the default    value corresponding to the widest IF filter possible for your equipment setup.
        '''    Supported Devices: NI 5601/5603/5605, NI 5663/5663E/5665/5667, NI 5694        
        ''' 
        ''' </summary>
        Public Function GetIfFilterBandwidth(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.IfFilterBandwidth, channel, value)
        End Function

        ''' <summary>
        '''Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
        '''     NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
        '''    Units: hertz (Hz) 
        '''    Default Value: 1 GHz 
        '''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
        ''' 
        ''' </summary>
        Public Function SetCenterFrequency(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.CenterFrequency, channel, value)
        End Function
        ''' <summary>
        '''Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
        '''     NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
        '''    Units: hertz (Hz) 
        '''    Default Value: 1 GHz 
        '''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
        ''' 
        ''' </summary>
        Public Function GetCenterFrequency(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.CenterFrequency, channel, value)
        End Function

        ''' <summary>
        ''' Enables smooth spectrum.
        ''' Default Value: Disabled
        ''' </summary>
        Public Function SetSmoothSpectrumEnabled(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.SmoothSpectrumEnabled, channel, value)
        End Function
        ''' <summary>
        ''' Enables smooth spectrum.
        ''' Default Value: Disabled
        ''' </summary>
        Public Function GetSmoothSpectrumEnabled(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.SmoothSpectrumEnabled, channel, value)
        End Function

        ''' <summary>
        '''Returns the shape factor of the window used in the fast Fourier transform (FFT).    The Window Shape Factor is defined as ratio of the 60 dB to 6 dB bandwidths. 
        '''    Default Value: N/A 
        '''    Supported Devices: NI 5661/5663/5663E/5665/5667        
        ''' 
        ''' </summary>
        Public Function GetFftWindowShapeFactor(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.FftWindowShapeFactor, channel, value)
        End Function

        ''' <summary>
        '''Returns the current temperature, in degrees Celsius, of the RF conditioning module. 
        '''    Default Value: N/A 
        '''    Supported Devices: NI 5667        
        ''' 
        ''' </summary>
        Public Function GetRfConditioningTemperature(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.RfConditioningTemperature, channel, value)
        End Function

        ''' <summary>
        '''Returns the current temperature, in degrees Celsius, of the IF conditioning module. 
        '''    Default Value: N/A 
        '''    Supported Devices: NI 5667        
        ''' 
        ''' </summary>
        Public Function GetIfConditioningTemperature(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.IfConditioningTemperature, channel, value)
        End Function

        ''' <summary>
        '''Specifies the source for the LO to be used to down convert.
        '''    If no down conversion is required, this attribute will be ignored.   Default Value: NIRFSA_VAL_ONBOARD_STR   Supported Devices: NI 5694        
        ''' 
        ''' </summary>
        Public Function SetLoSource(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.LoSource, channel, value)
        End Function

        ''' <summary>
        '''Specifies the source for the LO to be used to down convert.
        '''    If no down conversion is required, this attribute will be ignored.   Default Value: NIRFSA_VAL_ONBOARD_STR   Supported Devices: NI 5694        
        ''' 
        ''' </summary>
        Public Function GetLoSource(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.LoSource, channel, value)
        End Function

        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        <Obsolete("Use SetDigitalEdgeConfigurationListStepTriggerSource instead")> _
        Public Function SetConfigurationListStepTriggerSource(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.ConfigurationListStepTriggerSource, channel, value)
        End Function
        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        <Obsolete("Use SetDigitalEdgeConfigurationListStepTriggerSource instead")> _
        Public Function GetConfigurationListStepTriggerSource(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.ConfigurationListStepTriggerSource, channel, value)
        End Function


        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        Public Function SetDdcRefTriggerOverride(channel As String, value As Boolean) As Integer
            Return Me.SetBoolean(niRFSAProperties.DdcRefTriggerOverride, channel, value)
        End Function
        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        Public Function GetDdcRefTriggerOverride(channel As String, ByRef value As Boolean) As Integer
            Return Me.GetBoolean(niRFSAProperties.DdcRefTriggerOverride, channel, value)
        End Function

        ''' <summary>
        '''This attribute is not for customer use. 
        '''    Default Value: 0 
        ''' 
        ''' </summary>
        Public Function SetMinimumReconfigTime(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.MinimumReconfigTime, channel, value)
        End Function
        ''' <summary>
        '''This attribute is not for customer use. 
        '''    Default Value: 0 
        ''' 
        ''' </summary>
        Public Function GetMinimumReconfigTime(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.MinimumReconfigTime, channel, value)
        End Function

        ''' <summary>
        ''' 
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        Public Function SetContiguousMultiRecord(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.ContiguousMultiRecord, channel, value)
        End Function

        ''' <summary>
        ''' 
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        Public Function GetContiguousMultiRecord(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.ContiguousMultiRecord, channel, value)
        End Function

        ''' <summary>
        ''' This property is not for customer use.
        ''' </summary>
        Public Function SetTimerStartSource(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.TimerStartSource, channel, value)
        End Function
        ''' <summary>
        ''' This property is not for customer use.
        ''' </summary>
        Public Function GetTimerStartSource(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.TimerStartSource, channel, value)
        End Function

        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        Public Function SetStartTriggerDelay(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.StartTriggerDelay, channel, value)
        End Function
        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        Public Function GetStartTriggerDelay(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.StartTriggerDelay, channel, value)
        End Function
        ''' <summary>
		'''Specifies the location in a signal path where an RF preselector calibration    tone is injected or whether the tone is disabled. 
		'''    Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
		'''    Supported Devices: NI 5667, NI 5693         
		''' 
		'''
		''' </summary>
		<Obsolete("Use RfConditioningCalToneMode")> _
		Public Function SetRfPreselectorCalToneMode(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.RfPreselectorCalToneMode, channel, value)
		End Function
		''' <summary>
		'''Specifies the location in a signal path where an RF preselector calibration    tone is injected or whether the tone is disabled. 
		'''    Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
		'''    Supported Devices: NI 5667, NI 5693         
		''' 
		'''
		''' </summary>
		<Obsolete("Use RfConditioningCalToneMode")> _
        Public Function GetRfPreselectorCalToneMode(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RfPreselectorCalToneMode, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency of the RF preselector calibration tone, in hertz (Hz). 
		'''     Valid Values: 34.5 MHz to 7.5 GHz 
		'''    Default Value: 612.5 MHz 
		'''    Supported Devices: NI 5667, NI 5693          
		''' 
		''' 
		''' </summary>
		<Obsolete("Use RfConditioningCalToneFrequency")> _
		Public Function SetRfPreselectorCalToneFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.RfPreselectorCalToneFrequency, channel, value)
		End Function
        ''' <summary>		
        '''Specifies the frequency of the RF preselector calibration tone, in hertz (Hz). 
		'''     Valid Values: 34.5 MHz to 7.5 GHz 
		'''    Default Value: 612.5 MHz 
		'''    Supported Devices: NI 5667, NI 5693          
		''' 
		''' 
		''' </summary>
		<Obsolete("Use RfConditioningCalToneFrequency")> _
		Public Function GetRfPreselectorCalToneFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.RfPreselectorCalToneFrequency, channel, value)
		End Function

		''' <summary>
		''' Specifies the step attenuator to engage in the calibration tone path. This property is valid only during a calibration session.
		''' Units: dB
		''' Valid Values: 2.00, 10.00
		''' Default Value: 2.00 dB
		''' 
		''' </summary>
		Public Function SetCalToneStepAttenuation(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalToneStepAttenuation, channel, value)
		End Function
		''' <summary>
		''' Specifies the step attenuator to engage in the calibration tone path. This property is valid only during a calibration session.
		''' Units: dB
		''' Valid Values: 2.00, 10.00
		''' Default Value: 2.00 dB
		''' 
		''' </summary>
		Public Function GetCalToneStepAttenuation(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalToneStepAttenuation, channel, value)
		End Function


		''' <summary>
		'''Returns the power of a virtual signal connected to the RF IN connector on the    NI 5693 front panel when the calibration tone is enabled. 
		'''    You can enable a calibration tone for the NI 5693 by setting the    NIRFSA_ATTR_RF_PRESELECTOR_CAL_TONE_MODE attribute to    NIRFSA_VAL_CAL_TONE_LOWBAND_RF or NIRFSA_VAL_CAL_TONE_HIGHBAND_RF. 
		'''    Units: dBm 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5693          
		''' 
		''' </summary>
		Public Function SetCalTonePowerReferredToRfIn(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalTonePowerReferredToRfIn, channel, value)
		End Function
		''' <summary>
		'''Returns the power of a virtual signal connected to the RF IN connector on the    NI 5693 front panel when the calibration tone is enabled. 
		'''    You can enable a calibration tone for the NI 5693 by setting the    NIRFSA_ATTR_RF_PRESELECTOR_CAL_TONE_MODE attribute to    NIRFSA_VAL_CAL_TONE_LOWBAND_RF or NIRFSA_VAL_CAL_TONE_HIGHBAND_RF. 
		'''    Units: dBm 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5693          
		''' 
		''' </summary>
		Public Function GetCalTonePowerReferredToRfIn(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalTonePowerReferredToRfIn, channel, value)
		End Function


		''' <summary>
		'''Specifies the connector(s) to use to acquire the signal.    To set this attribute, the NI-RFSA device must be in the    Configuration state. 
		'''    Default Value: NIRFSA_VAL_RF_IN 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function GetInputPort(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.InputPort, channel, value)
		End Function
		''' <summary>
		'''Specifies the connector(s) to use to acquire the signal.    To set this attribute, the NI-RFSA device must be in the    Configuration state. 
		'''    Default Value: NIRFSA_VAL_RF_IN 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function SetInputPort(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.InputPort, channel, value)
		End Function
		''' <summary>
		'''Returns the power level, in dBm, expected at the LO IN terminal    when the NIRFSA_ATTR_LO_SOURCE attribute is set to NIRFSA_VAL_LO_IN_STR. 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function GetLoInPower(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.LoInPower, channel, value)
		End Function
		''' <summary>
		'''Returns the power level, in dBm, expected at the LO IN terminal    when the NIRFSA_ATTR_LO_SOURCE attribute is set to NIRFSA_VAL_LO_IN_STR. 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>

		Public Function SetLoInPower(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.LoInPower, channel, value)
		End Function


		''' <summary>
		'''Specifies whether to use fractional mode for the LO PLL or not. Fractional mode    gives a finer frequency step resolution, but may result in non-harmonic spurs.    Refer to the NI PXIe-5644R Specifications or the NI PXIe-5645R Specifications    for more information about fractional mode and non harmonic spurs. 
		'''    NOTE: The NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is only    applicable when using the internal LO. 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function GetLoPllFractionalModeEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.LoPllFractionalModeEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to use fractional mode for the LO PLL or not. Fractional mode    gives a finer frequency step resolution, but may result in non-harmonic spurs.    Refer to the NI PXIe-5644R Specifications or the NI PXIe-5645R Specifications    for more information about fractional mode and non harmonic spurs. 
		'''    NOTE: The NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is only    applicable when using the internal LO. 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function SetLoPllFractionalModeEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.LoPllFractionalModeEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
		'''    The LO frequency can only be tuned by multiples of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. The LO frequency can therefore be offset from the requested    center frequency by as much as half of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. This offset is corrected by digitally frequency shifting the    NIRFSA_ATTR_LO_FREQUENCY attribute to the value requested in either the    NIRFSA_ATTR_IQ_CARRIER_FREQUENCY attribute or the NIRFSA_ATTR_SPECTRUM_CENTER_FREQUENCY attribute. 
		'''    When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_ENABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute can    accept any value from 50 kHz to 24 MHz. 
		'''    When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_DISABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute is    coerced to 4 MHz, 5 MHz, 6 MHz, 12 MHz or 24 MHz. 
		'''    Valid Values: 50 kHz to 24 MHz 
		'''    Default Value: 200 kHz 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function GetLoFrequencyStepSize(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.LoFrequencyStepSize, channel, value)
		End Function
		''' <summary>
		'''Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
		'''    The LO frequency can only be tuned by multiples of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. The LO frequency can therefore be offset from the requested    center frequency by as much as half of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. This offset is corrected by digitally frequency shifting the    NIRFSA_ATTR_LO_FREQUENCY attribute to the value requested in either the    NIRFSA_ATTR_IQ_CARRIER_FREQUENCY attribute or the NIRFSA_ATTR_SPECTRUM_CENTER_FREQUENCY attribute. 
		'''    When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_ENABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute can    accept any value from 50 kHz to 24 MHz. 
		'''    When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_DISABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute is    coerced to 4 MHz, 5 MHz, 6 MHz, 12 MHz or 24 MHz. 
		'''    Valid Values: 50 kHz to 24 MHz 
		'''    Default Value: 200 kHz 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function SetLoFrequencyStepSize(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.LoFrequencyStepSize, channel, value)
		End Function

		''' <summary>
		'''Configures the frequency of the signal. The onboard signal    processing (OSP) will frequency shift the signal at this    frequency to baseband prior to acquiring it. 
		'''    Valid Values: -60 MHz to +60 MHz 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function GetIqInPortCarrierrFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqInPortCarrierrFrequency, channel, value)
		End Function
		''' <summary>
		'''Configures the frequency of the signal. The onboard signal    processing (OSP) will frequency shift the signal at this    frequency to baseband prior to acquiring it. 
		'''    Valid Values: -60 MHz to +60 MHz 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function SetIqInPortCarrierrFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqInPortCarrierrFrequency, channel, value)
		End Function


		''' <summary>
		'''Configures the terminal configuration of the I/Q terminals. 
		'''    Default Value: NIRFSA_VAL_DIFFERENTIAL    
		''' 
		''' </summary>
		Public Function GetIqInportTerminalConfiguration(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.IqInportTerminalConfiguration, channel, value)
		End Function

		''' <summary>
		'''Configures the terminal configuration of the I/Q terminals. 
		'''    Default Value: NIRFSA_VAL_DIFFERENTIAL    
		''' 
		''' </summary>
		Public Function SetIqInportTerminalConfiguration(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.IqInportTerminalConfiguration, channel, value)
		End Function


		''' <summary>
		'''Specifies the voltage range for the I/Q terminals. 
		'''    The voltage range in differential mode is configurable from 2 Vpk-pk to 0.032 Vpk-pk in    1 dB steps. In single-ended mode, valid ranges are half those for    differential. Values are always coerced up to the next valid range. 
		'''    Valid Values: 0 Vpk-pk to 2 Vpk-pk for differential terminal configuration,    0 Vpk-pk to 1 Vpk-pk for single-ended terminal configuration.
		'''    Default Value: 2 Vpk-pk 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function GetIqInPortVerticalRange(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqInPortVerticalRange, channel, value)
		End Function

		''' <summary>
		'''Specifies the voltage range for the I/Q terminals. 
		'''    The voltage range in differential mode is configurable from 2 Vpk-pk to 0.032 Vpk-pk in    1 dB steps. In single-ended mode, valid ranges are half those for    differential. Values are always coerced up to the next valid range. 
		'''    Valid Values: 0 Vpk-pk to 2 Vpk-pk for differential terminal configuration,    0 Vpk-pk to 1 Vpk-pk for single-ended terminal configuration.
		'''    Default Value: 2 Vpk-pk 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function SetIqInPortVerticalRange(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqInPortVerticalRange, channel, value)
		End Function

		''' <summary>
		'''Returns the temperature of the I/Q IN circuitry on the device. 
		'''    Units: degrees C 
		'''    Supported Devices: NI 5644R/5645R         
		''' 
		''' </summary>
		Public Function GetIqInPortTemperature(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqInPortTemperature, channel, value)
		End Function

		''' <summary>
		'''Returns the temperature of the I/Q IN circuitry on the device. 
		'''    Units: degrees C 
		'''    Supported Devices: NI 5644R/5645R         
		''' 
		''' </summary>
		Public Function SetIqInPortTemperature(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqInPortTemperature, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the shared    Start Trigger between multiple devices. The master device distributes the    synchronized Start Trigger to all devices in the system through the    Start Trigger distribution line. 
		'''    When synchronizing the Start Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Start Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_START_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_START_TRIGGER_STR. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function SetSyncStartTriggerMaster(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.SyncStartTriggerMaster, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the shared    Start Trigger between multiple devices. The master device distributes the    synchronized Start Trigger to all devices in the system through the    Start Trigger distribution line. 
		'''    When synchronizing the Start Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Start Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_START_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_START_TRIGGER_STR. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function GetSyncStartTriggerMaster(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.SyncStartTriggerMaster, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the shared    Reference Trigger between multiple devices. The master device distributes    the synchronized Reference Trigger to all devices in the system through    the Reference Trigger distribution line. 
		'''    When synchronizing the Reference Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Reference Trigger distribution line. When the device is configured as a    slave, set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_REF_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_REF_TRIGGER_STR. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function SetSyncRefTriggerMaster(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.SyncRefTriggerMaster, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the shared    Reference Trigger between multiple devices. The master device distributes    the synchronized Reference Trigger to all devices in the system through    the Reference Trigger distribution line. 
		'''    When synchronizing the Reference Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Reference Trigger distribution line. When the device is configured as a    slave, set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_REF_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_REF_TRIGGER_STR. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function GetSyncRefTriggerMaster(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.SyncRefTriggerMaster, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the synchronized Start    Trigger signal. When synchronizing the Start Trigger, configure all    devices to use the same Start Trigger distribution line. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetSyncStartTriggerDistLine(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.SyncStartTriggerDistLine, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the synchronized Start    Trigger signal. When synchronizing the Start Trigger, configure all    devices to use the same Start Trigger distribution line. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetSyncStartTriggerDistLine(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SyncStartTriggerDistLine, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the synchronized    Reference Trigger signal. When synchronizing the Reference Trigger,    configure all devices to use the same Reference Trigger distribution line. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetSyncRefTriggerDistLine(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.SyncRefTriggerDistLine, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the synchronized    Reference Trigger signal. When synchronizing the Reference Trigger,    configure all devices to use the same Reference Trigger distribution line. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetSyncRefTriggerDistLine(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SyncRefTriggerDistLine, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies whether the Reference Trigger is delayed with the data. Set this    attribute to NIRFSA_VAL_DISABLED when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_POWER_EDGE or NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: NIRFSA_VAL_DISABLED 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function SetSyncRefTriggerDelayEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.SyncRefTriggerDelayEnabled, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies whether the Reference Trigger is delayed with the data. Set this    attribute to NIRFSA_VAL_DISABLED when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_POWER_EDGE or NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: NIRFSA_VAL_DISABLED 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function GetSyncRefTriggerDelayEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.SyncRefTriggerDelayEnabled, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the    shared Advance Trigger between multiple devices. The master device    distributes the synchronized Advance Trigger to all devices in the    system through the Advance Trigger distribution line. 
		'''    When synchronizing the Advance Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Advance Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_ADVANCE_TRIGGER_SOURCE attribute to    NIRFSA_VAL_SYNC_ADVANCE_TRIGGER_STR. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function SetSyncAdvanceTriggerMaster(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.SyncAdvanceTriggerMaster, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the    shared Advance Trigger between multiple devices. The master device    distributes the synchronized Advance Trigger to all devices in the    system through the Advance Trigger distribution line. 
		'''    When synchronizing the Advance Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Advance Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_ADVANCE_TRIGGER_SOURCE attribute to    NIRFSA_VAL_SYNC_ADVANCE_TRIGGER_STR. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' </summary>
		Public Function GetSyncAdvanceTriggerMaster(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.SyncAdvanceTriggerMaster, channel, value)
		End Function


		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the synchronized Advance    Trigger signal. When synchronizing the Advance Trigger, configure all    devices to use the same Advance Trigger distribution line. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetSyncAdvanceTriggerDistLine(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.SyncAdvanceTriggerDistLine, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the synchronized Advance    Trigger signal. When synchronizing the Advance Trigger, configure all    devices to use the same Advance Trigger distribution line. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
		'''    Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetSyncAdvanceTriggerDistLine(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SyncAdvanceTriggerDistLine, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the sample clock between multiple devices.
		'''    The master device distributes the sync signal to all devices in the system through the Sync Sample Clock distribution line. 
		'''    When synchronizing the Sample Clock, one device must always be designated as the master. When the device is configured as a master, it actively drives the Sync Sample Clock distribution line.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
		''' 
		''' </summary>
		Public Function SetSyncSampleClockMaster(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.SyncSampleClockMaster, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies whether the device is the master for synchronizing the sample clock between multiple devices.
		'''    The master device distributes the sync signal to all devices in the system through the Sync Sample Clock distribution line. 
		'''    When synchronizing the Sample Clock, one device must always be designated as the master. When the device is configured as a master, it actively drives the Sync Sample Clock distribution line.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
		''' 
		''' </summary>
		Public Function GetSyncSampleClockMaster(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.SyncSampleClockMaster, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the Sample Clock Sync signal. When synchronizing the Sample Clock, configure all devices to use the same Sync Sample Clock distribution line.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
		''' 
		''' </summary>
		Public Function SetSyncSampleClockDistLine(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.SyncSampleClockDistLine, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies which external trigger line distributes the Sample Clock Sync signal. When synchronizing the Sample Clock, configure all devices to use the same Sync Sample Clock distribution line.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
		''' 
		''' </summary>
		Public Function GetSyncSampleClockDistLine(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SyncSampleClockDistLine, channel, value)
		End Function


		''' <summary>
		''' 
		'''Specifies the channel from which the device monitors the trigger.    Use a value of I to monitor the I channel. Use a value of Q to monitor    the Q channel. Use a value of IQ to monitor both I and Q channels.    This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Valid Values: I, Q, IQ, QI 
		'''    Default Value: I 
		'''    Supported Devices: NI 5644R/5645R    
		'''
		''' </summary>
		Public Function SetIqAnalogEdgeRefTriggerSource(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.IqAnalogEdgeRefTriggerSource, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies the channel from which the device monitors the trigger.    Use a value of I to monitor the I channel. Use a value of Q to monitor    the Q channel. Use a value of IQ to monitor both I and Q channels.    This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Valid Values: I, Q, IQ, QI 
		'''    Default Value: I 
		'''    Supported Devices: NI 5644R/5645R    
		'''
		''' </summary>
		Public Function GetIqAnalogEdgeRefTriggerSource(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.IqAnalogEdgeRefTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the device asserts the trigger when the voltage level is    rising or falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute    to NIRFSA_VAL_IQ_ANALOG_EDGE, the device asserts the trigger when the signal    level exceeds the specified level with the slope you specify. This attribute    affects the device operation only when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Default Value: NIRFSA_VAL_RISING_SLOPE 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function SetIqAnalogEdgeRefTriggerSlope(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSAProperties.IqAnalogEdgeRefTriggerSlope, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the device asserts the trigger when the voltage level is    rising or falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute    to NIRFSA_VAL_IQ_ANALOG_EDGE, the device asserts the trigger when the signal    level exceeds the specified level with the slope you specify. This attribute    affects the device operation only when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Default Value: NIRFSA_VAL_RISING_SLOPE 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function GetIqAnalogEdgeRefTriggerSlope(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSAProperties.IqAnalogEdgeRefTriggerSlope, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies the analog level, in volts, at which the device triggers.    The device asserts the trigger when the signal exceeds the level    specified by the value of this property, taking into consideration    the specified slope. This attribute affects the device operation only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Default Value: 0 V 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function SetIqAnalogEdgeRefTriggerLevel(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqAnalogEdgeRefTriggerLevel, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies the analog level, in volts, at which the device triggers.    The device asserts the trigger when the signal exceeds the level    specified by the value of this property, taking into consideration    the specified slope. This attribute affects the device operation only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Default Value: 0 V 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function GetIqAnalogEdgeRefTriggerLevel(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqAnalogEdgeRefTriggerLevel, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies the size of the hysteresis window on either side of the trigger    level. The device triggers when the signal passes through the threshold    you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_LEVEL attribute,    has the slope you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_SLOPE    attribute, and passes through the hysteresis window that you specify with this    attribute. This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Valid Values: 0 to (Voltage Range/2 + Trigger Level) for Rising Slope.    0 to (Voltage Range/2 – Trigger Level) for Falling Slope. These values limit    the hysteresis to the entire voltage range that is below the trigger level for    Rising Slope or that is above the trigger level for Falling Slope.
		'''    Default Value: The default is calculated by the driver as (Range x 0.025). 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function SetIqAnalogEdgeRefTriggerHysteresis(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqAnalogEdgeRefTriggerHysteresis, channel, value)
		End Function
		''' <summary>
		''' 
		'''Specifies the size of the hysteresis window on either side of the trigger    level. The device triggers when the signal passes through the threshold    you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_LEVEL attribute,    has the slope you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_SLOPE    attribute, and passes through the hysteresis window that you specify with this    attribute. This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
		'''    Valid Values: 0 to (Voltage Range/2 + Trigger Level) for Rising Slope.    0 to (Voltage Range/2 – Trigger Level) for Falling Slope. These values limit    the hysteresis to the entire voltage range that is below the trigger level for    Rising Slope or that is above the trigger level for Falling Slope.
		'''    Default Value: The default is calculated by the driver as (Range x 0.025). 
		'''    Supported Devices: NI 5644R/5645R 
		''' 
		''' </summary>
		Public Function GetIqAnalogEdgeRefTriggerHysteresis(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqAnalogEdgeRefTriggerHysteresis, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies the sub-sample delay, in seconds, to apply to the    acquired signal. To set this property, the NI-RFSA device    must be in the Configuration state. 
		'''    Valid Values: -4.16 ns to +4.16 ns 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function SetDecimationDelay(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DecimationDelay, channel, value)
		End Function

		''' <summary>
		''' 
		'''Specifies the sub-sample delay, in seconds, to apply to the    acquired signal. To set this property, the NI-RFSA device    must be in the Configuration state. 
		'''    Valid Values: -4.16 ns to +4.16 ns 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5644R/5645R    
		''' 
		''' </summary>
		Public Function GetDecimationDelay(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DecimationDelay, channel, value)
		End Function

		''' <summary>
		'''Specifies an offset from the I/Q carrier frequency for the downconverter.    If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid. After you set this attribute, the RF downconverter is    locked to that frequency offset until the value is changed or the attribute is reset. 
		'''    Valid Values: -42 MHz to +42 MHz 
		'''    Default Values: For spectrum acquisition types the driver automatically calculates    the default to avoid residual LO power. For I/Q acquisition types the default is 0 Hz.    If the center frequency is set to a non-multiple of the    NIRFSA_ATTR_SIGNAL_PATH_LO_FREQUENCY_STEP_SIZE attribute, the    NIRFSA_ATTR_DOWNCONVERTER_FREQUENCY_OFFSET attribute is set to compensate for the difference.
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' 
		''' </summary>
		Public Function SetDownconvertorFrequencyOffset(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DownconvertorFrequencyOffset, channel, value)
		End Function
		''' <summary>
		'''Specifies an offset from the I/Q carrier frequency for the downconverter.    If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid. After you set this attribute, the RF downconverter is    locked to that frequency offset until the value is changed or the attribute is reset. 
		'''    Valid Values: -42 MHz to +42 MHz 
		'''    Default Values: For spectrum acquisition types the driver automatically calculates    the default to avoid residual LO power. For I/Q acquisition types the default is 0 Hz.    If the center frequency is set to a non-multiple of the    NIRFSA_ATTR_SIGNAL_PATH_LO_FREQUENCY_STEP_SIZE attribute, the    NIRFSA_ATTR_DOWNCONVERTER_FREQUENCY_OFFSET attribute is set to compensate for the difference.
		'''    Supported Devices: NI 5644R/5645R      
		''' 
		''' 
		''' </summary>
		Public Function GetDownconvertorFrequencyOffset(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DownconvertorFrequencyOffset, channel, value)
		End Function


		''' <summary>
		''' 
		'''Returns a string containing the path to the location of the current FPGA Extensions bitfile, a .lvbitx file, that is programmed on the device. 
		'''    An FPGA Extensions bitfile controls the behavior of the FPGA. You can use a custom bitfile with the NI-RFSA instrument driver to override the default FPGA bitfile and change the default behavior of the FPGA. Before reading this property, you must specify the bitfile location using the Driver Setup keyword in the options string parameter of the niRFSA_InitWithOptions function. 
		''' 
		''' </summary>
		Public Function GetFpgaBitFilePath(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.FpgaBitFilePath, channel, value)
		End Function

		#End Region
		''' <summary>
		'''Specifies the preselector tuning DAC value during the preselector external alignment step.    This value is valid only during a external alignment session.
		'''    Valid Values: 0 to 16,383 
		'''    Defined Values: 0 to 15.5 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5605 (external digitizer mode)         
		''' 
		''' </summary>
		Public Function SetPreselectorTuningDacValue5665(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.PreselectorTuningDacValue5665, channel, value)
		End Function
		''' <summary>
		'''Specifies the preselector tuning DAC value during the preselector external alignment step.    This value is valid only during a external alignment session.
		'''    Valid Values: 0 to 16,383 
		'''    Defined Values: 0 to 15.5 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5605 (external digitizer mode)         
		''' 
		''' </summary>
		Public Function GetPreselectorTuningDacValue5665(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.PreselectorTuningDacValue5665, channel, value)
		End Function

		''' <summary>
		'''Configures the session to either acquire I/Q data or to compute a power    spectrum over the specified frequency range.
		'''    Default Value: NIRFSA_VAL_IQ 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetAcquisitionType(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.AcquisitionType, channel, value)
		End Function
		''' <summary>
		'''Configures the session to either acquire I/Q data or to compute a power    spectrum over the specified frequency range.
		'''    Default Value: NIRFSA_VAL_IQ 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetAcquisitionType(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.AcquisitionType, channel, value)
		End Function

		''' <summary>
		'''Specifies the configuration list for RF list mode to make active    for configuration or initiation. 
		'''    Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. Set this attribute to an empty    string to disable RF list mode. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetActiveConfigurationList(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ActiveConfigurationList, channel, value)
		End Function
		''' <summary>
		'''Specifies the configuration list for RF list mode to make active    for configuration or initiation. 
		'''    Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. Set this attribute to an empty    string to disable RF list mode. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetActiveConfigurationList(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ActiveConfigurationList, channel, value)
		End Function

		''' <summary>
		'''Specifies the step in the configuration list for RF list mode to make active    for configuration or initiation. 
		'''    Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. 
		'''    Default Value: 0 for devices that support RF list mode. For all other devices, the default value is N/A.
		'''    Supported Devices: NI 5663E/5665        
		''' 
		''' </summary>
		Public Function SetActiveConfigurationListStep(channel As String, value As Long) As Integer
			Return Me.SetInt64(niRFSAProperties.ActiveConfigurationListStep, channel, value)
		End Function
		''' <summary>
		'''Specifies the step in the configuration list for RF list mode to make active    for configuration or initiation. 
		'''    Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. 
		'''    Default Value: 0 for devices that support RF list mode. For all other devices, the default value is N/A.
		'''    Supported Devices: NI 5663E/5665        
		''' 
		''' </summary>
		Public Function GetActiveConfigurationListStep(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.ActiveConfigurationListStep, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/AdvanceTrigger, where DigitizerName is the name associated with your digitizer module in MAX.  
		'''    Supported Devices: NI 5663/5663E/5665      	 
		''' 
		''' </summary>
		Public Function GetAdvanceTriggerTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.AdvanceTriggerTerminalName, channel, value)
		End Function

		''' <summary>
		'''Specifies whether you want the Advance trigger to be a digital edge or    software trigger. 
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetAdvanceTriggerType(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.AdvanceTriggerType, channel, value)
		End Function
		''' <summary>
		'''Specifies whether you want the Advance trigger to be a digital edge or    software trigger. 
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetAdvanceTriggerType(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.AdvanceTriggerType, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to allow the device to acquire more records than will fit in the device memory of the NI 5622. 
		'''      NOTE: If you set the attribute to FALSE and attempt to acquire more records than fit into the device memory of the NI 5622,    NI-RFSA returns an error. If this attribute is set to TRUE, NI-RFSA returns an error only in the event of an acquisition buffer overflow.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetAllowMoreRecordsThanMemory(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.AllowMoreRecordsThanMemory, channel, value)
		End Function
		''' <summary>
		'''Specifies whether to allow the device to acquire more records than will fit in the device memory of the NI 5622. 
		'''      NOTE: If you set the attribute to FALSE and attempt to acquire more records than fit into the device memory of the NI 5622,    NI-RFSA returns an error. If this attribute is set to TRUE, NI-RFSA returns an error only in the event of an acquisition buffer overflow.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetAllowMoreRecordsThanMemory(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.AllowMoreRecordsThanMemory, channel, value)
		End Function


		''' <summary>
		'''Specifies whether you want the Arm Reference trigger to be a digital edge or software trigger. 
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetArmRefTriggerType(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.ArmRefTriggerType, channel, value)
		End Function
		''' <summary>
		'''Specifies whether you want the Arm Reference trigger to be a digital edge or software trigger. 
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetArmRefTriggerType(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.ArmRefTriggerType, channel, value)
		End Function

		''' <summary>
		'''Specifies the downconverter module attenuation setting, in dB. NI-RFSA automatically chooses    an attenuation setting for the reference level you configure.
		'''    NI 5600/5661-You can change the attenuation value to modify the amount of noise and distortion.    Higher attenuation levels increase the noise level while decreasing distortion; lower    attenuation levels    decrease the noise level while increasing distortion.
		'''    NI 5601/5663/5663E-You can change the attenuation value     to modify the amount of noise and distortion. Higher attenuation    levels increase the noise level while decreasing distortion; lower attenuation levels    decrease the noise    level while increasing distortion.
		'''    NI 5603/5605/5665-You can set multiple attributes to modify the attenuation values for the device.    Refer to NI 5665 RF Attenuation and Signal Levels for more information about    configuring attenuation. 
		'''     Units: dB 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetAttenuation(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.Attenuation, channel, value)
		End Function
		''' <summary>
		'''Specifies the downconverter module attenuation setting, in dB. NI-RFSA automatically chooses    an attenuation setting for the reference level you configure.
		'''    NI 5600/5661-You can change the attenuation value to modify the amount of noise and distortion.    Higher attenuation levels increase the noise level while decreasing distortion; lower    attenuation levels    decrease the noise level while increasing distortion.
		'''    NI 5601/5663/5663E-You can change the attenuation value     to modify the amount of noise and distortion. Higher attenuation    levels increase the noise level while decreasing distortion; lower attenuation levels    decrease the noise    level while increasing distortion.
		'''    NI 5603/5605/5665-You can set multiple attributes to modify the attenuation values for the device.    Refer to NI 5665 RF Attenuation and Signal Levels for more information about    configuring attenuation. 
		'''     Units: dB 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetAttenuation(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.Attenuation, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to cache the value of attributes. If you set this attribute to VI_TRUE,    NI-RFSA tracks the current NI-RFSA device settings and avoids sending redundant commands    to the device. 
		'''    NI-RFSA can always cache or never cache    particular attributes, regardless of the setting of this attribute.
		'''    Use the niRFSA_InitWithOptions function to override the default value.
		'''    Default Value: VI_TRUE  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function SetCache(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.Cache, channel, value)
		End Function
		''' <summary>
		'''Specifies whether to cache the value of attributes. If you set this attribute to VI_TRUE,    NI-RFSA tracks the current NI-RFSA device settings and avoids sending redundant commands    to the device. 
		'''    NI-RFSA can always cache or never cache    particular attributes, regardless of the setting of this attribute.
		'''    Use the niRFSA_InitWithOptions function to override the default value.
		'''    Default Value: VI_TRUE  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function GetCache(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.Cache, channel, value)
		End Function

		''' <summary>
		'''Overrides the internal gain self-calibration correction for the 300 kHz IF filter path. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function SetCalibrationCorrection300KhzFilter(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalibrationCorrection300KhzFilter, channel, value)
		End Function
		''' <summary>
		'''Overrides the internal gain self-calibration correction for the 300 kHz IF filter path. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function GetCalibrationCorrection300KhzFilter(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalibrationCorrection300KhzFilter, channel, value)
		End Function

		''' <summary>
		'''Overrides the internal gain self-calibration correction for the 5 MHz IF filter path.
		'''    Default Value: 0 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function SetCalibrationCorrection5MhzFilter(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalibrationCorrection5MhzFilter, channel, value)
		End Function
		''' <summary>
		'''Overrides the internal gain self-calibration correction for the 5 MHz IF filter path.
		'''    Default Value: 0 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function GetCalibrationCorrection5MhzFilter(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalibrationCorrection5MhzFilter, channel, value)
		End Function

		''' <summary>
		'''Overrides the internal gain self-calibration correction for the IF filter through path. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function SetCalibrationCorrectionThroughFilter(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalibrationCorrectionThroughFilter, channel, value)
		End Function
		''' <summary>
		'''Overrides the internal gain self-calibration correction for the IF filter through path. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function GetCalibrationCorrectionThroughFilter(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalibrationCorrectionThroughFilter, channel, value)
		End Function

		''' <summary>
		'''Specifies the IF attenuation index from a table of valid settings. To select a correct    attenuation table, use this attribute in conjunction with the    NIRFSA_ATTR_CAL_IF_FILTER_SELECTION and NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION    attributes. This attribute is valid only during a calibration session. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function SetCalIfAttenuationIndex(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalIfAttenuationIndex, channel, value)
		End Function
		''' <summary>
		'''Specifies the IF attenuation index from a table of valid settings. To select a correct    attenuation table, use this attribute in conjunction with the    NIRFSA_ATTR_CAL_IF_FILTER_SELECTION and NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION    attributes. This attribute is valid only during a calibration session. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function GetCalIfAttenuationIndex(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalIfAttenuationIndex, channel, value)
		End Function

		''' <summary>
		'''Specifies the IF attenuation table to be used for external calibration. This attribute is    valid only in a calibration session. 
		'''    Default Value: NIRFSA_VAL_EXT_CAL_IF_ATTENUATION_TABLE_STANDARD  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function SetCalIfAttenuationTableSelection(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalIfAttenuationTableSelection, channel, value)
		End Function
		''' <summary>
		'''Specifies the IF attenuation table to be used for external calibration. This attribute is    valid only in a calibration session. 
		'''    Default Value: NIRFSA_VAL_EXT_CAL_IF_ATTENUATION_TABLE_STANDARD  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function GetCalIfAttenuationTableSelection(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalIfAttenuationTableSelection, channel, value)
		End Function

		''' <summary>
		'''Specifies the IF filter path during calibration. The attribute is valid only during a    calibration session. 
		'''    Default Value: NIRFSA_VAL_EXT_CAL_IF_FILTER_PATH_3  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function SetCalIfFilterSelection(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalIfFilterSelection, channel, value)
		End Function
		''' <summary>
		'''Specifies the IF filter path during calibration. The attribute is valid only during a    calibration session. 
		'''    Default Value: NIRFSA_VAL_EXT_CAL_IF_FILTER_PATH_3  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function GetCalIfFilterSelection(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalIfFilterSelection, channel, value)
		End Function

		''' <summary>
		'''Specifies the LO1 attenuation, in dB, during a calibration session. The default value is    31.5 dB. This attribute is valid only during a calibration session. 
		'''    Valid Values: 0 to 31.5 
		'''    Default Value: 31.5  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function SetCalLo1Attenuation(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalLo1Attenuation, channel, value)
		End Function
		''' <summary>
		'''Specifies the LO1 attenuation, in dB, during a calibration session. The default value is    31.5 dB. This attribute is valid only during a calibration session. 
		'''    Valid Values: 0 to 31.5 
		'''    Default Value: 31.5  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function GetCalLo1Attenuation(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalLo1Attenuation, channel, value)
		End Function

		''' <summary>
		'''Specifies the LO2 attenuation, in dB, during a calibration session. The default value is    15.5 dB. This attribute is valid only during a    calibration session. 
		'''    Valid Values: 0 to 15.5 
		'''    Default Value: 15.5 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function SetCalLo2Attenuation(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalLo2Attenuation, channel, value)
		End Function
		''' <summary>
		'''Specifies the LO2 attenuation, in dB, during a calibration session. The default value is    15.5 dB. This attribute is valid only during a    calibration session. 
		'''    Valid Values: 0 to 15.5 
		'''    Default Value: 15.5 
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function GetCalLo2Attenuation(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalLo2Attenuation, channel, value)
		End Function

		''' <summary>
		'''Specifies the LO3 attenuation, in dB, during a calibration session. The default    value is 15.5 dB. This attribute is valid only during a calibration session. 
		'''    Valid Values: 0 to 15.5 
		'''    Default Value: 15.5  
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function SetCalLo3Attenuation(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalLo3Attenuation, channel, value)
		End Function
		''' <summary>
		'''Specifies the LO3 attenuation, in dB, during a calibration session. The default    value is 15.5 dB. This attribute is valid only during a calibration session. 
		'''    Valid Values: 0 to 15.5 
		'''    Default Value: 15.5  
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function GetCalLo3Attenuation(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalLo3Attenuation, channel, value)
		End Function

		''' <summary>
		'''Selects the LO signal path used during calibration. During noncalibration sessions,    NI-RFSA implicitly derives the LO signal path from the center frequency. During    calibration sessions, you must explicitly specify the LO signal path. This attribute is    valid only during a calibration session. 
		'''    Default Value: NIRFSA_VAL_EXT_CAL_LO_PATH_1  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function SetCalLoPathSelection(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalLoPathSelection, channel, value)
		End Function
		''' <summary>
		'''Selects the LO signal path used during calibration. During noncalibration sessions,    NI-RFSA implicitly derives the LO signal path from the center frequency. During    calibration sessions, you must explicitly specify the LO signal path. This attribute is    valid only during a calibration session. 
		'''    Default Value: NIRFSA_VAL_EXT_CAL_LO_PATH_1  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function GetCalLoPathSelection(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalLoPathSelection, channel, value)
		End Function

		''' <summary>
		'''Selects the value of RF electronic attenuation from a table of valid configurations.    This attribute is valid only during a calibration session and when you set    the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute to NIRFSA_ATTR_VAL_EXT_CAL_RF_BAND_1. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function SetCalRfElectronicAttenuationIndex(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalRfElectronicAttenuationIndex, channel, value)
		End Function
		''' <summary>
		'''Selects the value of RF electronic attenuation from a table of valid configurations.    This attribute is valid only during a calibration session and when you set    the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute to NIRFSA_ATTR_VAL_EXT_CAL_RF_BAND_1. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function GetCalRfElectronicAttenuationIndex(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalRfElectronicAttenuationIndex, channel, value)
		End Function

		''' <summary>
		'''Selects the value of the RF mechanical attenuation configuration from a table of    valid configurations. This attribute is valid only during a calibration session. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function SetCalRfMechanicalAttenuationIndex(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalRfMechanicalAttenuationIndex, channel, value)
		End Function
		''' <summary>
		'''Selects the value of the RF mechanical attenuation configuration from a table of    valid configurations. This attribute is valid only during a calibration session. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5603/5605        
		''' 
		''' </summary>
		Public Function GetCalRfMechanicalAttenuationIndex(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalRfMechanicalAttenuationIndex, channel, value)
		End Function

		''' <summary>
		'''Specifies the RF path to use during calibration. This attribute is valid only during a    calibration session. When you set this attribute, NI-RFSA does not select the RF path based    on the downconverter center frequency.
		'''    The following RF bands and associated frequency ranges apply to the NI 5601:
		'''    RF band 1: 3 GHz to 6.6 GHz 
		'''    RF band 2: 330 MHz to 3 GHz 
		'''    RF band 3: 120 MHz to 330 MHz  
		'''    RF band 4: 10 MHz to 120 MHz 
		'''    NI 5601-NIRFSA_VAL_EXT_CAL_RF_BAND_1 
		'''    Supported Devices: NI 5601        
		''' 
		''' </summary>
		Public Function SetCalRfPathSelection(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalRfPathSelection, channel, value)
		End Function
		''' <summary>
		'''Specifies the RF path to use during calibration. This attribute is valid only during a    calibration session. When you set this attribute, NI-RFSA does not select the RF path based    on the downconverter center frequency.
		'''    The following RF bands and associated frequency ranges apply to the NI 5601:
		'''    RF band 1: 3 GHz to 6.6 GHz 
		'''    RF band 2: 330 MHz to 3 GHz 
		'''    RF band 3: 120 MHz to 330 MHz  
		'''    RF band 4: 10 MHz to 120 MHz 
		'''    NI 5601-NIRFSA_VAL_EXT_CAL_RF_BAND_1 
		'''    Supported Devices: NI 5601        
		''' 
		''' </summary>
		Public Function GetCalRfPathSelection(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalRfPathSelection, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
		'''    Supported Devices: NI 5603/5605          
		''' 
		''' </summary>
		<Obsolete("Use DownconvertorCalToneFrequency instead")> _
		Public Function SetCalToneFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.CalToneFrequency, channel, value)
		End Function
		''' <summary>
		'''Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
		'''    Supported Devices: NI 5603/5605          
		''' 
		''' </summary>
		<Obsolete("Use DownconvertorCalToneFrequency instead")> _
		Public Function GetCalToneFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.CalToneFrequency, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
		'''    Supported Devices: NI 5603/5605          
		''' 
		''' </summary>
		Public Function SetDownconvertorCalToneFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DownconvertorCalToneFrequency, channel, value)
		End Function
		''' <summary>
		'''Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
		'''    Supported Devices: NI 5603/5605          
		''' 
		''' </summary>
		Public Function GetDownconvertorCalToneFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DownconvertorCalToneFrequency, channel, value)
		End Function


		''' <summary>
		'''Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
		'''    Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		<Obsolete(" Use DownconvertorCalToneMode instead")> _
		Public Function SetCalToneMode(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.CalToneMode, channel, value)
		End Function
		''' <summary>
		'''Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
		'''    Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		<Obsolete(" Use DownconvertorCalToneMode instead")> _
		Public Function GetCalToneMode(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.CalToneMode, channel, value)
		End Function


		''' <summary>
		'''Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
		'''    Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function SetDownconvertorCalToneMode(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.DownconvertorCalToneMode, channel, value)
		End Function
		''' <summary>
		'''Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
		'''    Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
		'''    Supported Devices: NI 5603/5605         
		''' 
		''' </summary>
		Public Function GetDownconvertorCalToneMode(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.DownconvertorCalToneMode, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the RF input channel is AC- or DC-coupled on a downconverter. 
		'''    NOTE: For the NI 5605/5665, this attribute must be set to NIRFSA_VAL_AC when the DC block    is present and set to NIRFSA_VAL_DC when the DC block is not present to ensure device    specifications are met and to ensure the use of proper calibration data. For more    information about removing or attaching the DC block on the NI 5605, refer to the    NI 5665 Theory of Operation topic and the NI 5605 RF Downconverter Front Panel topic in this help file. 
		'''    Default Value: NIRFSA_VAL_AC 
		'''    Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
		''' 
		''' </summary>
		Public Function SetChannelCoupling(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.ChannelCoupling, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the RF input channel is AC- or DC-coupled on a downconverter. 
		'''    NOTE: For the NI 5605/5665, this attribute must be set to NIRFSA_VAL_AC when the DC block    is present and set to NIRFSA_VAL_DC when the DC block is not present to ensure device    specifications are met and to ensure the use of proper calibration data. For more    information about removing or attaching the DC block on the NI 5605, refer to the    NI 5665 Theory of Operation topic and the NI 5605 RF Downconverter Front Panel topic in this help file. 
		'''    Default Value: NIRFSA_VAL_AC 
		'''    Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
		''' 
		''' </summary>
		Public Function GetChannelCoupling(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.ChannelCoupling, channel, value)
		End Function

		''' <summary>
		'''Returns the index of the current RF configuration list step that is executing in RF list    mode. The list is zero-indexed. You can query this attribute only when a list is executed. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5663E/5665   	 
		''' 
		''' </summary>
		Public Function GetConfigurationListStepInProgress(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.ConfigurationListStepInProgress, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum number of samples to transfer at one time from    the device to host memory. Increasing this number should result in better    fetching performance because the driver does not need to restart the transfers    as often. However, increasing this number may increase the amount of page-locked    memory required from the system. 
		'''    Default Value: 0x400000 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDataTransferBlockSize(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.DataTransferBlockSize, channel, value)
		End Function
		''' <summary>
		'''Specifies the maximum number of samples to transfer at one time from    the device to host memory. Increasing this number should result in better    fetching performance because the driver does not need to restart the transfers    as often. However, increasing this number may increase the amount of page-locked    memory required from the system. 
		'''    Default Value: 0x400000 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDataTransferBlockSize(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.DataTransferBlockSize, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum bandwidth that the device can consume. 
		'''     NOTE: The NI device limits itself to transfer fewer bytes per second on the PCI Express bus    than the value you specify for this attribute. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDataTransferMaximumBandwidth(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DataTransferMaximumBandwidth, channel, value)
		End Function
		''' <summary>
		'''Specifies the maximum bandwidth that the device can consume. 
		'''     NOTE: The NI device limits itself to transfer fewer bytes per second on the PCI Express bus    than the value you specify for this attribute. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDataTransferMaximumBandwidth(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DataTransferMaximumBandwidth, channel, value)
		End Function

		''' <summary>
		'''Specifies the temperature, in degrees Celsius, that NI-RFSA uses to calculate the device configuration settings. 
		'''    NOTE: For most applications, you can choose not to set this property, so NI-RFSA uses the device    temperature to calculate best attenuation settings. Set this property only if you want NI-RFSA    to maintain the same device configuration settings from acquisition to acquisition, independent  of device temperature changes.
		'''    Units:  degrees C 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDeviceConfigurationTemperature(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DeviceConfigurationTemperature, channel, value)
		End Function
		''' <summary>
		'''Specifies the temperature, in degrees Celsius, that NI-RFSA uses to calculate the device configuration settings. 
		'''    NOTE: For most applications, you can choose not to set this property, so NI-RFSA uses the device    temperature to calculate best attenuation settings. Set this property only if you want NI-RFSA    to maintain the same device configuration settings from acquisition to acquisition, independent  of device temperature changes.
		'''    Units:  degrees C 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDeviceConfigurationTemperature(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DeviceConfigurationTemperature, channel, value)
		End Function




		''' <summary>
		'''Specifies the instantaneous bandwidth of the device. The instantaneous bandwidth is    the effective real-time bandwidth of the signal path for your configuration. The value    is expressed in hertz (Hz). 
		'''    NI 5661-The NI 5600 RF downconverter bandwidth is 20 MHz.
		'''    NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the downconverter center    frequency you use. Refer to the NI 5601 RF downconverter overview for more information about    instantaneous bandwidth.
		'''    NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency ranges that    correspond with different instantaneous bandwidths. For example, you cannot configure a multispan acquisition that acquires one     span from 110 MHz to 120 MHz and a second from 120 MHz to 130 MHz because the bandwidths that correspond with each span are    different (10 MHz and 20 MHz, respectively). 
		'''    NI 5665-Your maximum allowed instantaneous bandwidth is independent of the downconverter center frequency.    Refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth.
		'''    NOTE: If you set the device instantaneous bandwidth for the NI 5603/5605/5665 to a value less than 300 kHz, NI-RFSA uses the 300 kHz IF filter.    For the NI 5605, if you set the device instantaneous bandwidth to a value greater than 300 kHz, NI-RFSA uses the 5 MHz IF filter.    When used with an external digitizer, the NI 5603 and the low band signal path of the NI 5605 provide a nominal 80 MHz bandwidth at -6 dB.    At frequencies greater than 3.6 GHz, the NI 5605 provides a nominal bandwidth of 40 MHz at -6 dB with the preselector (YIG-tuned filter) enabled.
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDeviceInstantaneousBandwidth(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DeviceInstantaneousBandwidth, channel, value)
		End Function
		''' <summary>
		'''Specifies the instantaneous bandwidth of the device. The instantaneous bandwidth is    the effective real-time bandwidth of the signal path for your configuration. The value    is expressed in hertz (Hz). 
		'''    NI 5661-The NI 5600 RF downconverter bandwidth is 20 MHz.
		'''    NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the downconverter center    frequency you use. Refer to the NI 5601 RF downconverter overview for more information about    instantaneous bandwidth.
		'''    NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency ranges that    correspond with different instantaneous bandwidths. For example, you cannot configure a multispan acquisition that acquires one     span from 110 MHz to 120 MHz and a second from 120 MHz to 130 MHz because the bandwidths that correspond with each span are    different (10 MHz and 20 MHz, respectively). 
		'''    NI 5665-Your maximum allowed instantaneous bandwidth is independent of the downconverter center frequency.    Refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth.
		'''    NOTE: If you set the device instantaneous bandwidth for the NI 5603/5605/5665 to a value less than 300 kHz, NI-RFSA uses the 300 kHz IF filter.    For the NI 5605, if you set the device instantaneous bandwidth to a value greater than 300 kHz, NI-RFSA uses the 5 MHz IF filter.    When used with an external digitizer, the NI 5603 and the low band signal path of the NI 5605 provide a nominal 80 MHz bandwidth at -6 dB.    At frequencies greater than 3.6 GHz, the NI 5605 provides a nominal bandwidth of 40 MHz at -6 dB with the preselector (YIG-tuned filter) enabled.
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDeviceInstantaneousBandwidth(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DeviceInstantaneousBandwidth, channel, value)
		End Function

		''' <summary>
		'''Returns the current temperature, in degrees Celsius, of the RF downconverter module. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDeviceTemperature(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DeviceTemperature, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Advance trigger. This attribute is used    only when the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetDigitalEdgeAdvanceTriggerSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.DigitalEdgeAdvanceTriggerSource, channel, value)
		End Function
		''' <summary>
		'''Specifies the source terminal for the Advance trigger. This attribute is used    only when the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetDigitalEdgeAdvanceTriggerSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.DigitalEdgeAdvanceTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the digital edge Arm Reference trigger. This attribute    is used only when the NIRFSA_ATTR_ARM_REF_TRIGGER_TYPE attribute    is set to NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetDigitalEdgeArmRefTriggerSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.DigitalEdgeArmRefTriggerSource, channel, value)
		End Function
		''' <summary>
		'''Specifies the source terminal for the digital edge Arm Reference trigger. This attribute    is used only when the NIRFSA_ATTR_ARM_REF_TRIGGER_TYPE attribute    is set to NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetDigitalEdgeArmRefTriggerSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.DigitalEdgeArmRefTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the Reference trigger. This attribute is used only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.   Default Value: NIRFSA_VAL_RISING_EDGE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDigitalEdgeRefTriggerEdge(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.DigitalEdgeRefTriggerEdge, channel, value)
		End Function
		''' <summary>
		'''Specifies the active edge for the Reference trigger. This attribute is used only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.   Default Value: NIRFSA_VAL_RISING_EDGE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDigitalEdgeRefTriggerEdge(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.DigitalEdgeRefTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the digital edge Reference trigger. This    attribute is used only when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set    to NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetDigitalEdgeRefTriggerSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.DigitalEdgeRefTriggerSource, channel, value)
		End Function
		''' <summary>
		'''Specifies the source terminal for the digital edge Reference trigger. This    attribute is used only when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set    to NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetDigitalEdgeRefTriggerSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.DigitalEdgeRefTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the Start trigger. This attribute is used only    when NIRFSA_ATTR_START_TRIGGER_TYPE is set to NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: NIRFSA_VAL_RISING_EDGE 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDigitalEdgeStartTriggerEdge(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.DigitalEdgeStartTriggerEdge, channel, value)
		End Function
		''' <summary>
		'''Specifies the active edge for the Start trigger. This attribute is used only    when NIRFSA_ATTR_START_TRIGGER_TYPE is set to NIRFSA_VAL_DIGITAL_EDGE. 
		'''    Default Value: NIRFSA_VAL_RISING_EDGE 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDigitalEdgeStartTriggerEdge(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.DigitalEdgeStartTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Start trigger. This attribute is used    only when the NIRFSA_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetDigitalEdgeStartTriggerSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.DigitalEdgeStartTriggerSource, channel, value)
		End Function
		''' <summary>
		'''Specifies the source terminal for the Start trigger. This attribute is used    only when the NIRFSA_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetDigitalEdgeStartTriggerSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.DigitalEdgeStartTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Enables use of the digital equalization filter for the RF downconverter.
		'''    NOTE: Digital IF Equalization is supported only with a 150 MHz clock. You    cannot set this attribute    to VI_TRUE if the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    is set to NIRFSA_VAL_LO_REF_CLK_STR.
		'''    NOTE: The NI 5665 enables digital IF equalization by default if you set the    acquisition mode to NIRFSA_VAL_SPECTRUM    using the niRFSA_ConfigureAcquisitionType function. If you set the    acquisition mode to NIRFSA_VAL_IQ,    digital IF equalization is enabled for instantaneous bandwidths larger    than 300 kHz. You cannot perform digital    IF equalization for instantaneous bandwidths less than or equal to 300 kHz.
		'''    Default Value: VI_TRUE, if the device configuration is supported. 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDigitalIfEqualizationEnabled(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.DigitalIfEqualizationEnabled, channel, value)
		End Function
		''' <summary>
		'''Enables use of the digital equalization filter for the RF downconverter.
		'''    NOTE: Digital IF Equalization is supported only with a 150 MHz clock. You    cannot set this attribute    to VI_TRUE if the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    is set to NIRFSA_VAL_LO_REF_CLK_STR.
		'''    NOTE: The NI 5665 enables digital IF equalization by default if you set the    acquisition mode to NIRFSA_VAL_SPECTRUM    using the niRFSA_ConfigureAcquisitionType function. If you set the    acquisition mode to NIRFSA_VAL_IQ,    digital IF equalization is enabled for instantaneous bandwidths larger    than 300 kHz. You cannot perform digital    IF equalization for instantaneous bandwidths less than or equal to 300 kHz.
		'''    Default Value: VI_TRUE, if the device configuration is supported. 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDigitalIfEqualizationEnabled(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.DigitalIfEqualizationEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether dithering is enabled on the digitizer. 
		'''    Dithering adds band-limited noise in the analog signal path to help reduce    the quantization effects    of the A/D converter and improve spectral performance. On the NI PXIe-5622,    this out-of-band noise is    added at low frequencies up to approximately 12 MHz.
		'''    When you enable dithering, the maximum signal level is reduced by up to 3 dB.    This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore,    you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal    levels up to +7    dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz,  dithering     should be disabled to eliminate residual leakage of the dither signal into the    lower frequencies of the IF passband, which starts at 12.5 MHz and ends at 62.5 MHz.    This leakage can slightly raise the noise floor in the lower frequencies, thus    degrading the performance in high-sensitivity applications. When taking spectral    measurements, this leakage can appear also as a wide, low-amplitude signal    near 12.5 MHz and 62.5 MHz. The width and amplitude of the signal depends on your    resolution bandwidth and the type of time-domain window you apply to your FFT. 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDigitizerDitherEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.DigitizerDitherEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether dithering is enabled on the digitizer. 
		'''    Dithering adds band-limited noise in the analog signal path to help reduce    the quantization effects    of the A/D converter and improve spectral performance. On the NI PXIe-5622,    this out-of-band noise is    added at low frequencies up to approximately 12 MHz.
		'''    When you enable dithering, the maximum signal level is reduced by up to 3 dB.    This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore,    you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal    levels up to +7    dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz,  dithering     should be disabled to eliminate residual leakage of the dither signal into the    lower frequencies of the IF passband, which starts at 12.5 MHz and ends at 62.5 MHz.    This leakage can slightly raise the noise floor in the lower frequencies, thus    degrading the performance in high-sensitivity applications. When taking spectral    measurements, this leakage can appear also as a wide, low-amplitude signal    near 12.5 MHz and 62.5 MHz. The width and amplitude of the signal depends on your    resolution bandwidth and the type of time-domain window you apply to your FFT. 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDigitizerDitherEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.DigitizerDitherEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency, in hertz (Hz), of the external clock used as the timebase    source if you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to an external source, such as NIRFSA_VAL_CLK_IN_STR or NIRFSA_VAL_LO_REF_CLK_STR. 
		'''    NI 5661-If this attribute is set to a value less than 60 MHz, signals at frequencies    just above the 20 MHz passband of the downconverter may be aliased back into the    passband. This aliasing occurs because the IF frequency of the downconverter is 15 MHz,    and the upper end of the passband is 25 MHz. At sampling rates below 60 MHz, the    Nyquist frequency is close to the end of the passband and creates aliases that are    not filtered effectively by the downconverter.
		'''    NI 5663/5663E/5665-The NI 5663/5663E/5665 supports only a 150 MHz external clock. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 150 MHz 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDigitizerSampleClockTimebaseRate(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DigitizerSampleClockTimebaseRate, channel, value)
		End Function
		''' <summary>
		'''Specifies the frequency, in hertz (Hz), of the external clock used as the timebase    source if you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to an external source, such as NIRFSA_VAL_CLK_IN_STR or NIRFSA_VAL_LO_REF_CLK_STR. 
		'''    NI 5661-If this attribute is set to a value less than 60 MHz, signals at frequencies    just above the 20 MHz passband of the downconverter may be aliased back into the    passband. This aliasing occurs because the IF frequency of the downconverter is 15 MHz,    and the upper end of the passband is 25 MHz. At sampling rates below 60 MHz, the    Nyquist frequency is close to the end of the passband and creates aliases that are    not filtered effectively by the downconverter.
		'''    NI 5663/5663E/5665-The NI 5663/5663E/5665 supports only a 150 MHz external clock. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 150 MHz 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDigitizerSampleClockTimebaseRate(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DigitizerSampleClockTimebaseRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the source of the Sample clock timebase, which is the timebase used    to control waveform sampling.
		'''    Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
		'''    Supported Devices: NI 5661/5663/5663E/5665 
		''' 
		''' </summary>
		Public Function SetDigitizerSampleClockTimebaseSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.DigitizerSampleClockTimebaseSource, channel, value)
		End Function
		''' <summary>
		'''Specifies the source of the Sample clock timebase, which is the timebase used    to control waveform sampling.
		'''    Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
		'''    Supported Devices: NI 5661/5663/5663E/5665 
		''' 
		''' </summary>
		Public Function GetDigitizerSampleClockTimebaseSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.DigitizerSampleClockTimebaseSource, channel, value)
		End Function


		''' <summary>
		''' </summary>
		Public Function SetIqAnalogEdgeRefTrigger(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.IqAnalogEdgeRefTrigger, channel, value)
		End Function
		''' <summary>
		''' </summary>
		Public Function GetIqAnalogEdgeRefTrigger(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.IqAnalogEdgeRefTrigger, channel, value)
		End Function

		''' <summary>
		'''Returns the current temperature, in degrees Celsius, of the digitizer module. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDigitizerTemperature(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DigitizerTemperature, channel, value)
		End Function

		''' <summary>
		'''Specifies the vertical range of the digitizer. The vertical range is defined    as the absolute value of the input range for a channel. The default vertical range works    for all device configurations. This attribute can be used to optimize performance if you    know the signal level at the digitizer input terminal is low.
		'''    NOTE: For most applications, NI-RFSA selects an appropriate value for this attribute. 
		'''    This value is expressed in volts. For example, to acquire a sine wave that    spans between -0.05 V and +0.05 V, set this attribute to 1.0. 
		'''    Default Value: 1.0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDigitizerVerticalRange(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DigitizerVerticalRange, channel, value)
		End Function
		''' <summary>
		'''Specifies the vertical range of the digitizer. The vertical range is defined    as the absolute value of the input range for a channel. The default vertical range works    for all device configurations. This attribute can be used to optimize performance if you    know the signal level at the digitizer input terminal is low.
		'''    NOTE: For most applications, NI-RFSA selects an appropriate value for this attribute. 
		'''    This value is expressed in volts. For example, to acquire a sine wave that    spans between -0.05 V and +0.05 V, set this attribute to 1.0. 
		'''    Default Value: 1.0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDigitizerVerticalRange(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DigitizerVerticalRange, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/EndOfRecordEvent, where DigitizerName is the name associated with your digitizer module in MAX.  
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDoneEventTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.DoneEventTerminalName, channel, value)
		End Function

		''' <summary>
		'''Enables in-band retuning and specifies the current frequency, in hertz (Hz),    of the downconverter.     If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid.    To disable in-band retuning, reset the attribute or call the call the niRFSA_ResetDevice function. 
		'''    After you set this attribute, the downconverter is locked to that frequency    until the value is changed    or the attribute is reset. Locking the downconverter to a fixed value allows    frequencies within the    instantaneous bandwidth of the converter to be measured with minimal    overhead, decreasing tuning time. 
		'''    Valid Values: Any supported tuning frequency of the device
		'''    Default Value: The carrier frequency or spectrum center frequency.    NI-RFSA sets this attribute to the default value based on whichever frequency setting is applicable. 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDownconverterCenterFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DownconverterCenterFrequency, channel, value)
		End Function
		''' <summary>
		'''Enables in-band retuning and specifies the current frequency, in hertz (Hz),    of the downconverter.     If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid.    To disable in-band retuning, reset the attribute or call the call the niRFSA_ResetDevice function. 
		'''    After you set this attribute, the downconverter is locked to that frequency    until the value is changed    or the attribute is reset. Locking the downconverter to a fixed value allows    frequencies within the    instantaneous bandwidth of the converter to be measured with minimal    overhead, decreasing tuning time. 
		'''    Valid Values: Any supported tuning frequency of the device
		'''    Default Value: The carrier frequency or spectrum center frequency.    NI-RFSA sets this attribute to the default value based on whichever frequency setting is applicable. 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDownconverterCenterFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DownconverterCenterFrequency, channel, value)
		End Function

		''' <summary>
		'''Returns the RF downconverter net signal gain at current NI-RFSA settings and    temperature. NI-RFSA takes the    value of this attribute into account when it reads I/Q data and spectrum data. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665      
		''' 
		''' </summary>
		Public Function SetDownconverterGain(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DownconverterGain, channel, value)
		End Function
		''' <summary>
		'''Returns the RF downconverter net signal gain at current NI-RFSA settings and    temperature. NI-RFSA takes the    value of this attribute into account when it reads I/Q data and spectrum data. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665      
		''' 
		''' </summary>
		Public Function GetDownconverterGain(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DownconverterGain, channel, value)
		End Function

		''' <summary>
		'''Configures the loop bandwidth of the RF downconverter tuning PLLs. To    set this attribute, the NI-RFSA device must be in the Configuration state.
		'''    NI 5600/5661-For signal bandwidths greater than 10 MHz, NIRFSA_VAL_wide is the only    value supported for this attribute.
		'''    NI 5601/5663/5663E- The NI 5601 does not support the NIRFSA_VAL_MEDIUM value.This attribute is not supported if you are using an external LO. 
		'''    Default Values: 
		'''    NI 5600-NIRFSA_VAL_WIDE 
		'''    NI 5601-NIRFSA_VAL_NARROW 
		'''    Supported Devices: NI 5600/5601 (external digitizer mode), NI 5661/5663/5663E        
		''' 
		''' </summary>
		Public Function SetDownconverterLoopBandwidth(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.DownconverterLoopBandwidth, channel, value)
		End Function
		''' <summary>
		'''Configures the loop bandwidth of the RF downconverter tuning PLLs. To    set this attribute, the NI-RFSA device must be in the Configuration state.
		'''    NI 5600/5661-For signal bandwidths greater than 10 MHz, NIRFSA_VAL_wide is the only    value supported for this attribute.
		'''    NI 5601/5663/5663E- The NI 5601 does not support the NIRFSA_VAL_MEDIUM value.This attribute is not supported if you are using an external LO. 
		'''    Default Values: 
		'''    NI 5600-NIRFSA_VAL_WIDE 
		'''    NI 5601-NIRFSA_VAL_NARROW 
		'''    Supported Devices: NI 5600/5601 (external digitizer mode), NI 5661/5663/5663E        
		''' 
		''' </summary>
		Public Function GetDownconverterLoopBandwidth(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.DownconverterLoopBandwidth, channel, value)
		End Function
		''' <summary>
		'''The DriverSetup string is used to set the initial values for attributes that    are specific to NI-RFSA. The format of the DriverSetup string is:
		'''    Tag: Value
		'''    Tag is the name of the DriverSetup string attribute. Value is the value set to    the attribute. To set multiple attributes, separate their assignments with a    semicolon.
		'''    The DriverSetup string can include the following tags:
		'''    NI 5661/5663/5663E/5665-Digitizer-Specifies the resource name of the digitizer to use for    this session. If this Driver Setup tag is not specified, the resource name for the    downconverter associated in MAX is used. An example of a Driver Setup string    is DriverSetup=Digitizer:pxi1slot4. If you want to use the NI 5600/5601/5603 with an    external digitizer, use the following Driver Setup tag:    DriverSetup=Digitizer:<external></external>.
		'''    NI 5663/5663E/5665-LO source-Specifies the resource name of the LO source to use for this    session. If you want to use the NI 5601 with an LO other than the NI 5652 or use the    NI 5603 with an LO other than the NI 5653, use the following Driver Setup    tag: DriverSetup=LO:<external></external>.
		'''    Refer to the niRFSA_InitWithOptions function for additional information about the    optionString parameter. Refer to the getting started guide for your device for information    about configuring your device in MAX. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetDriverSetup(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.DriverSetup, channel, value)
		End Function

		''' <summary>
		'''Specifies whether fractional resampling is enabled on the digitizer. 
		'''    Dithering adds band-limited noise in the analog signal path to help reduce the    quantization effects of the A/D converter and improve spectral performance.    On the NI PXIe-5622, this out-of-band noise is added at low frequencies up to approximately 12 MHz.
		'''    When you enable dithering, the maximum signal level is reduced by up to 3 dB. This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore, you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal levels up to    +7 dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz, dithering should be disabled    to eliminate residual leakage of the dither signal into the lower frequencies of the IF passband, which    starts at 12.5 MHz and ends at 62.5 MHz. This leakage can slightly raise the noise floor in the lower    frequencies, thus degrading the performance in high-sensitivity applications. When taking spectral measurements,    this leakage can appear also as a wide, low-amplitude signal near 12.5 MHz and 62.5 MHz. The width and    amplitude of the signal depends on your resolution bandwidth and the type of time-domain window you apply to your FFT.
		'''    Default Value: VI_TRUE 
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetEnableFractionalResampling(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.EnableFractionalResampling, channel, value)
		End Function
		''' <summary>
		'''Specifies whether fractional resampling is enabled on the digitizer. 
		'''    Dithering adds band-limited noise in the analog signal path to help reduce the    quantization effects of the A/D converter and improve spectral performance.    On the NI PXIe-5622, this out-of-band noise is added at low frequencies up to approximately 12 MHz.
		'''    When you enable dithering, the maximum signal level is reduced by up to 3 dB. This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore, you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal levels up to    +7 dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz, dithering should be disabled    to eliminate residual leakage of the dither signal into the lower frequencies of the IF passband, which    starts at 12.5 MHz and ends at 62.5 MHz. This leakage can slightly raise the noise floor in the lower    frequencies, thus degrading the performance in high-sensitivity applications. When taking spectral measurements,    this leakage can appear also as a wide, low-amplitude signal near 12.5 MHz and 62.5 MHz. The width and    amplitude of the signal depends on your resolution bandwidth and the type of time-domain window you apply to your FFT.
		'''    Default Value: VI_TRUE 
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetEnableFractionalResampling(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.EnableFractionalResampling, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/EndOfRecordEvent, where DigitizerName is the name associated with your digitizer module in MAX.  
		'''    Supported Devices: NI 5663/5663E/5665   	 
		''' 
		''' </summary>
		Public Function GetEndOfRecordEventTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.EndOfRecordEventTerminalName, channel, value)
		End Function


		''' <summary>
		'''This attribute is not for customer use. 
		''' 
		''' </summary>
		<Obsolete("Use SetDigitalEdgeConfigurationListStepTriggerSource instead")> _
		Public Function SetReconfigurationTriggerSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ReconfigurationTriggerSource, channel, value)
		End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <Obsolete("Use GetDigitalEdgeConfigurationListStepTriggerSource instead")> _
		Public Function GetReconfigurationTriggerSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ReconfigurationTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the exported Advance trigger. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedAdvanceTriggerOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedAdvanceTriggerOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the exported Advance trigger. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedAdvanceTriggerOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedAdvanceTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the Done event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedDoneEventOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedDoneEventOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the Done event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedDoneEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedDoneEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the End of Record event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedEndOfRecordEventOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedEndOfRecordEventOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the End of Record event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedEndOfRecordEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedEndOfRecordEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the Ready for Advance event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedReadyForAdvanceEventOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedReadyForAdvanceEventOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the Ready for Advance event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedReadyForAdvanceEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedReadyForAdvanceEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the Ready for Reference event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedReadyForRefEventOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedReadyForRefEventOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the Ready for Reference event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedReadyForRefEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedReadyForRefEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the Ready for Start event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedReadyForStartEventOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedReadyForStartEventOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the Ready for Start event. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedReadyForStartEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedReadyForStartEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies a comma-separated list of the terminals at which to export the Reference clock. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedRefClockOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedRefClockOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies a comma-separated list of the terminals at which to export the Reference clock. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedRefClockOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedRefClockOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the exported Reference trigger. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedRefTriggerOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedRefTriggerOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the exported Reference trigger. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedRefTriggerOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedRefTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for the exported Start trigger.
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetExportedStartTriggerOutputTerminal(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.ExportedStartTriggerOutputTerminal, channel, value)
		End Function
		''' <summary>
		'''Specifies the destination terminal for the exported Start trigger.
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetExportedStartTriggerOutputTerminal(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ExportedStartTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the gain, in dB, of a switch (or cable) connected before the RF IN    connector of an NI-RFSA device. When you set this attribute, and the     NIRFSA_ATTR_ATTENUATION and NIRFSA_ATTR_IF_ATTENUATION values,    NI-RFSA calculates appropriate attenuator settings based on the value of this attribute    and the value of the NIRFSA_ATTR_REFERENCE_LEVEL attribute. In this case, NI-RFSA interprets    the reference level as the maximum expected power level of the signal at the input    of the external gain device. For more information about attenuation, refer to the    Attenuation and Signal Levels topic for your device in    the NI RF Vector Signal Analyzers Help. 
		'''    With this attribute set, NI-RFSA reads the NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_LEVEL    attribute value as the power level at the input of the external gain device at    which the NI-RFSA device should trigger.
		'''     Negative values indicate attenuation. The default value is 0. 
		'''    Valid Values: -INF to +INF 
		'''    Units: dB 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetExternalGain(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.ExternalGain, channel, value)
		End Function
		''' <summary>
		'''Specifies the gain, in dB, of a switch (or cable) connected before the RF IN    connector of an NI-RFSA device. When you set this attribute, and the     NIRFSA_ATTR_ATTENUATION and NIRFSA_ATTR_IF_ATTENUATION values,    NI-RFSA calculates appropriate attenuator settings based on the value of this attribute    and the value of the NIRFSA_ATTR_REFERENCE_LEVEL attribute. In this case, NI-RFSA interprets    the reference level as the maximum expected power level of the signal at the input    of the external gain device. For more information about attenuation, refer to the    Attenuation and Signal Levels topic for your device in    the NI RF Vector Signal Analyzers Help. 
		'''    With this attribute set, NI-RFSA reads the NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_LEVEL    attribute value as the power level at the input of the external gain device at    which the NI-RFSA device should trigger.
		'''     Negative values indicate attenuation. The default value is 0. 
		'''    Valid Values: -INF to +INF 
		'''    Units: dB 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetExternalGain(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.ExternalGain, channel, value)
		End Function

		''' <summary>
		'''Specifies the offset relative to the position specified by the    NIRFSA_ATTR_FETCH_RELATIVE_TO attribute from which to start fetching data.    Offset can be a positive or negative value. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function SetFetchOffset(channel As String, value As Long) As Integer
			Return Me.SetInt64(niRFSAProperties.FetchOffset, channel, value)
		End Function
		''' <summary>
		'''Specifies the offset relative to the position specified by the    NIRFSA_ATTR_FETCH_RELATIVE_TO attribute from which to start fetching data.    Offset can be a positive or negative value. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function GetFetchOffset(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.FetchOffset, channel, value)
		End Function

		''' <summary>
		'''Specifies the reference location within the acquired record from which to    begin fetching. 
		'''     Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetFetchRelativeTo(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.FetchRelativeTo, channel, value)
		End Function
		''' <summary>
		'''Specifies the reference location within the acquired record from which to    begin fetching. 
		'''     Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetFetchRelativeTo(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.FetchRelativeTo, channel, value)
		End Function

		''' <summary>
		'''Returns the size of the fast Fourier transform (FFT). 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetFftSize(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.FftSize, channel, value)
		End Function

		''' <summary>
		'''Returns the size of the window used in the fast Fourier transform (FFT). 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetFftWindowSize(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.FftWindowSize, channel, value)
		End Function

		''' <summary>
		'''Specifies the time-domain window type. 
		'''    Default Value: NIRFSA_VAL_7_TERM_BLACKMAN_HARRIS 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetFftWindowType(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.FftWindowType, channel, value)
		End Function
		''' <summary>
		'''Specifies the time-domain window type. 
		'''    Default Value: NIRFSA_VAL_7_TERM_BLACKMAN_HARRIS 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetFftWindowType(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.FftWindowType, channel, value)
		End Function

		''' <summary>
		'''Specifies the value used for LO frequency settling. The units and interpretation    for this scalar value are specified using the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS    attribute. This attribute is not supported if you are using an external LO. 
		'''    The valid values for this attribute depend on the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
		'''    Valid Values:
		'''    NIRFSA_VAL_FSU_TIME_AFTER_LOCK:
		'''    2 microseconds* to 80 milliseconds, resolution of approximately 2 microseconds (NI 5663/5663E)
		'''    4 microseconds to 80 milliseconds, resolution of approximately 4 microseconds (NI 5665) 
		'''    NIRFSA_VAL_FSU_TIME_AFTER_IO:
		'''    0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5663/5663E) 
		'''    0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5665) 
		'''    NIRFSA_VAL_FSU_PPM:
		'''    1.0, 0.1, 0.01(NI 5663/5663E) 
		'''    1.0, 0.1, 0.01 (NI 5665) 
		'''    *If the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute is set to NIRFSA_VAL_FSU_TIME_AFTER_LOCK and the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH     attribute is set to NIRFSA_VAL_NARROW, NI recommends a minimum settling time of 128 microseconds to ensure that the PLL lock stabilizes.    If the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH is set to NIRFSA_VAL_WIDE, NI recommends a minimum settling time of 16 microseconds. 
		'''    **When in RF list mode, the valid values for NIRFSA_VAL_FSU_TIME_AFTER_IO are 0 microseconds to 50 milliseconds. 
		'''    Default Value: 0.1 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetFrequencySettling(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.FrequencySettling, channel, value)
		End Function
		''' <summary>
		'''Specifies the value used for LO frequency settling. The units and interpretation    for this scalar value are specified using the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS    attribute. This attribute is not supported if you are using an external LO. 
		'''    The valid values for this attribute depend on the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
		'''    Valid Values:
		'''    NIRFSA_VAL_FSU_TIME_AFTER_LOCK:
		'''    2 microseconds* to 80 milliseconds, resolution of approximately 2 microseconds (NI 5663/5663E)
		'''    4 microseconds to 80 milliseconds, resolution of approximately 4 microseconds (NI 5665) 
		'''    NIRFSA_VAL_FSU_TIME_AFTER_IO:
		'''    0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5663/5663E) 
		'''    0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5665) 
		'''    NIRFSA_VAL_FSU_PPM:
		'''    1.0, 0.1, 0.01(NI 5663/5663E) 
		'''    1.0, 0.1, 0.01 (NI 5665) 
		'''    *If the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute is set to NIRFSA_VAL_FSU_TIME_AFTER_LOCK and the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH     attribute is set to NIRFSA_VAL_NARROW, NI recommends a minimum settling time of 128 microseconds to ensure that the PLL lock stabilizes.    If the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH is set to NIRFSA_VAL_WIDE, NI recommends a minimum settling time of 16 microseconds. 
		'''    **When in RF list mode, the valid values for NIRFSA_VAL_FSU_TIME_AFTER_IO are 0 microseconds to 50 milliseconds. 
		'''    Default Value: 0.1 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetFrequencySettling(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.FrequencySettling, channel, value)
		End Function

		''' <summary>
		'''Specifies the delay duration units and interpretation for LO settling. Specify    the actual settling value using the NIRFSA_ATTR_FREQUENCY_SETTLING attribute.    This attribute is not supported if you are using an external LO. 
		'''    Default Value: NIRFSA_VAL_FSU_PPM 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetFrequencySettlingUnits(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.FrequencySettlingUnits, channel, value)
		End Function
		''' <summary>
		'''Specifies the delay duration units and interpretation for LO settling. Specify    the actual settling value using the NIRFSA_ATTR_FREQUENCY_SETTLING attribute.    This attribute is not supported if you are using an external LO. 
		'''    Default Value: NIRFSA_VAL_FSU_PPM 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetFrequencySettlingUnits(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.FrequencySettlingUnits, channel, value)
		End Function

		''' <summary>
		'''Specifies the IF1 attenuation, in dB. The device IF1 attenuator is set to this nominal value.    Use this attribute, along with the NIRFSA_ATTR_IF2_ATTEN_VALUE attribute, when you    set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
		'''    Valid Values: 0 to 15 
		'''    Units: dB 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function SetIf1AttenValue(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.If1AttenValue, channel, value)
		End Function
		''' <summary>
		'''Specifies the IF1 attenuation, in dB. The device IF1 attenuator is set to this nominal value.    Use this attribute, along with the NIRFSA_ATTR_IF2_ATTEN_VALUE attribute, when you    set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
		'''    Valid Values: 0 to 15 
		'''    Units: dB 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function GetIf1AttenValue(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.If1AttenValue, channel, value)
		End Function

		''' <summary>
		'''Specifies the IF2 attenuation, in dB. The device IF2 attenuator is set to this nominal value.   Use this attribute, along with the NIRFSA_ATTR_IF1_ATTEN_VALUE attribute, when you   set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
		'''    Valid Values: 0 to 15 
		'''    Units: dB 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function SetIf2AttenValue(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.If2AttenValue, channel, value)
		End Function
		''' <summary>
		'''Specifies the IF2 attenuation, in dB. The device IF2 attenuator is set to this nominal value.   Use this attribute, along with the NIRFSA_ATTR_IF1_ATTEN_VALUE attribute, when you   set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
		'''    Valid Values: 0 to 15 
		'''    Units: dB 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function GetIf2AttenValue(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.If2AttenValue, channel, value)
		End Function

		''' <summary>
		'''Configures the device attenuation to a value that has the actual calibrated IF attenuation    closest to the desired value. 
		'''    Valid Values: 0 to 30 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function SetIfAttenuation(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IfAttenuation, channel, value)
		End Function
		''' <summary>
		'''Configures the device attenuation to a value that has the actual calibrated IF attenuation    closest to the desired value. 
		'''    Valid Values: 0 to 30 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function GetIfAttenuation(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IfAttenuation, channel, value)
		End Function


		''' <summary>
		'''Specifies the desired IF filter path, regardless of the RF band chosen by NI-RFSA.
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601        
		''' 
		''' </summary>
		Public Function SetIfFilter(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.IfFilter, channel, value)
		End Function
		''' <summary>
		'''Specifies the desired IF filter path, regardless of the RF band chosen by NI-RFSA.
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601        
		''' 
		''' </summary>
		Public Function GetIfFilter(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.IfFilter, channel, value)
		End Function

		''' <summary>
		'''Returns the center frequency of the IF output that corresponds to    the configured RF center frequency.
		'''    The downconverter translates RF input frequency to the IF output    frequency by mixing it with the LO signal.    The following values are the nominal values for the IF frequency:
		'''    NI 5600 15 MHz
		'''    NI 5601 53 MHz or 187.5 MHz
		'''    NI 5603 187.5 MHz or 199 MHz
		'''    However, the coarse nature of the LO settings can cause the    downconverter to be unable to tune to the exact    LO frequency that would produce the nominal IF output. Any coercion    in the actual LO frequency results in the    IF output frequency being slightly off from the nominal value.
		'''    Additionally, if you use the NIRFSA_ATTR_DOWNCONVERTER_CENTER_FREQUENCY    and NIRFSA_ATTR_LO_FREQUENCY attributes    to program the downconverter, then the IF output frequency could be very    different from the nominal value.    NI-RFSA adjusts the acquired spectrum or I/Q data for the difference between    nominal and actual IF output    frequency. If you use an external digitizer with the NI RF downconverter,    use this attribute to specify the    actual IF output frequency. 
		'''     Default Value: N/A 
		'''    Supported Devices:NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetIfOutputFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IfOutputFrequency, channel, value)
		End Function

		''' <summary>
		'''Specifies the level of the IF signal leaving the downconverter module, in dBm. Use this attribute to    increase or decrease the nominal IF signal output level to achieve better measurement results.    The default is -6dBm. 
		'''    You cannot set the NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at the same time. 
		'''    Units: dBm 
		'''    Default Value: -6 dBm 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
		''' 
		''' </summary>
		Public Function SetIfOutputPowerLevel(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IfOutputPowerLevel, channel, value)
		End Function
		''' <summary>
		'''Specifies the level of the IF signal leaving the downconverter module, in dBm. Use this attribute to    increase or decrease the nominal IF signal output level to achieve better measurement results.    The default is -6dBm. 
		'''    You cannot set the NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at the same time. 
		'''    Units: dBm 
		'''    Default Value: -6 dBm 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
		''' 
		''' </summary>
		Public Function GetIfOutputPowerLevel(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IfOutputPowerLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of dB by which to adjust the default IF output power level. This    attribute does    not depend on absolute IF output power levels, so you can use it to adjust    the IF output power level    on all NI-RFSA devices without knowing the exact default value. Use this attribute to increase or    decrease the nominal output level to achieve better measurement results. The    default value for the offset    is 0 dB, which results in an IF OUT output power level of -6 dBm. 
		'''    You cannot set the    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at    the same time. 
		'''    Units: dB 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
		''' 
		''' </summary>
		Public Function SetIfOutputPowerLevelOffset(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IfOutputPowerLevelOffset, channel, value)
		End Function
		''' <summary>
		'''Specifies the number of dB by which to adjust the default IF output power level. This    attribute does    not depend on absolute IF output power levels, so you can use it to adjust    the IF output power level    on all NI-RFSA devices without knowing the exact default value. Use this attribute to increase or    decrease the nominal output level to achieve better measurement results. The    default value for the offset    is 0 dB, which results in an IF OUT output power level of -6 dBm. 
		'''    You cannot set the    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at    the same time. 
		'''    Units: dB 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
		''' 
		''' </summary>
		Public Function GetIfOutputPowerLevelOffset(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IfOutputPowerLevelOffset, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the firmware revision information for the    NI-RFSA device you are currently using.
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetInstrumentFirmwareRevision(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.InstrumentFirmwareRevision, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the name of the manufacturer for the NI-RFSA device you are    currently using.
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetInstrumentManufacturer(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.InstrumentManufacturer, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the model number or name of the NI-RFSA    device that you are currently using.
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetInstrumentModel(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.InstrumentModel, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to perform interchangeability checking and retrieve    interchangeability warnings.
		'''    NOTE: Interchangeability check is unsupported.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: None         
		''' 
		''' </summary>
		Public Function SetInterchangeCheck(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.InterchangeCheck, channel, value)
		End Function
		''' <summary>
		'''Specifies whether to perform interchangeability checking and retrieve    interchangeability warnings.
		'''    NOTE: Interchangeability check is unsupported.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: None         
		''' 
		''' </summary>
		Public Function GetInterchangeCheck(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.InterchangeCheck, channel, value)
		End Function

		''' <summary>
		'''Indicates the resource name NI-RFSA uses to identify the physical device.    If you initialize NI-RFSA with a logical name, this attribute contains the resource    name that corresponds to the entry in the IVI Configuration Utility. 
		'''    If you initialize NI-RFSA with the resource name, this attribute    contains that value.
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetIoResourceDescriptor(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.IoResourceDescriptor, channel, value)
		End Function

		''' <summary>
		'''Specifies the expected carrier frequency of the incoming signal for demodulation. The    RF vector signal analyzer tunes to this frequency. NI-RFSA may coerce this value    based on hardware settings and the RF downconverter specifications. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 100 MHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetIqCarrierFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqCarrierFrequency, channel, value)
		End Function
		''' <summary>
		'''Specifies the expected carrier frequency of the incoming signal for demodulation. The    RF vector signal analyzer tunes to this frequency. NI-RFSA may coerce this value    based on hardware settings and the RF downconverter specifications. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 100 MHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetIqCarrierFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqCarrierFrequency, channel, value)
		End Function

		''' <summary>
		'''Specifies the power level, in dBm, at which the device triggers. The device    asserts the trigger when the signal crosses the level specified by the value    of this attribute, taking into consideration the specified slope. If you are    using external gain, refer to the NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information    about how this attribute affects the I/Q power edge trigger level. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetIqPowerEdgeRefTriggerLevel(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqPowerEdgeRefTriggerLevel, channel, value)
		End Function
		''' <summary>
		'''Specifies the power level, in dBm, at which the device triggers. The device    asserts the trigger when the signal crosses the level specified by the value    of this attribute, taking into consideration the specified slope. If you are    using external gain, refer to the NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information    about how this attribute affects the I/Q power edge trigger level. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetIqPowerEdgeRefTriggerLevel(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqPowerEdgeRefTriggerLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the device asserts the trigger when the signal power is rising or    falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to    NIRFSA_VAL_IQ_POWER_EDGE, the device asserts the trigger when the signal power exceeds    the specified level with the slope you specify. 
		'''    Default Value: NIRFSA_VAL_RISING_SLOPE 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetIqPowerEdgeRefTriggerSlope(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.IqPowerEdgeRefTriggerSlope, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the device asserts the trigger when the signal power is rising or    falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to    NIRFSA_VAL_IQ_POWER_EDGE, the device asserts the trigger when the signal power exceeds    the specified level with the slope you specify. 
		'''    Default Value: NIRFSA_VAL_RISING_SLOPE 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetIqPowerEdgeRefTriggerSlope(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.IqPowerEdgeRefTriggerSlope, channel, value)
		End Function

		''' <summary>
		'''Specifies the channel from which the device monitors the trigger. NI-RFSA    currently supports only 0    as the value of this attribute. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function SetIqPowerEdgeRefTriggerSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.IqPowerEdgeRefTriggerSource, channel, value)
		End Function
		''' <summary>
		'''Specifies the channel from which the device monitors the trigger. NI-RFSA    currently supports only 0    as the value of this attribute. 
		'''    Default Value: 
		''' 
		''' </summary>
		Public Function GetIqPowerEdgeRefTriggerSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.IqPowerEdgeRefTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the I/Q rate for the acquisition The value is expressed in samples per second (S/s). 
		'''    Refer to the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute for more information about device specific instantaneous    bandwidth limits. You can also refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth device specifications.
		'''    NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default. At I/Q rates above 50 MS/s, the dither noise can affect    phase coherency performance and leak into the lower frequencies and the upper frequencies of the IF passband.    Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more information about dithering. 
		'''    For the NI 5663/5663E/5665, when you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to NIRFSA_VAL_ONBOARD_CLOCK_STR, the downconverter instantaneous bandwidth is greater than or equal to the    coerced I/Q rate times 0.8. For the NI 5665, the actual signal bandwidth is further limited by the combination of the    chosen IF filter and anti-aliasing filter.
		'''    NI 5661-You should not need to configure an I/Q rate higher than 25 megasamples per second (MS/s) because    the NI 5600 RF downconverter bandwidth is 20 MHz. If you configure a higher I/Q rate, you may see aliasing    effects at negative frequencies because the IF frequency of the NI 5600 is 15 MHz.
		'''    NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the I/Q carrier frequency you use.    Refer to the NI 5601 RF downconverter overview for more information about instantaneous bandwidth. 
		'''    NI 5665-Your maximum allowed instantaneous bandwidth depends on the downconverter center frequency if you have enabled the preselector (YIG-tuned filter). 
		'''    Units: S/s 
		'''    Default Value: 1 MHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetIqRate(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.IqRate, channel, value)
		End Function
		''' <summary>
		'''Specifies the I/Q rate for the acquisition The value is expressed in samples per second (S/s). 
		'''    Refer to the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute for more information about device specific instantaneous    bandwidth limits. You can also refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth device specifications.
		'''    NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default. At I/Q rates above 50 MS/s, the dither noise can affect    phase coherency performance and leak into the lower frequencies and the upper frequencies of the IF passband.    Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more information about dithering. 
		'''    For the NI 5663/5663E/5665, when you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to NIRFSA_VAL_ONBOARD_CLOCK_STR, the downconverter instantaneous bandwidth is greater than or equal to the    coerced I/Q rate times 0.8. For the NI 5665, the actual signal bandwidth is further limited by the combination of the    chosen IF filter and anti-aliasing filter.
		'''    NI 5661-You should not need to configure an I/Q rate higher than 25 megasamples per second (MS/s) because    the NI 5600 RF downconverter bandwidth is 20 MHz. If you configure a higher I/Q rate, you may see aliasing    effects at negative frequencies because the IF frequency of the NI 5600 is 15 MHz.
		'''    NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the I/Q carrier frequency you use.    Refer to the NI 5601 RF downconverter overview for more information about instantaneous bandwidth. 
		'''    NI 5665-Your maximum allowed instantaneous bandwidth depends on the downconverter center frequency if you have enabled the preselector (YIG-tuned filter). 
		'''    Units: S/s 
		'''    Default Value: 1 MHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetIqRate(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.IqRate, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to enable the LO OUT terminals on the NI 5603/5605 RF downconverter.
		'''    By default, the LO OUT terminals are not enabled. If you want to daisy-chain multiple    devices together    using the same LO source, set this attribute to VI_TRUE to export the LO input    signals on the LO1, LO2,    and LO3 terminals to LO1 OUT, LO2 OUT, and LO3 OUT, respectively. 
		'''     NOTE: For the NI 5601, the only valid value for this property is VI_TRUE.
		'''    Default Values: 
		'''    NI 5601-VI_TRUE 
		'''    NI 5603/5605-VI_FALSE  
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5665        
		''' 
		''' </summary>
		Public Function SetLoExportEnabled(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.LoExportEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether to enable the LO OUT terminals on the NI 5603/5605 RF downconverter.
		'''    By default, the LO OUT terminals are not enabled. If you want to daisy-chain multiple    devices together    using the same LO source, set this attribute to VI_TRUE to export the LO input    signals on the LO1, LO2,    and LO3 terminals to LO1 OUT, LO2 OUT, and LO3 OUT, respectively. 
		'''     NOTE: For the NI 5601, the only valid value for this property is VI_TRUE.
		'''    Default Values: 
		'''    NI 5601-VI_TRUE 
		'''    NI 5603/5605-VI_FALSE  
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5665        
		''' 
		''' </summary>
		Public Function GetLoExportEnabled(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.LoExportEnabled, channel, value)
		End Function

		''' <summary>
		'''Returns the LO signal frequency for the configured center frequency.
		'''    If you are using the NI RF vector signal analyzer with an external LO, use this    attribute to specify    the LO frequency that the external LO source passes into the LO IN or LO IN1 connector, located    on the RF downconverter front panel. If you are using an external LO, reading the value of this    attribute after configuring the rest of the parameters returns the LO frequency needed    by the device. 
		'''    Set this attribute to the actual LO frequency because NI-RFSA corrects    for any difference between expected and actual LO frequencies. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetLoFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.LoFrequency, channel, value)
		End Function
		''' <summary>
		'''Returns the LO signal frequency for the configured center frequency.
		'''    If you are using the NI RF vector signal analyzer with an external LO, use this    attribute to specify    the LO frequency that the external LO source passes into the LO IN or LO IN1 connector, located    on the RF downconverter front panel. If you are using an external LO, reading the value of this    attribute after configuring the rest of the parameters returns the LO frequency needed    by the device. 
		'''    Set this attribute to the actual LO frequency because NI-RFSA corrects    for any difference between expected and actual LO frequencies. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetLoFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.LoFrequency, channel, value)
		End Function

		''' <summary>
		'''Contains the logical name you specified when opening the current IVI session. You may pass    a logical name to the niRFSA_init function or the niRFSA_InitWithOptions function.    The IVI Configuration Utility must contain an entry for the logical name. The logical name    entry refers to a driver session section in the IVI Configuration file. The driver    session section specifies a physical device and initial user options. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetLogicalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.LogicalName, channel, value)
		End Function

		''' <summary>
		'''Specifies the LO injection side.
		'''    NI 5601/5663/5663E-For frequencies below 517.5 MHz or above 6.4125 GHz, the LO    injection side is fixed and NI-RFSA returns an error if you specify the incorrect value.    If you do not configure this attribute, NI-RFSA selects the default LO injection side    based on the downconverter center frequency. Reset this attribute to    return to automatic behavior. 
		'''    NI 5603/5605/5665 (3.6 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is not    supported for this device.   NI 5605/5665 (14 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is supported for this device for frequencies    greater than 4 GHz, but this configuration is not calibrated, and device specifications are not guaranteed. 
		'''    Default Values:
		'''    NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &lt; 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE
		'''    NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &gt;= 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_LOW_SIDE 
		'''    NI 5603/5605 (external digitizer mode), NI 5665-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE  
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetLoInjectionSide(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.LoInjectionSide, channel, value)
		End Function
		''' <summary>
		'''Specifies the LO injection side.
		'''    NI 5601/5663/5663E-For frequencies below 517.5 MHz or above 6.4125 GHz, the LO    injection side is fixed and NI-RFSA returns an error if you specify the incorrect value.    If you do not configure this attribute, NI-RFSA selects the default LO injection side    based on the downconverter center frequency. Reset this attribute to    return to automatic behavior. 
		'''    NI 5603/5605/5665 (3.6 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is not    supported for this device.   NI 5605/5665 (14 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is supported for this device for frequencies    greater than 4 GHz, but this configuration is not calibrated, and device specifications are not guaranteed. 
		'''    Default Values:
		'''    NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &lt; 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE
		'''    NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &gt;= 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_LOW_SIDE 
		'''    NI 5603/5605 (external digitizer mode), NI 5665-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE  
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetLoInjectionSide(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.LoInjectionSide, channel, value)
		End Function

		''' <summary>
		'''Returns the current temperature, in degrees Celsius, of the LO module.    This attribute is not supported if    you are using an external LO. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetLoTemperature(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.LoTemperature, channel, value)
		End Function

		''' <summary>
		'''Adjusts the dynamics of the current driving the YIG main coil.
		'''    NOTE: Setting this attribute to NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_FAST allows the    frequency to settle significantly faster for some frequency transitions at the    expense of increased phase noise. This attribute is not supported if you are    using an external LO. 
		'''    Default Value: NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_NORMAL  
		'''    Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
		''' 
		''' </summary>
		Public Function SetLoYigMainCoilDrive(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.LoYigMainCoilDrive, channel, value)
		End Function
		''' <summary>
		'''Adjusts the dynamics of the current driving the YIG main coil.
		'''    NOTE: Setting this attribute to NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_FAST allows the    frequency to settle significantly faster for some frequency transitions at the    expense of increased phase noise. This attribute is not supported if you are    using an external LO. 
		'''    Default Value: NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_NORMAL  
		'''    Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
		''' 
		''' </summary>
		Public Function GetLoYigMainCoilDrive(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.LoYigMainCoilDrive, channel, value)
		End Function

		''' <summary>
		'''Specifies the level of mechanical attenuation for the RF path, in dB.
		'''    Units: dB 
		'''    Valid Values:
		'''    NI 5600-0, 10, 20, 30, 40, 50 
		'''    NI 5601-0, 16 
		'''    NI 5603-0, 10, 20, 30 
		'''    NI 5605-0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetMechanicalAttenuation(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.MechanicalAttenuation, channel, value)
		End Function
		''' <summary>
		'''Specifies the level of mechanical attenuation for the RF path, in dB.
		'''    Units: dB 
		'''    Valid Values:
		'''    NI 5600-0, 10, 20, 30, 40, 50 
		'''    NI 5601-0, 16 
		'''    NI 5603-0, 10, 20, 30 
		'''    NI 5605-0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetMechanicalAttenuation(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.MechanicalAttenuation, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the mechanical attenuator is enabled. Set this attribute to NIRFSA_VAL_ENABLED to use the mechanical atteuator.
		'''    Disabling this attenuator can improve device performance. Refer to the NI 5663/5663E    RF Attenuation and Signal Levels for more information about the attenuators. 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function SetMechanicalAttenuatorEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.MechanicalAttenuatorEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the mechanical attenuator is enabled. Set this attribute to NIRFSA_VAL_ENABLED to use the mechanical atteuator.
		'''    Disabling this attenuator can improve device performance. Refer to the NI 5663/5663E    RF Attenuation and Signal Levels for more information about the attenuators. 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function GetMechanicalAttenuatorEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.MechanicalAttenuatorEnabled, channel, value)
		End Function

		''' <summary>
		'''Returns the digitizer onboard memory in bytes. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5661/5663/5663E/5665       
		''' 
		''' </summary>
		Public Function GetMemorySize(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.MemorySize, channel, value)
		End Function

		''' <summary>
		'''Specifies the minimum adjacent channel power ratio (ACPR), in dB, relative to the main channel reference level.    This attribute configures NI-RFSA to optimize downconverter gain to measure a lower power adjacent channel, adding    gain only after filtering the main channel. The gain NI-RFSA applies is always less than or equal to the ACPR value you specify.     NOTE: For the NI 5665 (3.6 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH or NIRFSA_ATTR_SPECTRUM_SPAN    attribute to a value less than 300 kHz. For the NI 5665 (14 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH    or NIRFSA_ATTR_SPECTRUM_SPAN attribute to a value less than 300 kHz by using the 300 kHz IF filter, or to a value    between 300 kHz and 5 MHz by using the 5 MHz IF filter. 
		'''    NI-RFSA coerces this attribute to zero for the NI 5600/5601. For all other devices, read the coerced value    of this attribute to determine the actual amount of gain applied. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetMinimumAcpr(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.MinimumAcpr, channel, value)
		End Function
		''' <summary>
		'''Specifies the minimum adjacent channel power ratio (ACPR), in dB, relative to the main channel reference level.    This attribute configures NI-RFSA to optimize downconverter gain to measure a lower power adjacent channel, adding    gain only after filtering the main channel. The gain NI-RFSA applies is always less than or equal to the ACPR value you specify.     NOTE: For the NI 5665 (3.6 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH or NIRFSA_ATTR_SPECTRUM_SPAN    attribute to a value less than 300 kHz. For the NI 5665 (14 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH    or NIRFSA_ATTR_SPECTRUM_SPAN attribute to a value less than 300 kHz by using the 300 kHz IF filter, or to a value    between 300 kHz and 5 MHz by using the 5 MHz IF filter. 
		'''    NI-RFSA coerces this attribute to zero for the NI 5600/5601. For all other devices, read the coerced value    of this attribute to determine the actual amount of gain applied. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetMinimumAcpr(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.MinimumAcpr, channel, value)
		End Function

		''' <summary>
		'''Specifies the mixer level, in dBm. The mixer level represents the attenuation value to apply to    the input RF signal as it reaches the first mixer in the signal chain.    NI-RFSA automatically selects    an optimal mixer level value given the reference level if you do not configure this attribute.    You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes    at the same time. 
		'''     NOTE: This attribute is read-only for the NI 5601/5663/5663E. It is read/write for all other supported devices.   Default Values: 
		'''    NI 5600: -30 
		'''    NI 5601: N/A 
		'''    NI 5603/5605: -10 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetMixerLevel(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.MixerLevel, channel, value)
		End Function
		''' <summary>
		'''Specifies the mixer level, in dBm. The mixer level represents the attenuation value to apply to    the input RF signal as it reaches the first mixer in the signal chain.    NI-RFSA automatically selects    an optimal mixer level value given the reference level if you do not configure this attribute.    You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes    at the same time. 
		'''     NOTE: This attribute is read-only for the NI 5601/5663/5663E. It is read/write for all other supported devices.   Default Values: 
		'''    NI 5600: -30 
		'''    NI 5601: N/A 
		'''    NI 5603/5605: -10 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetMixerLevel(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.MixerLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of dB by which to adjust the device mixer level. The default value    is 0 which specifies device settings that are the best compromise between    distortion and noise.    Specifying a positive value for this attribute configures the device for moderate distortion and    low noise, and specifying a negative value results in low distortion and higher noise. 
		'''     You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes at    the same time. 
		'''    Units: dB    Default Value: 0 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode); NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetMixerLevelOffset(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.MixerLevelOffset, channel, value)
		End Function
		''' <summary>
		'''Specifies the number of dB by which to adjust the device mixer level. The default value    is 0 which specifies device settings that are the best compromise between    distortion and noise.    Specifying a positive value for this attribute configures the device for moderate distortion and    low noise, and specifying a negative value results in low distortion and higher noise. 
		'''     You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes at    the same time. 
		'''    Units: dB    Default Value: 0 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode); NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetMixerLevelOffset(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.MixerLevelOffset, channel, value)
		End Function

		''' <summary>
		'''Returns the revision of the RF downconverter module.
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetModuleRevision(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ModuleRevision, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of records to acquire if the    NIRFSA_ATTR_NUM_RECORDS_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetNumberOfRecords(channel As String, value As Long) As Integer
			Return Me.SetInt64(niRFSAProperties.NumberOfRecords, channel, value)
		End Function
		''' <summary>
		'''Specifies the number of records to acquire if the    NIRFSA_ATTR_NUM_RECORDS_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetNumberOfRecords(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.NumberOfRecords, channel, value)
		End Function

		''' <summary>
		'''Configures the device to stop after acquiring the specified number of records    or to acquire records continuously.   Default Value: VI_TRUE 
		'''    Supported Devices: NI 5661/5663/5663E/5665          
		''' 
		''' </summary>
		Public Function SetNumberOfRecordsIsFinite(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.NumberOfRecordsIsFinite, channel, value)
		End Function
		''' <summary>
		'''Configures the device to stop after acquiring the specified number of records    or to acquire records continuously.   Default Value: VI_TRUE 
		'''    Supported Devices: NI 5661/5663/5663E/5665          
		''' 
		''' </summary>
		Public Function GetNumberOfRecordsIsFinite(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.NumberOfRecordsIsFinite, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of samples to acquire. This attribute is only valid if the    NIRFSA_ATTR_NUM_SAMPLES_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1,000  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetNumberOfSamples(channel As String, value As Long) As Integer
			Return Me.SetInt64(niRFSAProperties.NumberOfSamples, channel, value)
		End Function
		''' <summary>
		'''Specifies the number of samples to acquire. This attribute is only valid if the    NIRFSA_ATTR_NUM_SAMPLES_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1,000  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetNumberOfSamples(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.NumberOfSamples, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the device acquires a finite number of samples or acquires continuously.   Default Value: VI_TRUE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetNumberOfSamplesIsFinite(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.NumberOfSamplesIsFinite, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the device acquires a finite number of samples or acquires continuously.   Default Value: VI_TRUE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetNumberOfSamplesIsFinite(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.NumberOfSamplesIsFinite, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of spectral lines expected with the current power spectrum configuration.    If you do not configure this attribute, NI-RFSA selects an appropriate value based on    the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute. If you configure this attribute,    NI-RFSA coerces the NIRFSA_ATTR_RESOLUTION_BANDWIDTH value based on the number of    spectral lines requested and the value of the NIRFSA_ATTR_SPECTRUM_SPAN attribute. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetNumberOfSpectralLines(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.NumberOfSpectralLines, channel, value)
		End Function
		''' <summary>
		'''Specifies the number of spectral lines expected with the current power spectrum configuration.    If you do not configure this attribute, NI-RFSA selects an appropriate value based on    the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute. If you configure this attribute,    NI-RFSA coerces the NIRFSA_ATTR_RESOLUTION_BANDWIDTH value based on the number of    spectral lines requested and the value of the NIRFSA_ATTR_SPECTRUM_SPAN attribute. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetNumberOfSpectralLinesAttribute(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.NumberOfSpectralLines, channel, value)
		End Function

		''' <summary>
		'''Specifies the scaling factor applied to the time-domain voltage data in the IF digitizer. Use this attribute to maximize     the dynamic range of the digitizer by increasing the maximum IF power the ADC can measure without creating OSP overflows.     Because of the device amplitude response, some wide band signals normally attenuated by the signal analyzer go through the    IF digitizer without causing an ADC overflow warning. During IF equalization, these wide band digitizer input signals may become    mathematically amplified. These amplified input signal values overflow the available numeric range used in the signal processing algorithm.     You can use this attribute when OSP calculations would generate an overflow while applying digital filters to the data.    The OSP module in the digitizer multiplies the time-domain signal amplitude, in volts, by the specified attribute value before    further onboard processing. Set this attribute to a value less than 1 to avoid OSP overflow for near full-scale IF signals and to    use the maximum dynamic range of the digitizer. NI-RFSA compensates for the specified OSP data scaling factor to ensure that the    correct scaled data, in absolute levels, is always returned regardless of the value of this attribute. 
		'''    Valid Values: 0.25 to 1.0 
		'''    Default Values:
		'''    NI 5661/5663/5663E/5665 (3.6 GHz): 1.0 
		'''    NI 5665 (14 GHz): 0.8 
		'''    Supported Devices: NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function SetOspDataScalingFactor(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.OspDataScalingFactor, channel, value)
		End Function
		''' <summary>
		'''Specifies the scaling factor applied to the time-domain voltage data in the IF digitizer. Use this attribute to maximize     the dynamic range of the digitizer by increasing the maximum IF power the ADC can measure without creating OSP overflows.     Because of the device amplitude response, some wide band signals normally attenuated by the signal analyzer go through the    IF digitizer without causing an ADC overflow warning. During IF equalization, these wide band digitizer input signals may become    mathematically amplified. These amplified input signal values overflow the available numeric range used in the signal processing algorithm.     You can use this attribute when OSP calculations would generate an overflow while applying digital filters to the data.    The OSP module in the digitizer multiplies the time-domain signal amplitude, in volts, by the specified attribute value before    further onboard processing. Set this attribute to a value less than 1 to avoid OSP overflow for near full-scale IF signals and to    use the maximum dynamic range of the digitizer. NI-RFSA compensates for the specified OSP data scaling factor to ensure that the    correct scaled data, in absolute levels, is always returned regardless of the value of this attribute. 
		'''    Valid Values: 0.25 to 1.0 
		'''    Default Values:
		'''    NI 5661/5663/5663E/5665 (3.6 GHz): 1.0 
		'''    NI 5665 (14 GHz): 0.8 
		'''    Supported Devices: NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function GetOspDataScalingFactor(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.OspDataScalingFactor, channel, value)
		End Function

		''' <summary>
		'''Specifies whether peer-to-peer streaming is enabled for the active stream endpoint.
		'''    This attribute is endpoint based. 
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetP2pEnabled(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.P2pEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether peer-to-peer streaming is enabled for the active stream endpoint.
		'''    This attribute is endpoint based. 
		'''    Default Value: VI_FALSE 
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetP2pEnabled(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.P2pEnabled, channel, value)
		End Function

		''' <summary>
		'''Indicates whether the endpoint has overflowed. An overflow condition occurs when data    is written to the endpoint faster than it can be streamed from it. During an overflow,    data in the endpoint begins to be overwritten. Reset the device or close the session to    reset the overflow condition. 
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetP2pEndpointOverflow(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.P2pEndpointOverflow, channel, value)
		End Function

		''' <summary>
		'''Returns the size, in samples, of the peer-to-peer endpoint.
		'''     Default Value: 0 
		'''    Supported Devices: NI 5663/5663E/5665         
		''' 
		''' </summary>
		Public Function GetP2pEndpointSize(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.P2pEndpointSize, channel, value)
		End Function

		''' <summary>
		'''Returns the number of peer-to-peer streams supported by the device. 
		'''    Default Value: 0  
		'''    Supported Devices: NI 5663/5663E/5665         
		''' 
		''' </summary>
		Public Function GetP2pFifoEndpointCount(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.P2pFifoEndpointCount, channel, value)
		End Function

		''' <summary>
		'''Returns the largest number of complex samples available in the peer-to-peer endpoint since this    attribute was last read. 
		'''    Default Value: 0  
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetP2pMostSamplesAvailableInEndpoint(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.P2pMostSamplesAvailableInEndpoint, channel, value)
		End Function

		''' <summary>
		'''Specifies whether a limit is placed on the number of records and the size of the records by    the size of the device onboard memory. When a peer-to-peer stream is enabled and onboard memory    is disabled, any fetch calls result in an error. 
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetP2pOnboardMemoryEnabled(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.P2pOnboardMemoryEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether a limit is placed on the number of records and the size of the records by    the size of the device onboard memory. When a peer-to-peer stream is enabled and onboard memory    is disabled, any fetch calls result in an error. 
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetP2pOnboardMemoryEnabled(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.P2pOnboardMemoryEnabled, channel, value)
		End Function

		''' <summary>
		'''Returns the current number of complex samples available in the peer-to-peer endpoint.
		'''    NOTE: The complex samples are composed of two 16-bit words, with the I data as the LSB. 
		'''    Default Value: 0  
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetP2pSamplesAvailableInEndpoint(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.P2pSamplesAvailableInEndpoint, channel, value)
		End Function

		''' <summary>
		'''Returns the number of complex samples transferred through the peer-to-peer stream endpoint    since the endpoint was last reset. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetP2pSamplesTransferred(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.P2pSamplesTransferred, channel, value)
		End Function

		''' <summary>
		'''Specifies the offset to apply to the initial I and Q phases.
		'''    Valid Values: -180 to 180 
		'''    Default Value: 0  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetPhaseOffset(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.PhaseOffset, channel, value)
		End Function
		''' <summary>
		'''Specifies the offset to apply to the initial I and Q phases.
		'''    Valid Values: -180 to 180 
		'''    Default Value: 0  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetPhaseOffset(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.PhaseOffset, channel, value)
		End Function

		''' <summary>
		'''Specifies the units of the power spectrum. 
		'''    Default Value: NIRFSA_VAL_DBM  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetPowerSpectrumUnits(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.PowerSpectrumUnits, channel, value)
		End Function
		''' <summary>
		'''Specifies the units of the power spectrum. 
		'''    Default Value: NIRFSA_VAL_DBM  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetPowerSpectrumUnits(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.PowerSpectrumUnits, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the preselector is enabled on the downconverter. 
		'''    NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
		'''    Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
		'''    NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		<Obsolete("use DownconvertorPreselectorEnabled instead")> _
		Public Function SetPreselectorEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.PreselectorEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the preselector is enabled on the downconverter. 
		'''    NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
		'''    Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
		'''    NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		<Obsolete("use DownconvertorPreselectorEnabled instead")> _
		Public Function GetPreselectorEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.PreselectorEnabled, channel, value)
		End Function


		''' <summary>
		'''Specifies whether the preselector is enabled on the downconverter. 
		'''    NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
		'''    Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
		'''    NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetDownconvertorPreselectorEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.DownconvertorPreselectorEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the preselector is enabled on the downconverter. 
		'''    NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
		'''    Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
		'''    NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetDownconvertorPreselectorEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.DownconvertorPreselectorEnabled, channel, value)
		End Function

		''' <summary>
		'''Returns whether a preselector is available on the RF downconverter module. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetPreselectorPresent(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.PreselectorPresent, channel, value)
		End Function

		''' <summary>
		'''Specifies the signal to drive the 10 MHz Reference clock on the PXI    backplane. This option can be configured only when the NI 5600 is installed in    Slot 2 of the PXI chassis. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600 (external digitizer mode), NI 5661        
		''' 
		''' </summary>
		Public Function SetPxiChassisClk10Source(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.PxiChassisClk10Source, channel, value)
		End Function
		''' <summary>
		'''Specifies the signal to drive the 10 MHz Reference clock on the PXI    backplane. This option can be configured only when the NI 5600 is installed in    Slot 2 of the PXI chassis. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600 (external digitizer mode), NI 5661        
		''' 
		''' </summary>
		Public Function GetPxiChassisClk10Source(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.PxiChassisClk10Source, channel, value)
		End Function

		''' <summary>
		'''Specifies whether NI-RFSA queries the NI-RFSA device status after each operation. Querying    the device status is useful for debugging. After you validate your program, you can set    this attribute to VI_FALSE to disable status checking and maximize performance. 
		'''    NI-RFSA can choose to ignore status checking for    particular attributes, regardless of the setting of this attribute.
		'''    NOTE: Use niRFSA_InitWithOptions function to override this value.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetQueryInstrumentStatus(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.QueryInstrumentStatus, channel, value)
		End Function
		''' <summary>
		'''Specifies whether NI-RFSA queries the NI-RFSA device status after each operation. Querying    the device status is useful for debugging. After you validate your program, you can set    this attribute to VI_FALSE to disable status checking and maximize performance. 
		'''    NI-RFSA can choose to ignore status checking for    particular attributes, regardless of the setting of this attribute.
		'''    NOTE: Use niRFSA_InitWithOptions function to override this value.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetQueryInstrumentStatus(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.QueryInstrumentStatus, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to validate attribute values and function parameters.    If enabled, NI-RFSA validates the parameter values that you    pass to NI-RFSA functions. Range checking parameters is very useful for    debugging. After you validate your program, you can set this attribute to    VI_FALSE to disable range checking and maximize performance.
		'''    NOTE: Use niRFSA_InitWithOptions function to override this value.
		'''    Default Value: VI_TRUE 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRangeCheck(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.RangeCheck, channel, value)
		End Function
		''' <summary>
		'''Specifies whether to validate attribute values and function parameters.    If enabled, NI-RFSA validates the parameter values that you    pass to NI-RFSA functions. Range checking parameters is very useful for    debugging. After you validate your program, you can set this attribute to    VI_FALSE to disable range checking and maximize performance.
		'''    NOTE: Use niRFSA_InitWithOptions function to override this value.
		'''    Default Value: VI_TRUE 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRangeCheck(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.RangeCheck, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/ReadyForAdvanceEvent, where DigitizerName is the name associated with your digitizer module in MAX. 
		'''    Supported Devices: NI 5663/5663E/5665    	 
		''' 
		''' </summary>
		Public Function GetReadyForAdvanceEventTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ReadyForAdvanceEventTerminalName, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/ReadyForReferenceEvent, where DigitizerName is the name associated with your digitizer module in MAX. 
		'''    Supported Devices: NI 5663/5663E/5665   	 
		''' 
		''' </summary>
		Public Function GetReadyForRefEventTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ReadyForRefEventTerminalName, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/ReadyForStartEvent, where DigitizerName is the name associated with your digitizer module in MAX. 
		'''    Supported Devices: NI 5663/5663E/5665    	 
		''' 
		''' </summary>
		Public Function GetReadyForStartEventTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.ReadyForStartEventTerminalName, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the IVI engine keeps a list of the value coercions it    makes for integer and real type attributes.
		'''    NOTE: This attribute is currently not supported.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: None        
		''' 
		''' </summary>
		Public Function SetRecordCoercions(channel As String, value As Boolean) As Integer
			Return Me.SetBoolean(niRFSAProperties.RecordCoercions, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the IVI engine keeps a list of the value coercions it    makes for integer and real type attributes.
		'''    NOTE: This attribute is currently not supported.
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: None        
		''' 
		''' </summary>
		Public Function GetRecordCoercions(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.RecordCoercions, channel, value)
		End Function

		''' <summary>
		'''Returns the number of records the RF vector signal analyzer has acquired. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRecordsDone(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RecordsDone, channel, value)
		End Function

		''' <summary>
		'''Specifies the Reference clock rate, in hertz (Hz). 
		'''    Valid Values: 
		'''    NI 5601/5663/5663E- 10 MHz 
		'''    NI 5603/5605/5665- 5 MHz to 100 MHz, in increments of 1 MHz 
		'''    Default Value: 10 MHz  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRefClockRate(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.RefClockRate, channel, value)
		End Function
		''' <summary>
		'''Specifies the Reference clock rate, in hertz (Hz). 
		'''    Valid Values: 
		'''    NI 5601/5663/5663E- 10 MHz 
		'''    NI 5603/5605/5665- 5 MHz to 100 MHz, in increments of 1 MHz 
		'''    Default Value: 10 MHz  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRefClockRate(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.RefClockRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the Reference clock source. 
		'''    Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function SetRefClockSource(channel As String, value As String) As Integer
			Return Me.SetString(niRFSAProperties.RefClockSource, channel, value)
		End Function
		''' <summary>
		'''Specifies the Reference clock source. 
		'''    Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function GetRefClockSource(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.RefClockSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the reference level, in dBm. The reference level represents    the maximum expected power of an input RF signal. Refer to the    NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information about how configuring    an external gain and a reference level affect attenuation. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetReferenceLevel(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.ReferenceLevel, channel, value)
		End Function
		''' <summary>
		'''Specifies the reference level, in dBm. The reference level represents    the maximum expected power of an input RF signal. Refer to the    NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information about how configuring    an external gain and a reference level affect attenuation. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetReferenceLevel(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.ReferenceLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies the minimum time, in seconds, that must elapse between Reference triggers of    two records. The device does not recognize the Reference trigger of the next record    before this minimum time elapses. 
		'''    Units: seconds 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRefToRefTriggerHoldoff(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.RefToRefTriggerHoldoff, channel, value)
		End Function
		''' <summary>
		'''Specifies the minimum time, in seconds, that must elapse between Reference triggers of    two records. The device does not recognize the Reference trigger of the next record    before this minimum time elapses. 
		'''    Units: seconds 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRefToRefTriggerHoldoff(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.RefToRefTriggerHoldoff, channel, value)
		End Function

		''' <summary>
		'''Specifies the trigger delay time, in seconds. The trigger delay time is the    length of time the IF digitizer waits after it receives the trigger    before it asserts the Reference event. 
		'''    Units: seconds 
		'''    Default Value: 0  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRefTriggerDelay(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.RefTriggerDelay, channel, value)
		End Function
		''' <summary>
		'''Specifies the trigger delay time, in seconds. The trigger delay time is the    length of time the IF digitizer waits after it receives the trigger    before it asserts the Reference event. 
		'''    Units: seconds 
		'''    Default Value: 0  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRefTriggerDelay(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.RefTriggerDelay, channel, value)
		End Function

		''' <summary>
		'''Specifies a time duration, in seconds, for which the signal must be quiet    before the device arms the trigger. The signal is quiet when it is below the    trigger level if the trigger slope, specified by the    NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_SLOPE attribute, is set to    NIRFSA_VAL_RISING_SLOPE or above the trigger level if the trigger slope is    set to NIRFSA_VAL_FALLING_SLOPE.
		'''    By default this value is set to 0, which means the device does not wait for a    quiet time before arming the trigger. This attribute is useful to trigger the    acquisition on signals containing repeated bursts, but for which each burst    may have large changes in signal power within itself. By configuring the    minimum quiet time to the time between bursts, you can ensure that the trigger    occurs at the beginning of a burst rather than at the  signal power change within    a burst.
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRefTriggerMinimumQuietTime(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.RefTriggerMinimumQuietTime, channel, value)
		End Function
		''' <summary>
		'''Specifies a time duration, in seconds, for which the signal must be quiet    before the device arms the trigger. The signal is quiet when it is below the    trigger level if the trigger slope, specified by the    NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_SLOPE attribute, is set to    NIRFSA_VAL_RISING_SLOPE or above the trigger level if the trigger slope is    set to NIRFSA_VAL_FALLING_SLOPE.
		'''    By default this value is set to 0, which means the device does not wait for a    quiet time before arming the trigger. This attribute is useful to trigger the    acquisition on signals containing repeated bursts, but for which each burst    may have large changes in signal power within itself. By configuring the    minimum quiet time to the time between bursts, you can ensure that the trigger    occurs at the beginning of a burst rather than at the  signal power change within    a burst.
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRefTriggerMinimumQuietTime(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.RefTriggerMinimumQuietTime, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of pretrigger samples--the samples acquired before the    Reference trigger is received--to be acquired per record. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRefTriggerPretriggerSamples(channel As String, value As Long) As Integer
			Return Me.SetInt64(niRFSAProperties.RefTriggerPretriggerSamples, channel, value)
		End Function
		''' <summary>
		'''Specifies the number of pretrigger samples--the samples acquired before the    Reference trigger is received--to be acquired per record. 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRefTriggerPretriggerSamples(channel As String, ByRef value As Long) As Integer
			Return Me.GetInt64(niRFSAProperties.RefTriggerPretriggerSamples, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/RefTrigger, where DigitizerName is the name associated with your digitizer module in MAX. 
		'''    Supported Devices: NI 5663/5663E/5665   	 
		''' 
		''' </summary>
		Public Function GetRefTriggerTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.RefTriggerTerminalName, channel, value)
		End Function

		''' <summary>
		'''Specifies whether you want the Reference trigger to be a digital edge, IQ    power edge, or software trigger. 
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRefTriggerType(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.RefTriggerType, channel, value)
		End Function
		''' <summary>
		'''Specifies whether you want the Reference trigger to be a digital edge, IQ    power edge, or software trigger. 
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRefTriggerType(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RefTriggerType, channel, value)
		End Function

		''' <summary>
		'''Specifies the resolution along the x-axis of the spectrum.    NI-RFSA uses the resolution bandwidth value to determine the acquisition size. If the    NIRFSA_ATTR_NUMBER_OF_SPECTRAL_LINES attribute is specified, that value overrides    this value. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 100 kHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetResolutionBandwidth(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.ResolutionBandwidth, channel, value)
		End Function
		''' <summary>
		'''Specifies the resolution along the x-axis of the spectrum.    NI-RFSA uses the resolution bandwidth value to determine the acquisition size. If the    NIRFSA_ATTR_NUMBER_OF_SPECTRAL_LINES attribute is specified, that value overrides    this value. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 100 kHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetResolutionBandwidth(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.ResolutionBandwidth, channel, value)
		End Function

		''' <summary>
		'''Specifies how the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute is expressed. 
		'''    Default Value: NIRFSA_VAL_RBW_3DB 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetResolutionBandwidthType(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.ResolutionBandwidthType, channel, value)
		End Function
		''' <summary>
		'''Specifies how the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute is expressed. 
		'''    Default Value: NIRFSA_VAL_RBW_3DB 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetResolutionBandwidthType(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.ResolutionBandwidthType, channel, value)
		End Function

		''' <summary>
		'''Specifies the attenuator setting to use from the RF attenuator table, which is    specified by the NIRFSA_ATTR_RF_ATTENUATION_TABLE attribute.
		'''    Valid Values: 0 to 65 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5603/5663/5663E        
		''' 
		''' </summary>
		Public Function SetRfAttenuationIndex(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.RfAttenuationIndex, channel, value)
		End Function
		''' <summary>
		'''Specifies the attenuator setting to use from the RF attenuator table, which is    specified by the NIRFSA_ATTR_RF_ATTENUATION_TABLE attribute.
		'''    Valid Values: 0 to 65 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5603/5663/5663E        
		''' 
		''' </summary>
		Public Function GetRfAttenuationIndex(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RfAttenuationIndex, channel, value)
		End Function

		''' <summary>
		'''Specifies the step size for the RF attenuation level. The actual RF attenuation is coerced up to the    next highest multiple of this step size.    You can also set this value to change the step size for the device within the supported device precision and configuration. 
		'''    NI 5600-The device configuration supports only the following attenuation step size values: 10, 20, 30, 40, and 50. 
		'''    NI 5601-The attenuation is calculated based on the actual calibrated value closest to the    desired value, so the step size varies as the actual gain values vary between consecutive attenuation settings.
		'''    NI 5603-The device configuration supports attenuation changes in 1 dB steps.
		'''    NI 5605-The available attenuation step size depends on the specified center frequency. In    the high band signal path (input frequencies greater than 3.6 GHz), the only available attenuation is the step attenuator    that you can change in 5 dB steps. In the low band signal path (input frequencies less than or     equal to 3.6 GHz), an additional 31 dB of solid-state attenuation is available in 1 dB steps.    The 5 dB default value indicates that, even when in the low band signal path, NI-RFSA changes the    attenuation in 5 dB steps using only the mechanical attenuator. You can use this property to affect     when the device changes the attenuation settings. To use the solid-state attenuation in the low band    signal path, change the step size to a value other than a multiple of 5 (for example, a step size of 1 dB).    If you use a value other than a multiple of 5 while in the high band of the NI 5605, NI-RFSA returns an error.
		'''    Valid Values: 
		'''    NI 5600:10, 20, 30, 40, and 50 
		'''    NI 5601:0.0 to 93.0, continuous 
		'''    NI 5603:1.0 to 74.0, in 1 dB steps 
		'''    NI 5605 (low band): 1.0 to 106.0, in 1 dB steps 
		'''    NI 5605 (high band): 5.0 to 75.0, in 5 dB steps 
		'''    Default Value: 
		'''    NI 5600: 10.0 
		'''    NI 5601: 0.0 
		'''    NI 5603: 1.0 
		'''    NI 5605: 5.0 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetRfAttenuationStepSize(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.RfAttenuationStepSize, channel, value)
		End Function
		''' <summary>
		'''Specifies the step size for the RF attenuation level. The actual RF attenuation is coerced up to the    next highest multiple of this step size.    You can also set this value to change the step size for the device within the supported device precision and configuration. 
		'''    NI 5600-The device configuration supports only the following attenuation step size values: 10, 20, 30, 40, and 50. 
		'''    NI 5601-The attenuation is calculated based on the actual calibrated value closest to the    desired value, so the step size varies as the actual gain values vary between consecutive attenuation settings.
		'''    NI 5603-The device configuration supports attenuation changes in 1 dB steps.
		'''    NI 5605-The available attenuation step size depends on the specified center frequency. In    the high band signal path (input frequencies greater than 3.6 GHz), the only available attenuation is the step attenuator    that you can change in 5 dB steps. In the low band signal path (input frequencies less than or     equal to 3.6 GHz), an additional 31 dB of solid-state attenuation is available in 1 dB steps.    The 5 dB default value indicates that, even when in the low band signal path, NI-RFSA changes the    attenuation in 5 dB steps using only the mechanical attenuator. You can use this property to affect     when the device changes the attenuation settings. To use the solid-state attenuation in the low band    signal path, change the step size to a value other than a multiple of 5 (for example, a step size of 1 dB).    If you use a value other than a multiple of 5 while in the high band of the NI 5605, NI-RFSA returns an error.
		'''    Valid Values: 
		'''    NI 5600:10, 20, 30, 40, and 50 
		'''    NI 5601:0.0 to 93.0, continuous 
		'''    NI 5603:1.0 to 74.0, in 1 dB steps 
		'''    NI 5605 (low band): 1.0 to 106.0, in 1 dB steps 
		'''    NI 5605 (high band): 5.0 to 75.0, in 5 dB steps 
		'''    Default Value: 
		'''    NI 5600: 10.0 
		'''    NI 5601: 0.0 
		'''    NI 5603: 1.0 
		'''    NI 5605: 5.0 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRfAttenuationStepSize(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.RfAttenuationStepSize, channel, value)
		End Function

		''' <summary>
		'''Specifies which RF attenuator table to use.
		'''    Valid Values: 0 to 1 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function SetRfAttenuationTable(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.RfAttenuationTable, channel, value)
		End Function
		''' <summary>
		'''Specifies which RF attenuator table to use.
		'''    Valid Values: 0 to 1 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
		''' 
		''' </summary>
		Public Function GetRfAttenuationTable(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RfAttenuationTable, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the RF Preamplifier is enabled on the downconverter. 
		'''    NOTE: All devices support setting this attribute to NIRFSA_VAL_RF_PREAMP_DISABLED.    Only devices with an RF preamplifier support setting this attribute    to NIRFSA_VAL_RF_PREAMP_ENABLED_WHEN_IN_SIGNAL_PATH or NIRFSA_VAL_RF_PREAMP_ENABLED. 
		'''    Default Value: NIRFSA_VAL_RF_PREAMP_DISABLED  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665          
		''' 
		''' </summary>
		Public Function SetRfPreampEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.RfPreampEnabled, channel, value)
		End Function
		''' <summary>
		'''Specifies whether the RF Preamplifier is enabled on the downconverter. 
		'''    NOTE: All devices support setting this attribute to NIRFSA_VAL_RF_PREAMP_DISABLED.    Only devices with an RF preamplifier support setting this attribute    to NIRFSA_VAL_RF_PREAMP_ENABLED_WHEN_IN_SIGNAL_PATH or NIRFSA_VAL_RF_PREAMP_ENABLED. 
		'''    Default Value: NIRFSA_VAL_RF_PREAMP_DISABLED  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665          
		''' 
		''' </summary>
		Public Function GetRfPreampEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RfPreampEnabled, channel, value)
		End Function

		''' <summary>
		'''Returns whether an RF preamplifier is available on the downconverter module.
		'''     Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetRfPreampPresent(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.RfPreampPresent, channel, value)
		End Function

		''' <summary>
		'''Returns the serial number of the RF downconverter module. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSerialNumber(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SerialNumber, channel, value)
		End Function

		''' <summary>
		'''Specifies whether or not to simulate NI-RFSA I/O operations. This attribute is    useful for debugging applications without using hardware. After a session    is opened, you cannot change the simulation state. Use the niRFSA_InitWithOptions    function to enable simulation.
		'''    NOTE: NI 5600/5661 support setting this attribute to VI_FALSE only. 
		'''    Default Value: VI_FALSE  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode); NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSimulate(channel As String, ByRef value As Boolean) As Integer
			Return Me.GetBoolean(niRFSAProperties.Simulate, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains a brief description of NI-RFSA. This attribute returns    RF Signal Analyzer Instrument Driver. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSpecificDriverDescription(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SpecificDriverDescription, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the prefix for NI-RFSA. The name of each user-callable    function in NI-RFSA starts with this prefix. This attribute returns niRFSA. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
		''' 
		''' </summary>
		Public Function GetSpecificDriverPrefix(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SpecificDriverPrefix, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains additional version information about NI-RFSA.    For example, NI-RFSA can return Driver: NI-RFSA 2.5, Compiler: MSVC 7.10,    Components: IVI Engine 4.00, VISA-Spec 4.00 as the value of this attribute. 
		'''    Default Value: N/A  
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSpecificDriverRevision(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SpecificDriverRevision, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the name of the vendor that supplies NI-RFSA.    This attribute returns National Instruments. 
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSpecificDriverVendor(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SpecificDriverVendor, channel, value)
		End Function

		''' <summary>
		'''Specifies the averaging mode for the spectrum acquisition. 
		'''    Default Value: NIRFSA_VAL_NO_AVERAGING  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetSpectrumAveragingMode(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.SpectrumAveragingMode, channel, value)
		End Function
		''' <summary>
		'''Specifies the averaging mode for the spectrum acquisition. 
		'''    Default Value: NIRFSA_VAL_NO_AVERAGING  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSpectrumAveragingMode(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.SpectrumAveragingMode, channel, value)
		End Function

		''' <summary>
		'''Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
		'''     NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 1 GHz 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetSpectrumCenterFrequency(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.SpectrumCenterFrequency, channel, value)
		End Function
		''' <summary>
		'''Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
		'''     NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
		'''    Units: hertz (Hz) 
		'''    Default Value: 1 GHz 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSpectrumCenterFrequency(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.SpectrumCenterFrequency, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of acquisitions to average.    The averaging process returns the final result after the number    of averages is complete.
		'''    Default Value: 10  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetSpectrumNumberOfAverages(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.SpectrumNumberOfAverages, channel, value)
		End Function
		''' <summary>
		'''Specifies the number of acquisitions to average.    The averaging process returns the final result after the number    of averages is complete.
		'''    Default Value: 10  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSpectrumNumberOfAverages(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.SpectrumNumberOfAverages, channel, value)
		End Function

		''' <summary>
		'''Specifies the oversampling ratio used by the the digitizer onboard signal processing (OSP)    when you are in spectrum acquisition mode. This attribute allows you to acquire a larger    bandwidth in hardware and reduce that bandwidth in software, decreasing the possibility of hardware data path overflows. 
		'''    Default Value: 1.0 
		'''    Supported Devices: NI 5661/5663/5663E/5665          
		''' 
		''' </summary>
		Public Function SetSpectrumOspSamplingRatio(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.SpectrumOspSamplingRatio, channel, value)
		End Function
		''' <summary>
		'''Specifies the oversampling ratio used by the the digitizer onboard signal processing (OSP)    when you are in spectrum acquisition mode. This attribute allows you to acquire a larger    bandwidth in hardware and reduce that bandwidth in software, decreasing the possibility of hardware data path overflows. 
		'''    Default Value: 1.0 
		'''    Supported Devices: NI 5661/5663/5663E/5665          
		''' 
		''' </summary>
		Public Function GetSpectrumOspSamplingRatio(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.SpectrumOspSamplingRatio, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency range of the computed spectrum, in hertz (Hz).    For example, if you specify a center frequency of 1 GHz and a span of 100 MHz,    the spectrum ranges from 950 MHz to 1,050 MHz after zoom processing. This value    may be coerced based on hardware settings and RF downconverter specifications. 
		'''    NOTE: If you configure the spectrum span to a value larger than the hardware    instantaneous bandwidth, NI-RFSA performs multiple acquisitions and combines    them into a spectrum of the size you requested. 
		'''    NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency    ranges that correspond with different instantaneous bandwidths. For example, you cannot configure    a multispan acquisition that acquires one span from 110 MHz to 120 MHz and a    second from 120 MHz to    130 MHz because the bandwidths that correspond with each span is    different (10 MHz and 20 MHz, respectively).
		'''    NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default.    At spans wider than 40 MHz,    the dither noise can leak into the lower frequencies and the upper frequencies    of the IF pass band.    The amount of leakage depends on the resolution bandwidth, resolution bandwidth type,    and FFT window    you select. Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more    information about dithering. 
		'''    Default Value: 10 MHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetSpectrumSpan(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.SpectrumSpan, channel, value)
		End Function
		''' <summary>
		'''Specifies the frequency range of the computed spectrum, in hertz (Hz).    For example, if you specify a center frequency of 1 GHz and a span of 100 MHz,    the spectrum ranges from 950 MHz to 1,050 MHz after zoom processing. This value    may be coerced based on hardware settings and RF downconverter specifications. 
		'''    NOTE: If you configure the spectrum span to a value larger than the hardware    instantaneous bandwidth, NI-RFSA performs multiple acquisitions and combines    them into a spectrum of the size you requested. 
		'''    NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency    ranges that correspond with different instantaneous bandwidths. For example, you cannot configure    a multispan acquisition that acquires one span from 110 MHz to 120 MHz and a    second from 120 MHz to    130 MHz because the bandwidths that correspond with each span is    different (10 MHz and 20 MHz, respectively).
		'''    NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default.    At spans wider than 40 MHz,    the dither noise can leak into the lower frequencies and the upper frequencies    of the IF pass band.    The amount of leakage depends on the resolution bandwidth, resolution bandwidth type,    and FFT window    you select. Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more    information about dithering. 
		'''    Default Value: 10 MHz  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSpectrumSpan(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.SpectrumSpan, channel, value)
		End Function

		''' <summary>
		'''Specifies the minimum time, in seconds, that must elapse after the Start trigger is    received before the device recognizes a Reference trigger. 
		'''    Units: seconds 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetStartToRefTriggerHoldoff(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.StartToRefTriggerHoldoff, channel, value)
		End Function
		''' <summary>
		'''Specifies the minimum time, in seconds, that must elapse after the Start trigger is    received before the device recognizes a Reference trigger. 
		'''    Units: seconds 
		'''    Default Value: 0 
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetStartToRefTriggerHoldoff(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.StartToRefTriggerHoldoff, channel, value)
		End Function

		''' <summary>
		'''Returns the fully qualified signal name as a string. 
		'''    Default Value: /DigitizerName/StartTrigger, where DigitizerName is the name associated with your digitizer module in MAX.  
		'''    Supported Devices: NI 5663/5663E/5665   	 
		''' 
		''' </summary>
		Public Function GetStartTriggerTerminalName(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.StartTriggerTerminalName, channel, value)
		End Function

		''' <summary>
		'''Specifies whether you want the Start trigger to be a digital edge or    software trigger.
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetStartTriggerType(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.StartTriggerType, channel, value)
		End Function
		''' <summary>
		'''Specifies whether you want the Start trigger to be a digital edge or    software trigger.
		'''    Default Value: NIRFSA_VAL_NONE  
		'''    Supported Devices: NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetStartTriggerType(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.StartTriggerType, channel, value)
		End Function

		''' <summary>
		'''Returns a comma-separated list of supported devices.
		'''    Default Value: N/A 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetSupportedInstrumentModels(channel As String, ByRef value As String) As Integer
			Return Me.GetString(niRFSAProperties.SupportedInstrumentModels, channel, value)
		End Function

		''' <summary>
		'''Indicates the minimum time between temperature sensor readings. When you    call the niRFSA_ReadPowerSpectrum function, the niRFSA_ReadIQSingleRecordComplexF64 function,    or the niRFSA_Initiate function, NI-RFSA checks whether at least the amount of    time specified by this attribute has elapsed before reading the hardware temperature. 
		'''    NOTE: NI-RFSA ignores this attribute if you called the niRFSA_PerformThermalCorrection    function or the NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute. 
		'''    Default Value: 30 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function SetTemperatureReadInterval(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.TemperatureReadInterval, channel, value)
		End Function
		''' <summary>
		'''Indicates the minimum time between temperature sensor readings. When you    call the niRFSA_ReadPowerSpectrum function, the niRFSA_ReadIQSingleRecordComplexF64 function,    or the niRFSA_Initiate function, NI-RFSA checks whether at least the amount of    time specified by this attribute has elapsed before reading the hardware temperature. 
		'''    NOTE: NI-RFSA ignores this attribute if you called the niRFSA_PerformThermalCorrection    function or the NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute. 
		'''    Default Value: 30 
		'''    Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
		''' 
		''' </summary>
		Public Function GetTemperatureReadInterval(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.TemperatureReadInterval, channel, value)
		End Function

		''' <summary>
		'''Specifies the time, in seconds, that the timer waits before sending a Timer event. 
		'''    After the timer reaches zero, it automatically restarts. 
		'''    Default Value: 0.01  
		'''    Supported Devices: NI 5663E/5665       
		''' 
		''' </summary>
		Public Function SetTimerEventInterval(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.TimerEventInterval, channel, value)
		End Function
		''' <summary>
		'''Specifies the time, in seconds, that the timer waits before sending a Timer event. 
		'''    After the timer reaches zero, it automatically restarts. 
		'''    Default Value: 0.01  
		'''    Supported Devices: NI 5663E/5665       
		''' 
		''' </summary>
		Public Function GetTimerEventInterval(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.TimerEventInterval, channel, value)
		End Function

		''' <summary>
		'''Specifies the FFT width of the device. The FFT width is the effective bandwidth of the signal
		'''    path during each signal acquisition.
		'''    Default Value: N/A
		'''    Supported Devices: NI 5663/5663E/5665
		''' 
		''' </summary>
		Public Function SetFftWidth(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.FftWidth, channel, value)
		End Function

		''' <summary>
		'''Specifies the FFT width of the device. The FFT width is the effective bandwidth of the signal
		'''    path during each signal acquisition.
		'''    Default Value: N/A
		'''    Supported Devices: NI 5663/5663E/5665
		''' 
		''' </summary>
		Public Function GetFftWidth(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.FftWidth, channel, value)
		End Function

		''' <summary>
		'''Specifies whether input isolation is enabled.
		'''    Enabling this attribute isolates the input signal at the RF IN connector on the RF downconverter
		'''    from the rest of the RF downconverter signal path. Disabling this attribute reintegrates the
		'''    input signal into the RF downconverter signal path.
		'''    NOTE: If you enable input isolation for your device, the device impedance is changed from the
		'''    characteristic 50 Ohm impedance. A change in the device impedance may also cause a VSWR value
		'''    higher than the device specifications.
		'''    Default Values: NIRFSA_VAL_ENABLED
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665
		''' </summary>
		Public Function SetInputIsolationEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.InputIsolationEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether input isolation is enabled.
		'''    Enabling this attribute isolates the input signal at the RF IN connector on the RF downconverter
		'''    from the rest of the RF downconverter signal path. Disabling this attribute reintegrates the
		'''    input signal into the RF downconverter signal path.
		'''    NOTE: If you enable input isolation for your device, the device impedance is changed from the
		'''    characteristic 50 Ohm impedance. A change in the device impedance may also cause a VSWR value
		'''    higher than the device specifications.
		'''    Default Values: NIRFSA_VAL_ENABLED
		'''    Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665
		''' </summary>
		Public Function GetInputIsolationEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.InputIsolationEnabled, channel, value)
		End Function



		''' <summary>
		'''Specifies whether the digitizer OSP block delays Reference triggers, along with the data
		'''    samples, moving through the OSP block or if the Reference triggers bypass the OSP block 
		'''    and are processed immediately.
		'''    Enabling this attribute requires the following equipment configurations:
		'''    All digitizers being used must be the same model and hardware revision.
		'''    All digitizers must use the same firmware.
		'''    All digitizers must be configured with the same I/Q rate. 
		'''    All devices must use the same signal path. 
		'''    NI 5661—The IF filters for the NI 5661 are determined by the incoming frequency.
		'''    NI 5663/5663E—Read the value of the NIRFSA_ATTR_IF_FILTER attribute to determine the 
		'''    IF filters used by the NI 5663/5663E.
		'''    NI 5665—Refer to the device-specific information in the
		'''    NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute to determine the IF filters used by 
		'''    the NI 5665. If you set the NIRFSA_ATTR_FFT_WIDTH attribute, refer to the device-specific
		'''    information for this attribute and the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute
		'''    to determine the IF filters used. For frequencies less than 3.6 GHz, set the
		'''    NIRFSA_ATTR_RF_PREAMP_ENABLED to the same value for all devices.
		'''    NI 5665 14 GHz—Set the NIRFSA_ATTR_PRESELECTOR_ENABLED to the same value for all devices.
		'''    If the I/Q rate is set programmatically for I/Q acquisitions, the following attributes 
		'''    should be identical for the best device synchronization:
		'''    NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED 
		'''    NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
		'''    For spectrum acquisitions, the following attributes should be identical for the 
		'''    best device synchronization:
		'''    NIRFSA_ATTR_SPECTRUM_SPAN 
		'''    NIRFSA_ATTR_RESOLUTION_BANDWIDTH_TYPE 
		'''    NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED
		'''    NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5661/5663/5663E/5665
		''' </summary>
		Public Function SetRefTriggerOspDelayEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.RefTriggerOspDelayEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the digitizer OSP block delays Reference triggers, along with the data
		'''    samples, moving through the OSP block or if the Reference triggers bypass the OSP block 
		'''    and are processed immediately.
		'''    Enabling this attribute requires the following equipment configurations:
		'''    All digitizers being used must be the same model and hardware revision.
		'''    All digitizers must use the same firmware.
		'''    All digitizers must be configured with the same I/Q rate. 
		'''    All devices must use the same signal path. 
		'''    NI 5661—The IF filters for the NI 5661 are determined by the incoming frequency.
		'''    NI 5663/5663E—Read the value of the NIRFSA_ATTR_IF_FILTER attribute to determine the 
		'''    IF filters used by the NI 5663/5663E.
		'''    NI 5665—Refer to the device-specific information in the
		'''    NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute to determine the IF filters used by 
		'''    the NI 5665. If you set the NIRFSA_ATTR_FFT_WIDTH attribute, refer to the device-specific
		'''    information for this attribute and the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute
		'''    to determine the IF filters used. For frequencies less than 3.6 GHz, set the
		'''    NIRFSA_ATTR_RF_PREAMP_ENABLED to the same value for all devices.
		'''    NI 5665 14 GHz—Set the NIRFSA_ATTR_PRESELECTOR_ENABLED to the same value for all devices.
		'''    If the I/Q rate is set programmatically for I/Q acquisitions, the following attributes 
		'''    should be identical for the best device synchronization:
		'''    NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED 
		'''    NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
		'''    For spectrum acquisitions, the following attributes should be identical for the 
		'''    best device synchronization:
		'''    NIRFSA_ATTR_SPECTRUM_SPAN 
		'''    NIRFSA_ATTR_RESOLUTION_BANDWIDTH_TYPE 
		'''    NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED
		'''    NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
		'''    Default Value: NIRFSA_VAL_ENABLED 
		'''    Supported Devices: NI 5661/5663/5663E/5665
		''' </summary>
		Public Function GetRefTriggerOspDelayEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RefTriggerOspDelayEnabled, channel, value)
		End Function

		Public Function GetChannelCount(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.ChannelCount, channel, value)
		End Function

		Public Function GetGroupCapabilities(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.GroupCapabilities, channel, value)
		End Function

		Public Function GetSpecificDriverClassSpecMajorVersion(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.SpecificDriverClassSpecMajorVersion, channel, value)
		End Function

		Public Function GetSpecificDriverClassSpecMinorVersion(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.SpecificDriverClassSpecMinorVersion, channel, value)
		End Function

		#End Region
        
        #Region "17.1"

        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>
        Public Function SetDigitalEdgeConfigurationListStepTriggerSource(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.DigitalEdgeConfigurationListStepTriggerSource, channel, value)
        End Function

        ''' <summary>
        '''This attribute is not for customer use. 
        ''' 
        ''' </summary>        
        Public Function GetDigitalEdgeConfigurationListStepTriggerSource(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.DigitalEdgeConfigurationListStepTriggerSource, channel, value)
        End Function

        ''' <summary>
        ''' Initiates a spectrum acquisition and returns power spectrum data.
        ''' </summary>
        ''' <param name="Channel_List"></param>
        ''' <param name="Timeout"></param>
        ''' <param name="Power_Spectrum_Data"></param>
        ''' <param name="Data_Array_Size"></param>
        ''' <param name="Spectrum_Info">Returns power spectrum data.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function ReadPowerSpectrumF32(Channel_List As String, Timeout As Double, Power_Spectrum_Data As Single(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
			Dim pInvokeResult As Integer = PInvoke.ReadPowerSpectrumF32(Me._handle, Channel_List, Timeout, Power_Spectrum_Data, Data_Array_Size, Spectrum_Info)
			TestForError(pInvokeResult)
			Return pInvokeResult
		End Function

#End Region

#Region "Missing SetGetMethodsForAttributes 16.0 & 17.1"

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetModulePowerConsumption(channel As String, value As Double) As Integer
	Return Me.SetDouble(niRFSAProperties.ModulePowerConsumption, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetModulePowerConsumption(channel As String, ByRef value As Double) As Integer
	Return Me.GetDouble(niRFSAProperties.ModulePowerConsumption, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetFpgaTemperature(channel As String, ByRef value As Double) As Integer
	Return Me.GetDouble(niRFSAProperties.FpgaTemperature, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetAllowOutOfSpecificationUserSettings(channel As String, value As Integer) As Integer
	Return Me.SetInt32(niRFSAProperties.AllowOutOfSpecificationUserSettings, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetAllowOutOfSpecificationUserSettings(channel As String, ByRef value As Integer) As Integer
	Return Me.GetInt32(niRFSAProperties.AllowOutOfSpecificationUserSettings, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetRfConditioningCalToneMode(channel As String, value As Integer) As Integer
	Return Me.SetInt32(niRFSAProperties.RfConditioningCalToneMode, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetRfConditioningCalToneMode(channel As String, ByRef value As Integer) As Integer
	Return Me.GetInt32(niRFSAProperties.RfConditioningCalToneMode, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetRfConditioningCalToneFrequency(channel As String, value As Double) As Integer
	Return Me.SetDouble(niRFSAProperties.RfConditioningCalToneFrequency, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetRfConditioningCalToneFrequency(channel As String, ByRef value As Double) As Integer
	Return Me.GetDouble(niRFSAProperties.RfConditioningCalToneFrequency, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetAbsoluteDelay(channel As String, value As Double) As Integer
	Return Me.SetDouble(niRFSAProperties.AbsoluteDelay, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetAbsoluteDelay(channel As String, ByRef value As Double) As Integer
	Return Me.GetDouble(niRFSAProperties.AbsoluteDelay, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetAmplitudeSettling(channel As String, value As Double) As Integer
	Return Me.SetDouble(niRFSAProperties.AmplitudeSettling, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetAmplitudeSettling(channel As String, ByRef value As Double) As Integer
	Return Me.GetDouble(niRFSAProperties.AmplitudeSettling, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetOverflowErrorReporting(channel As String, value As Integer) As Integer
	Return Me.SetInt32(niRFSAProperties.OverflowErrorReporting, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetOverflowErrorReporting(channel As String, ByRef value As Integer) As Integer
	Return Me.GetInt32(niRFSAProperties.OverflowErrorReporting, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetLoOutPower(channel As String, value As Double) As Integer
	Return Me.SetDouble(niRFSAProperties.LoOutPower, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetLoOutPower(channel As String, ByRef value As Double) As Integer
	Return Me.GetDouble(niRFSAProperties.LoOutPower, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function SetIqInPortCommonMode(channel As String, value As Double) As Integer
	Return Me.SetDouble(niRFSAProperties.IqInPortCommonMode, channel, value)
End Function

''' <summary>
''' 
''' </summary>
''' <param name="channel"></param>
''' <param name="value"></param>
''' <returns></returns>
Public Function GetIqInPortCommonMode(channel As String, ByRef value As Double) As Integer
	Return Me.GetDouble(niRFSAProperties.IqInPortCommonMode, channel, value)
End Function

        #End Region

		#Region "SetGetAttributeMethods 18.1"

		''' <summary>
		''' 
		''' </summary>
		''' <param name="channel"></param>
		''' <param name="value"></param>
		''' <returns></returns>
		Public Function SetThermalCorrectionTemperatureResolution(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.ThermalCorrectionTemperatureResolution, channel, value)
		End Function

		''' <summary>
		''' 
		''' </summary>
		''' <param name="channel"></param>
		''' <param name="value"></param>
		''' <returns></returns>
		Public Function GetThermalCorrectionTemperatureResolution(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.ThermalCorrectionTemperatureResolution, channel, value)
		End Function

		''' <summary>
		'''
		''' </summary>
		Public Function SetRFOutLOExportEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.RFOutLOExportEnabled, channel, value)
		End Function
		''' <summary>
		'''
		''' </summary>
		Public Function GetRFOutLOExportEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.RFOutLOExportEnabled, channel, value)
		End Function

		''' <summary>
		'''
		''' </summary>
		Public Function SetLOOutExportConfigureFromRfsg(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSAProperties.LOOutExportConfigureFromRfsg, channel, value)
		End Function
		''' <summary>
		'''
		''' </summary>
		Public Function GetLOOutExportConfigureFromRfsg(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSAProperties.LOOutExportConfigureFromRfsg, channel, value)
		End Function

		''' <summary>
		''' 
		''' </summary>
		Public Function SetDigitalGain(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSAProperties.DigitalGain, channel, value)
		End Function

		''' <summary>
		''' 
		''' </summary>
		Public Function GetDigitalGain(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSAProperties.DigitalGain, channel, value)
		End Function

#End Region


#Region "SetGetAttributeMethods 18.2"

        ''' <summary>
        ''' Sets the type of de-embedding to apply to measurements.
        ''' </summary>
        Public Function SetDeembeddingType(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.DeembeddingType, channel, value)
        End Function
        ''' <summary>
        ''' Gets the type of de-embedding to apply to measurements.
        ''' </summary>
        Public Function GetDeembeddingType(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.DeembeddingType, channel, value)
        End Function

        ''' <summary>
        ''' Sets the de-embedding table to apply to the measurements.
        ''' </summary>
        Public Function SetDeembeddingSelectedTable(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.DeembeddingSelectedTable, channel, value)
        End Function

        ''' <summary>
        ''' Gets the de-embedding table to apply to the measurements.
        ''' </summary>
        Public Function GetDeembeddingSelectedTable(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.DeembeddingSelectedTable, channel, value)
        End Function

        #End Region

        #Region "SetGetAttributeMethods 19.1"

        ''' <summary>
        ''' Sets which port to configure to acquire a signal.
        ''' </summary>
        Public Function SetSelectedPorts(channel As String, value As String) As Integer
            Return Me.SetString(niRFSAProperties.SelectedPorts, channel, value)
        End Function

        ''' <summary>
        ''' Gets which port to configure to acquire a signal.
        ''' </summary>
        Public Function GetSelectedPorts(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.SelectedPorts, channel, value)
        End Function

        ''' <summary>
        ''' Gets a comma-separated list of the ports available for use based on your instrument configuration.
        ''' </summary>
        Public Function GetAvailablePorts(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSAProperties.AvailablePorts, channel, value)
        End Function

        ''' <summary>
        ''' Sets the margin NI-RFSA adds to the ReferenceLevel property. The margin helps to avoid clipping and overflow warnings if the input signal exceeds the configured reference level.
        ''' </summary>
        Public Function SetReferenceLevelHeadroom(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.ReferenceLevelHeadroom, channel, value)
        End Function

        ''' <summary>
        ''' Gets the margin NI-RFSA adds to the ReferenceLevel property. The margin helps to avoid clipping and overflow warnings if the input signal exceeds the configured reference level.
        ''' </summary>
        Public Function GetReferenceLevelHeadroom(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.ReferenceLevelHeadroom, channel, value)
        End Function

        ''' <summary>
        ''' Sets the bandwidth of the input signal around the I/Q carrier frequency. This value must be less than or equal to (0.8 × I/Q rate).
        ''' </summary>
        Public Function SetSignalBandwidth(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.SignalBandwidth, channel, value)
        End Function

        ''' <summary>
        ''' Gets the bandwidth of the input signal around the I/Q carrier frequency. This value must be less than or equal to (0.8 × I/Q rate).
        ''' </summary>
        Public Function GetSignalBandwidth(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.SignalBandwidth, channel, value)
        End Function

        ''' <summary>
        ''' Sets whether to allow NI-RFSA to select the downconverter frequency offset. You can either set an offset yourself or let NI-RFSA set one for you.
        ''' </summary>
        Public Function SetDownconverterFrequencyOffsetMode(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSAProperties.DownconverterFrequencyOffsetMode, channel, value)
        End Function
        ''' <summary>
        ''' Gets whether to allow NI-RFSA to select the downconverter frequency offset. You can either set an offset yourself or let NI-RFSA set one for you.
        ''' </summary>
        Public Function GetDownconverterFrequencyOffsetMode(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSAProperties.DownconverterFrequencyOffsetMode, channel, value)
        End Function

        ''' <summary>
        ''' Sets the step size for tuning the internal voltage-controlled oscilator (VCO) used to generate the LO signal.
        ''' </summary>
        Public Function SetLOVcoFrequencyStepSize(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.LOVcoFrequencyStepSize, channel, value)
        End Function

        ''' <summary>
        ''' Gets the step size for tuning the internal voltage-controlled oscilator (VCO) used to generate the LO signal.
        ''' </summary>
        Public Function GetLOVcoFrequencyStepSize(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.LOVcoFrequencyStepSize, channel, value)
        End Function

        ''' <summary>
        ''' Sets the expected thermal operating range of the instrument from the self-calibration temperature, in degrees Celsius, returned from GetDeviceTemperature.
        ''' </summary>
        Public Function SetThermalCorrectionHeadroomRange(channel As String, value As Double) As Integer
            Return Me.SetDouble(niRFSAProperties.ThermalCorrectionHeadroomRange, channel, value)
        End Function

        ''' <summary>
        ''' Gets the expected thermal operating range of the instrument from the self-calibration temperature, in degrees Celsius, returned from GetDeviceTemperature.
        ''' </summary>
        Public Function GetThermalCorrectionHeadroomRange(channel As String, ByRef value As Double) As Integer
            Return Me.GetDouble(niRFSAProperties.ThermalCorrectionHeadroomRange, channel, value)
        End Function

        #End Region

#Region "PInvoke"
        Private Class PInvoke
			Private Const rfsaModuleName32 As String = "niRFSA.dll"
			Private Const rfsaModuleName64 As String = "niRFSA_64.dll"
			Private Const vstModuleName As String = "niVSTSelfCal.dll"

			' Define the readonly field to check for process' bitness.
			Private Shared ReadOnly Is64BitProcess As Boolean = (IntPtr.Size = 8)

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_init", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function init32(Resource_Name As String, ID_Query As UShort, Reset As UShort, ByRef instrumentHandle As System.IntPtr) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_init", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function init64(Resource_Name As String, ID_Query As UShort, Reset As UShort, ByRef instrumentHandle As System.IntPtr) As Integer
			End Function

			Public Shared Function init(Resource_Name As String, ID_Query As UShort, Reset As UShort, ByRef instrumentHandle As System.IntPtr) As Integer
				If Is64BitProcess Then
					Return init64(Resource_Name, ID_Query, Reset, instrumentHandle)
				Else
					Return init32(Resource_Name, ID_Query, Reset, instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_InitWithOptions", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitWithOptions32(Resource_Name As String, ID_Query As UShort, Reset As UShort, Option_String As String, ByRef instrumentHandle As System.IntPtr) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_InitWithOptions", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitWithOptions64(Resource_Name As String, ID_Query As UShort, Reset As UShort, Option_String As String, ByRef instrumentHandle As System.IntPtr) As Integer
			End Function

			Public Shared Function InitWithOptions(Resource_Name As String, ID_Query As UShort, Reset As UShort, Option_String As String, ByRef instrumentHandle As System.IntPtr) As Integer
				If Is64BitProcess Then
					Return InitWithOptions64(Resource_Name, ID_Query, Reset, Option_String, instrumentHandle)
				Else
					Return InitWithOptions32(Resource_Name, ID_Query, Reset, Option_String, instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureAcquisitionType", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureAcquisitionType32(instrumentHandle As HandleRef, Acquisition_Type As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureAcquisitionType", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureAcquisitionType64(instrumentHandle As HandleRef, Acquisition_Type As Integer) As Integer
			End Function

			Public Shared Function ConfigureAcquisitionType(instrumentHandle As HandleRef, Acquisition_Type As Integer) As Integer
				If Is64BitProcess Then
					Return ConfigureAcquisitionType64(instrumentHandle, Acquisition_Type)
				Else
					Return ConfigureAcquisitionType32(instrumentHandle, Acquisition_Type)
				End If
			End Function
            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_EnableSessionAccess", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function EnableSessionAccess32(instrumentHandle As HandleRef, enable As Boolean) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_EnableSessionAccess", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function EnableSessionAccess64(instrumentHandle As HandleRef, enable As Boolean) As Integer
            End Function

            Public Shared Function EnableSessionAccess(instrumentHandle As HandleRef, enable As Boolean) As Integer
                If Is64BitProcess Then
                    Return EnableSessionAccess64(instrumentHandle, enable)
                Else
                    Return EnableSessionAccess32(instrumentHandle, enable)
                End If
            End Function


			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureReferenceLevel", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureReferenceLevel32(instrumentHandle As HandleRef, Channel_List As String, Reference_Level As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureReferenceLevel", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureReferenceLevel64(instrumentHandle As HandleRef, Channel_List As String, Reference_Level As Double) As Integer
			End Function

			Public Shared Function ConfigureReferenceLevel(instrumentHandle As HandleRef, Channel_List As String, Reference_Level As Double) As Integer
				If Is64BitProcess Then
					Return ConfigureReferenceLevel64(instrumentHandle, Channel_List, Reference_Level)
				Else
					Return ConfigureReferenceLevel32(instrumentHandle, Channel_List, Reference_Level)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureIQCarrierFrequency", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureIQCarrierFrequency32(instrumentHandle As HandleRef, Channel_List As String, Carrier_Frequency As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureIQCarrierFrequency", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureIQCarrierFrequency64(instrumentHandle As HandleRef, Channel_List As String, Carrier_Frequency As Double) As Integer
			End Function

			Public Shared Function ConfigureIQCarrierFrequency(instrumentHandle As HandleRef, Channel_List As String, Carrier_Frequency As Double) As Integer
				If Is64BitProcess Then
					Return ConfigureIQCarrierFrequency64(instrumentHandle, Channel_List, Carrier_Frequency)
				Else
					Return ConfigureIQCarrierFrequency32(instrumentHandle, Channel_List, Carrier_Frequency)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalAdjustCalTonePower", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustCalTonePower32(instrumentHandle As HandleRef, Channel_List As String, Measurement As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalAdjustCalTonePower", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustCalTonePower64(instrumentHandle As HandleRef, Channel_List As String, Measurement As Double) As Integer
			End Function

			Public Shared Function CalAdjustCalTonePower(instrumentHandle As HandleRef, Channel_List As String, Measurement As Double) As Integer
				If Is64BitProcess Then
					Return CalAdjustCalTonePower64(instrumentHandle, Channel_List, Measurement)
				Else
					Return CalAdjustCalTonePower32(instrumentHandle, Channel_List, Measurement)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalAdjustDeviceGain", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustDeviceGain32(instrumentHandle As HandleRef, Channel_List As String, Frequency As Double, Gain As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalAdjustDeviceGain", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustDeviceGain64(instrumentHandle As HandleRef, Channel_List As String, Frequency As Double, Gain As Double) As Integer
			End Function

			Public Shared Function CalAdjustDeviceGain(instrumentHandle As HandleRef, Channel_List As String, Frequency As Double, Gain As Double) As Integer
				If Is64BitProcess Then
					Return CalAdjustDeviceGain64(instrumentHandle, Channel_List, Frequency, Gain)
				Else
					Return CalAdjustDeviceGain32(instrumentHandle, Channel_List, Frequency, Gain)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SelfCalibrateRange", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SelfCalibrateRange32(instrumentHandle As HandleRef, stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minReferenceLevel As Double, maxReferenceLevel As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SelfCalibrateRange", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SelfCalibrateRange64(instrumentHandle As HandleRef, stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minReferenceLevel As Double, maxReferenceLevel As Double) As Integer
			End Function


			Public Shared Function SelfCalibrateRange(instrumentHandle As HandleRef, stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minReferenceLevel As Double, maxReferenceLevel As Double) As Integer
				If Is64BitProcess Then
					Return SelfCalibrateRange64(instrumentHandle, stepsToOmit, minFrequency, maxFrequency, minReferenceLevel, maxReferenceLevel)
				Else
					Return SelfCalibrateRange32(instrumentHandle, stepsToOmit, minFrequency, maxFrequency, minReferenceLevel, maxReferenceLevel)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureIQRate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureIQRate32(instrumentHandle As HandleRef, Channel_List As String, IQ_Rate As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureIQRate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureIQRate64(instrumentHandle As HandleRef, Channel_List As String, IQ_Rate As Double) As Integer
			End Function

			Public Shared Function ConfigureIQRate(instrumentHandle As HandleRef, Channel_List As String, IQ_Rate As Double) As Integer
				If Is64BitProcess Then
					Return ConfigureIQRate64(instrumentHandle, Channel_List, IQ_Rate)
				Else
					Return ConfigureIQRate32(instrumentHandle, Channel_List, IQ_Rate)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureNumberOfSamples", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureNumberOfSamples32(instrumentHandle As HandleRef, Channel_List As String, Number_of_Samples_Is_Finite As UShort, Samples_Per_Record As Int64) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureNumberOfSamples", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureNumberOfSamples64(instrumentHandle As HandleRef, Channel_List As String, Number_of_Samples_Is_Finite As UShort, Samples_Per_Record As Int64) As Integer
			End Function

			Public Shared Function ConfigureNumberOfSamples(instrumentHandle As HandleRef, Channel_List As String, Number_of_Samples_Is_Finite As UShort, Samples_Per_Record As Int64) As Integer
				If Is64BitProcess Then
					Return ConfigureNumberOfSamples64(instrumentHandle, Channel_List, Number_of_Samples_Is_Finite, Samples_Per_Record)
				Else
					Return ConfigureNumberOfSamples32(instrumentHandle, Channel_List, Number_of_Samples_Is_Finite, Samples_Per_Record)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureNumberOfRecords", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureNumberOfRecords32(instrumentHandle As HandleRef, Channel_List As String, Number_of_Records_Is_Finite As UShort, Number_of_Records As Int64) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureNumberOfRecords", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureNumberOfRecords64(instrumentHandle As HandleRef, Channel_List As String, Number_of_Records_Is_Finite As UShort, Number_of_Records As Int64) As Integer
			End Function

			Public Shared Function ConfigureNumberOfRecords(instrumentHandle As HandleRef, Channel_List As String, Number_of_Records_Is_Finite As UShort, Number_of_Records As Int64) As Integer
				If Is64BitProcess Then
					Return ConfigureNumberOfRecords64(instrumentHandle, Channel_List, Number_of_Records_Is_Finite, Number_of_Records)
				Else
					Return ConfigureNumberOfRecords32(instrumentHandle, Channel_List, Number_of_Records_Is_Finite, Number_of_Records)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureSpectrumFrequencyCenterSpan", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSpectrumFrequencyCenterSpan32(instrumentHandle As HandleRef, Channel_List As String, Center_Frequency As Double, Span As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureSpectrumFrequencyCenterSpan", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSpectrumFrequencyCenterSpan64(instrumentHandle As HandleRef, Channel_List As String, Center_Frequency As Double, Span As Double) As Integer
			End Function

			Public Shared Function ConfigureSpectrumFrequencyCenterSpan(instrumentHandle As HandleRef, Channel_List As String, Center_Frequency As Double, Span As Double) As Integer
				If Is64BitProcess Then
					Return ConfigureSpectrumFrequencyCenterSpan64(instrumentHandle, Channel_List, Center_Frequency, Span)
				Else
					Return ConfigureSpectrumFrequencyCenterSpan32(instrumentHandle, Channel_List, Center_Frequency, Span)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureSpectrumFrequencyStartStop", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSpectrumFrequencyStartStop32(instrumentHandle As HandleRef, Channel_List As String, Start_Frequency As Double, Stop_Frequency As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureSpectrumFrequencyStartStop", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSpectrumFrequencyStartStop64(instrumentHandle As HandleRef, Channel_List As String, Start_Frequency As Double, Stop_Frequency As Double) As Integer
			End Function

			Public Shared Function ConfigureSpectrumFrequencyStartStop(instrumentHandle As HandleRef, Channel_List As String, Start_Frequency As Double, Stop_Frequency As Double) As Integer
				If Is64BitProcess Then
					Return ConfigureSpectrumFrequencyStartStop64(instrumentHandle, Channel_List, Start_Frequency, Stop_Frequency)
				Else
					Return ConfigureSpectrumFrequencyStartStop32(instrumentHandle, Channel_List, Start_Frequency, Stop_Frequency)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureResolutionBandwidth", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureResolutionBandwidth32(instrumentHandle As HandleRef, Channel_List As String, Resolution_Bandwidth As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureResolutionBandwidth", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureResolutionBandwidth64(instrumentHandle As HandleRef, Channel_List As String, Resolution_Bandwidth As Double) As Integer
			End Function

			Public Shared Function ConfigureResolutionBandwidth(instrumentHandle As HandleRef, Channel_List As String, Resolution_Bandwidth As Double) As Integer
				If Is64BitProcess Then
					Return ConfigureResolutionBandwidth64(instrumentHandle, Channel_List, Resolution_Bandwidth)
				Else
					Return ConfigureResolutionBandwidth32(instrumentHandle, Channel_List, Resolution_Bandwidth)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureDigitalEdgeStartTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureDigitalEdgeStartTrigger32(instrumentHandle As HandleRef, Source As String, Edge As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureDigitalEdgeStartTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureDigitalEdgeStartTrigger64(instrumentHandle As HandleRef, Source As String, Edge As Integer) As Integer
			End Function

			Public Shared Function ConfigureDigitalEdgeStartTrigger(instrumentHandle As HandleRef, Source As String, Edge As Integer) As Integer
				If Is64BitProcess Then
					Return ConfigureDigitalEdgeStartTrigger64(instrumentHandle, Source, Edge)
				Else
					Return ConfigureDigitalEdgeStartTrigger32(instrumentHandle, Source, Edge)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureSoftwareEdgeStartTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSoftwareEdgeStartTrigger32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureSoftwareEdgeStartTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSoftwareEdgeStartTrigger64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function ConfigureSoftwareEdgeStartTrigger(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return ConfigureSoftwareEdgeStartTrigger64(instrumentHandle)
				Else
					Return ConfigureSoftwareEdgeStartTrigger32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_DisableStartTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DisableStartTrigger32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_DisableStartTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DisableStartTrigger64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function DisableStartTrigger(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return DisableStartTrigger64(instrumentHandle)
				Else
					Return DisableStartTrigger32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_InvalidateAllAttributes", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InvalidateAllAttributes32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_InvalidateAllAttributes", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InvalidateAllAttributes64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function InvalidateAllAttributes(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return InvalidateAllAttributes64(instrumentHandle)
				Else
					Return InvalidateAllAttributes32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ResetWithDefaults", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetWithDefaults32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ResetWithDefaults", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetWithDefaults64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function ResetWithDefaults(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return ResetWithDefaults64(instrumentHandle)
				Else
					Return ResetWithDefaults32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_Disable", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Disable32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_Disable", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Disable64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function Disable(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return Disable64(instrumentHandle)
				Else
					Return Disable32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureDigitalEdgeRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureDigitalEdgeRefTrigger32(instrumentHandle As HandleRef, Source As String, Edge As Integer, Pretrigger_Samples As Int64) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureDigitalEdgeRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureDigitalEdgeRefTrigger64(instrumentHandle As HandleRef, Source As String, Edge As Integer, Pretrigger_Samples As Int64) As Integer
			End Function

			Public Shared Function ConfigureDigitalEdgeRefTrigger(instrumentHandle As HandleRef, Source As String, Edge As Integer, Pretrigger_Samples As Int64) As Integer
				If Is64BitProcess Then
					Return ConfigureDigitalEdgeRefTrigger64(instrumentHandle, Source, Edge, Pretrigger_Samples)
				Else
					Return ConfigureDigitalEdgeRefTrigger32(instrumentHandle, Source, Edge, Pretrigger_Samples)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureIQPowerEdgeRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureIQPowerEdgeRefTrigger32(instrumentHandle As HandleRef, Source As String, Level As Double, Slope As Integer, Pretrigger_Samples As Int64) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureIQPowerEdgeRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureIQPowerEdgeRefTrigger64(instrumentHandle As HandleRef, Source As String, Level As Double, Slope As Integer, Pretrigger_Samples As Int64) As Integer
			End Function

			Public Shared Function ConfigureIQPowerEdgeRefTrigger(instrumentHandle As HandleRef, Source As String, Level As Double, Slope As Integer, Pretrigger_Samples As Int64) As Integer
				If Is64BitProcess Then
					Return ConfigureIQPowerEdgeRefTrigger64(instrumentHandle, Source, Level, Slope, Pretrigger_Samples)
				Else
					Return ConfigureIQPowerEdgeRefTrigger32(instrumentHandle, Source, Level, Slope, Pretrigger_Samples)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureSoftwareEdgeRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSoftwareEdgeRefTrigger32(instrumentHandle As HandleRef, Pretrigger_Samples As Int64) As Integer
			End Function


			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureSoftwareEdgeRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSoftwareEdgeRefTrigger64(instrumentHandle As HandleRef, Pretrigger_Samples As Int64) As Integer
			End Function

			Public Shared Function ConfigureSoftwareEdgeRefTrigger(instrumentHandle As HandleRef, Pretrigger_Samples As Int64) As Integer
				If Is64BitProcess Then
					Return ConfigureSoftwareEdgeRefTrigger64(instrumentHandle, Pretrigger_Samples)
				Else
					Return ConfigureSoftwareEdgeRefTrigger32(instrumentHandle, Pretrigger_Samples)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_DisableRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DisableRefTrigger32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_DisableRefTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DisableRefTrigger64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function DisableRefTrigger(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return DisableRefTrigger64(instrumentHandle)
				Else
					Return DisableRefTrigger32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureDigitalEdgeAdvanceTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureDigitalEdgeAdvanceTrigger32(instrumentHandle As HandleRef, Source As String, Edge As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureDigitalEdgeAdvanceTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureDigitalEdgeAdvanceTrigger64(instrumentHandle As HandleRef, Source As String, Edge As Integer) As Integer
			End Function

			Public Shared Function ConfigureDigitalEdgeAdvanceTrigger(instrumentHandle As HandleRef, Source As String, Edge As Integer) As Integer
				If Is64BitProcess Then
					Return ConfigureDigitalEdgeAdvanceTrigger64(instrumentHandle, Source, Edge)
				Else
					Return ConfigureDigitalEdgeAdvanceTrigger32(instrumentHandle, Source, Edge)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureSoftwareEdgeAdvanceTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSoftwareEdgeAdvanceTrigger32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureSoftwareEdgeAdvanceTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureSoftwareEdgeAdvanceTrigger64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function ConfigureSoftwareEdgeAdvanceTrigger(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return ConfigureSoftwareEdgeAdvanceTrigger64(instrumentHandle)
				Else
					Return ConfigureSoftwareEdgeAdvanceTrigger32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_DisableAdvanceTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DisableAdvanceTrigger32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_DisableAdvanceTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DisableAdvanceTrigger64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function DisableAdvanceTrigger(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return DisableAdvanceTrigger64(instrumentHandle)
				Else
					Return DisableAdvanceTrigger32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SendSoftwareEdgeTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SendSoftwareEdgeTrigger32(instrumentHandle As HandleRef, Trigger As Integer, Trigger_Identifier As String) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SendSoftwareEdgeTrigger", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SendSoftwareEdgeTrigger64(instrumentHandle As HandleRef, Trigger As Integer, Trigger_Identifier As String) As Integer
			End Function

			Public Shared Function SendSoftwareEdgeTrigger(instrumentHandle As HandleRef, Trigger As Integer, Trigger_Identifier As String) As Integer
				If Is64BitProcess Then
					Return SendSoftwareEdgeTrigger64(instrumentHandle, Trigger, Trigger_Identifier)
				Else
					Return SendSoftwareEdgeTrigger32(instrumentHandle, Trigger, Trigger_Identifier)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ExportSignal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ExportSignal32(instrumentHandle As HandleRef, Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ExportSignal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ExportSignal64(instrumentHandle As HandleRef, Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
			End Function

			Public Shared Function ExportSignal(instrumentHandle As HandleRef, Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
				If Is64BitProcess Then
					Return ExportSignal64(instrumentHandle, Signal, Signal_Identifier, Output_Terminal)
				Else
					Return ExportSignal32(instrumentHandle, Signal, Signal_Identifier, Output_Terminal)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigureRefClock", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureRefClock32(instrumentHandle As HandleRef, Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigureRefClock", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigureRefClock64(instrumentHandle As HandleRef, Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
			End Function

			Public Shared Function ConfigureRefClock(instrumentHandle As HandleRef, Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
				If Is64BitProcess Then
					Return ConfigureRefClock64(instrumentHandle, Ref_Clock_Source, Ref_Clock_Rate)
				Else
					Return ConfigureRefClock32(instrumentHandle, Ref_Clock_Source, Ref_Clock_Rate)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ConfigurePXIChassisClk10", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigurePXIChassisClk10_32(instrumentHandle As HandleRef, PXI_Clk_10_Source As String) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ConfigurePXIChassisClk10", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ConfigurePXIChassisClk10_64(instrumentHandle As HandleRef, PXI_Clk_10_Source As String) As Integer
			End Function

			Public Shared Function ConfigurePXIChassisClk10(instrumentHandle As HandleRef, PXI_Clk_10_Source As String) As Integer
				If Is64BitProcess Then
					Return ConfigurePXIChassisClk10_64(instrumentHandle, PXI_Clk_10_Source)
				Else
					Return ConfigurePXIChassisClk10_32(instrumentHandle, PXI_Clk_10_Source)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ResetAttribute", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetAttribute32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ResetAttribute", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetAttribute64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As Integer) As Integer
			End Function

			Public Shared Function ResetAttribute(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As Integer) As Integer
				If Is64BitProcess Then
					Return ResetAttribute64(instrumentHandle, Channel_Name, Attribute_ID)
				Else
					Return ResetAttribute32(instrumentHandle, Channel_Name, Attribute_ID)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_Initiate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Initiate32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_Initiate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Initiate64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function Initiate(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return Initiate64(instrumentHandle)
				Else
					Return Initiate32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_FetchIQSingleRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQSingleRecordComplexI16_32(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> Data As Short(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_FetchIQSingleRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQSingleRecordComplexI16_64(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> Data As Short(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			Public Shared Function FetchIQSingleRecordComplexI16(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> Data As Short(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
				If Is64BitProcess Then
					Return FetchIQSingleRecordComplexI16_64(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
						Waveform_Info)
				Else
					Return FetchIQSingleRecordComplexI16_32(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
						Waveform_Info)
				End If
			End Function
            <Obsolete()> _
   <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_FetchIQSingleRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
   Public Shared Function FetchIQSingleRecordComplexF32_32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexF32(), _
    ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function
            <Obsolete()> _
   <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_FetchIQSingleRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
   Public Shared Function FetchIQSingleRecordComplexF32_64(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexF32(), _
    ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function
            <Obsolete()> _
   Public Shared Function FetchIQSingleRecordComplexF32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexF32(), _
    ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
                If Is64BitProcess Then
                    Return FetchIQSingleRecordComplexF32_64(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
                     Waveform_Info)
                Else
                    Return FetchIQSingleRecordComplexF32_32(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
                     Waveform_Info)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_FetchIQSingleRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function FetchIQSingleRecordComplexF32_32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexNumberF32(), _
             ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_FetchIQSingleRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function FetchIQSingleRecordComplexF32_64(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexNumberF32(), _
             ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function

            Public Shared Function FetchIQSingleRecordComplexF32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal Record_Number As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, ByVal Data As niComplexNumberF32(), _
             ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
                If Is64BitProcess Then
                    Return FetchIQSingleRecordComplexF32_64(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
                     Waveform_Info)
                Else
                    Return FetchIQSingleRecordComplexF32_32(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
                     Waveform_Info)
                End If
            End Function

            <Obsolete()> _
   <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_FetchIQMultiRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
   Public Shared Function FetchIQMultiRecordComplexF32_32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, _
    ByVal Data As niComplexF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function
            <Obsolete()> _
   <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_FetchIQMultiRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
   Public Shared Function FetchIQMultiRecordComplexF32_64(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, _
    ByVal Data As niComplexF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function
            <Obsolete()> _
   Public Shared Function FetchIQMultiRecordComplexF32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, _
    ByVal Data As niComplexF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
                If Is64BitProcess Then
                    Return FetchIQMultiRecordComplexF32_64(instrumentHandle, Channel_List, StartingRecord, NumberOfRecords, Number_of_Samples, Timeout, _
                     Data, Waveform_Info)
                Else
                    Return FetchIQMultiRecordComplexF32_32(instrumentHandle, Channel_List, StartingRecord, NumberOfRecords, Number_of_Samples, Timeout, _
                     Data, Waveform_Info)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_FetchIQMultiRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function FetchIQMultiRecordComplexF32_32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, _
             ByVal Data As niComplexNumberF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_FetchIQMultiRecordComplexF32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function FetchIQMultiRecordComplexF32_64(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, _
             ByVal Data As niComplexNumberF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
            End Function

            Public Shared Function FetchIQMultiRecordComplexF32(ByVal instrumentHandle As HandleRef, ByVal Channel_List As String, ByVal StartingRecord As Int64, ByVal NumberOfRecords As Int64, ByVal Number_of_Samples As Int64, ByVal Timeout As Double, _
             ByVal Data As niComplexNumberF32(), ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
                If Is64BitProcess Then
                    Return FetchIQMultiRecordComplexF32_64(instrumentHandle, Channel_List, StartingRecord, NumberOfRecords, Number_of_Samples, Timeout, _
                     Data, Waveform_Info)
                Else
                    Return FetchIQMultiRecordComplexF32_32(instrumentHandle, Channel_List, StartingRecord, NumberOfRecords, Number_of_Samples, Timeout, _
                     Data, Waveform_Info)
                End If
            End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_FetchIQSingleRecordComplexF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQSingleRecordComplexF64_32(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> Data As niComplexNumber(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_FetchIQSingleRecordComplexF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQSingleRecordComplexF64_64(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> Data As niComplexNumber(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			Public Shared Function FetchIQSingleRecordComplexF64(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> Data As niComplexNumber(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
				If Is64BitProcess Then
					Return FetchIQSingleRecordComplexF64_64(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
						Waveform_Info)
				Else
					Return FetchIQSingleRecordComplexF64_32(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, Data, _
						Waveform_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ReadIQSingleRecordComplexF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ReadIQSingleRecordComplexF64_32(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <Out> Data As niComplexNumber(), Data_Array_Size As Int64, ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ReadIQSingleRecordComplexF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ReadIQSingleRecordComplexF64_64(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <Out> Data As niComplexNumber(), Data_Array_Size As Int64, ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			Public Shared Function ReadIQSingleRecordComplexF64(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <Out> Data As niComplexNumber(), Data_Array_Size As Int64, ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
				If Is64BitProcess Then
					Return ReadIQSingleRecordComplexF64_64(instrumentHandle, Channel_List, Timeout, Data, Data_Array_Size, Waveform_Info)
				Else
					Return ReadIQSingleRecordComplexF64_32(instrumentHandle, Channel_List, Timeout, Data, Data_Array_Size, Waveform_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_FetchIQMultiRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQMultiRecordComplexI16_32(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> Data As Short(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_FetchIQMultiRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQMultiRecordComplexI16_64(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> Data As Short(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
			End Function

			Public Shared Function FetchIQMultiRecordComplexI16(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> Data As Short(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
				If Is64BitProcess Then
					Return FetchIQMultiRecordComplexI16_64(instrumentHandle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
						Data, Waveform_Info)
				Else
					Return FetchIQMultiRecordComplexI16_32(instrumentHandle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
						Data, Waveform_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_FetchIQMultiRecordComplexF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQMultiRecordComplexF64_32(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> Data As niComplexNumber(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_FetchIQMultiRecordComplexF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQMultiRecordComplexF64_64(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> Data As niComplexNumber(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
			End Function

			Public Shared Function FetchIQMultiRecordComplexF64(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> Data As niComplexNumber(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
				If Is64BitProcess Then
					Return FetchIQMultiRecordComplexF64_64(instrumentHandle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
						Data, Waveform_Info)
				Else
					Return FetchIQMultiRecordComplexF64_32(instrumentHandle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
						Data, Waveform_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_Abort", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Abort32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_Abort", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Abort64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function Abort(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return Abort64(instrumentHandle)
				Else
					Return Abort32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ReadPowerSpectrumF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ReadPowerSpectrumF64_32(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <[In], Out> Power_Spectrum_Data As Double(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ReadPowerSpectrumF64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ReadPowerSpectrumF64_64(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <[In], Out> Power_Spectrum_Data As Double(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
			End Function

			Public Shared Function ReadPowerSpectrumF64(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <[In], Out> Power_Spectrum_Data As Double(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
				If Is64BitProcess Then
					Return ReadPowerSpectrumF64_64(instrumentHandle, Channel_List, Timeout, Power_Spectrum_Data, Data_Array_Size, Spectrum_Info)
				Else
					Return ReadPowerSpectrumF64_32(instrumentHandle, Channel_List, Timeout, Power_Spectrum_Data, Data_Array_Size, Spectrum_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetNumberOfSpectralLines", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetNumberOfSpectralLines32(instrumentHandle As HandleRef, Channel_List As String, ByRef Number_of_Spectral_Lines As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetNumberOfSpectralLines", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetNumberOfSpectralLines64(instrumentHandle As HandleRef, Channel_List As String, ByRef Number_of_Spectral_Lines As Integer) As Integer
			End Function

			Public Shared Function GetNumberOfSpectralLines(instrumentHandle As HandleRef, Channel_List As String, ByRef Number_of_Spectral_Lines As Integer) As Integer
				If Is64BitProcess Then
					Return GetNumberOfSpectralLines64(instrumentHandle, Channel_List, Number_of_Spectral_Lines)
				Else
					Return GetNumberOfSpectralLines32(instrumentHandle, Channel_List, Number_of_Spectral_Lines)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CheckAcquisitionStatus", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CheckAcquisitionStatus32(instrumentHandle As HandleRef, ByRef Is_Done As UShort) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CheckAcquisitionStatus", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CheckAcquisitionStatus64(instrumentHandle As HandleRef, ByRef Is_Done As UShort) As Integer
			End Function

			Public Shared Function CheckAcquisitionStatus(instrumentHandle As HandleRef, ByRef Is_Done As UShort) As Integer
				If Is64BitProcess Then
					Return CheckAcquisitionStatus64(instrumentHandle, Is_Done)
				Else
					Return CheckAcquisitionStatus32(instrumentHandle, Is_Done)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_reset", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function reset32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_reset", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function reset64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function reset(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return reset64(instrumentHandle)
				Else
					Return reset32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_Commit", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Commit32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_Commit", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function Commit64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function Commit(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return Commit64(instrumentHandle)
				Else
					Return Commit32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_self_test", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function self_test32(instrumentHandle As HandleRef, ByRef testResult As Short, testMessage As System.Text.StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_self_test", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function self_test64(instrumentHandle As HandleRef, ByRef testResult As Short, testMessage As System.Text.StringBuilder) As Integer
			End Function

			Public Shared Function self_test(instrumentHandle As HandleRef, ByRef testResult As Short, testMessage As System.Text.StringBuilder) As Integer
				If Is64BitProcess Then
					Return self_test64(instrumentHandle, testResult, testMessage)
				Else
					Return self_test32(instrumentHandle, testResult, testMessage)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SelfCal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SelfCal32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SelfCal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SelfCal64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function SelfCal(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return SelfCal64(instrumentHandle)
				Else
					Return SelfCal32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_PerformThermalCorrection", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function PerformThermalCorrection32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_PerformThermalCorrection", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function PerformThermalCorrection64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function PerformThermalCorrection(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return PerformThermalCorrection64(instrumentHandle)
				Else
					Return PerformThermalCorrection32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetFetchBacklog", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetFetchBacklog32(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, ByRef Backlog As Int64) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetFetchBacklog", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetFetchBacklog64(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, ByRef Backlog As Int64) As Integer
			End Function

			Public Shared Function GetFetchBacklog(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, ByRef Backlog As Int64) As Integer
				If Is64BitProcess Then
					Return GetFetchBacklog64(instrumentHandle, Channel_List, Record_Number, Backlog)
				Else
					Return GetFetchBacklog32(instrumentHandle, Channel_List, Record_Number, Backlog)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_revision_query", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function revision_query32(instrumentHandle As HandleRef, Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_revision_query", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function revision_query64(instrumentHandle As HandleRef, Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
			End Function

			Public Shared Function revision_query(instrumentHandle As HandleRef, Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
				If Is64BitProcess Then
					Return revision_query64(instrumentHandle, Instrument_Driver_Revision, Firmware_Revision)
				Else
					Return revision_query32(instrumentHandle, Instrument_Driver_Revision, Firmware_Revision)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetSpectralInfoForSMT", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetSpectralInfoForSMT32(instrumentHandle As HandleRef, ByRef Spectrum_Info As SmtSpectrumInfo) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetSpectralInfoForSMT", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetSpectralInfoForSMT64(instrumentHandle As HandleRef, ByRef Spectrum_Info As SmtSpectrumInfo) As Integer
			End Function

			Public Shared Function GetSpectralInfoForSMT(instrumentHandle As HandleRef, ByRef Spectrum_Info As SmtSpectrumInfo) As Integer
				If Is64BitProcess Then
					Return GetSpectralInfoForSMT64(instrumentHandle, Spectrum_Info)
				Else
					Return GetSpectralInfoForSMT32(instrumentHandle, Spectrum_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetFrequencyResponse", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetFrequencyResponse32(instrumentHandle As HandleRef, Channel_List As String, Buffer_Size As Integer, <[In], Out> Frequencies As Double(), <[In], Out> Magnitude_Response As Double(), <[In], Out> Phase_Response As Double(), _
				ByRef Number_of_Frequencies As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetFrequencyResponse", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetFrequencyResponse64(instrumentHandle As HandleRef, Channel_List As String, Buffer_Size As Integer, <[In], Out> Frequencies As Double(), <[In], Out> Magnitude_Response As Double(), <[In], Out> Phase_Response As Double(), _
				ByRef Number_of_Frequencies As Integer) As Integer
			End Function

			Public Shared Function GetFrequencyResponse(instrumentHandle As HandleRef, Channel_List As String, Buffer_Size As Integer, <[In], Out> Frequencies As Double(), <[In], Out> Magnitude_Response As Double(), <[In], Out> Phase_Response As Double(), _
				ByRef Number_of_Frequencies As Integer) As Integer
				If Is64BitProcess Then
					Return GetFrequencyResponse64(instrumentHandle, Channel_List, Buffer_Size, Frequencies, Magnitude_Response, Phase_Response, _
						Number_of_Frequencies)
				Else
					Return GetFrequencyResponse32(instrumentHandle, Channel_List, Buffer_Size, Frequencies, Magnitude_Response, Phase_Response, _
						Number_of_Frequencies)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_close", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function close32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_close", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function close64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function close(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return close64(instrumentHandle)
				Else
					Return close32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_error_message", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function error_message32(instrumentHandle As HandleRef, Error_Code As Integer, Error_Message_2 As System.Text.StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_error_message", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function error_message64(instrumentHandle As HandleRef, Error_Code As Integer, Error_Message_2 As System.Text.StringBuilder) As Integer
			End Function

			Public Shared Function error_message(instrumentHandle As HandleRef, Error_Code As Integer, Error_Message_2 As System.Text.StringBuilder) As Integer
				If Is64BitProcess Then
					Return error_message64(instrumentHandle, Error_Code, Error_Message_2)
				Else
					Return error_message32(instrumentHandle, Error_Code, Error_Message_2)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetAttributeViInt32", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViInt32_32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetAttributeViInt32", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViInt32_64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Integer) As Integer
			End Function

			Public Shared Function GetAttributeViInt32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Integer) As Integer
				If Is64BitProcess Then
					Return GetAttributeViInt32_64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return GetAttributeViInt32_32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetAttributeViInt64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViInt64_32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Int64) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetAttributeViInt64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViInt64_64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Int64) As Integer
			End Function

			Public Shared Function GetAttributeViInt64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Int64) As Integer
				If Is64BitProcess Then
					Return GetAttributeViInt64_64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return GetAttributeViInt64_32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetAttributeViReal64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViReal64_32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetAttributeViReal64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViReal64_64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Double) As Integer
			End Function

			Public Shared Function GetAttributeViReal64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As Double) As Integer
				If Is64BitProcess Then
					Return GetAttributeViReal64_64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return GetAttributeViReal64_32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetAttributeViString", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViString32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Buffer_Size As Integer, Attribute_Value As System.Text.StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetAttributeViString", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViString64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Buffer_Size As Integer, Attribute_Value As System.Text.StringBuilder) As Integer
			End Function

			Public Shared Function GetAttributeViString(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Buffer_Size As Integer, Attribute_Value As System.Text.StringBuilder) As Integer
				If Is64BitProcess Then
					Return GetAttributeViString64(instrumentHandle, Channel_Name, Attribute_ID, Buffer_Size, Attribute_Value)
				Else
					Return GetAttributeViString32(instrumentHandle, Channel_Name, Attribute_ID, Buffer_Size, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetAttributeViBoolean", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViBoolean32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As UShort) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetAttributeViBoolean", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViBoolean64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As UShort) As Integer
			End Function

			Public Shared Function GetAttributeViBoolean(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As UShort) As Integer
				If Is64BitProcess Then
					Return GetAttributeViBoolean64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return GetAttributeViBoolean32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetAttributeViSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViSession32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As System.IntPtr) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetAttributeViSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetAttributeViSession64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As System.IntPtr) As Integer
			End Function

			Public Shared Function GetAttributeViSession(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, ByRef Attribute_Value As System.IntPtr) As Integer
				If Is64BitProcess Then
					Return GetAttributeViSession64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return GetAttributeViSession32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetAttributeViInt32", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViInt32_32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetAttributeViInt32", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViInt32_64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Integer) As Integer
			End Function

			Public Shared Function SetAttributeViInt32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Integer) As Integer
				If Is64BitProcess Then
					Return SetAttributeViInt32_64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return SetAttributeViInt32_32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetAttributeViInt64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViInt64_32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Long) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetAttributeViInt64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViInt64_64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Long) As Integer
			End Function

			Public Shared Function SetAttributeViInt64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Long) As Integer
				If Is64BitProcess Then
					Return SetAttributeViInt64_64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return SetAttributeViInt64_32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetAttributeViReal64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViReal64_32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetAttributeViReal64", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViReal64_64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Double) As Integer
			End Function

			Public Shared Function SetAttributeViReal64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As Double) As Integer
				If Is64BitProcess Then
					Return SetAttributeViReal64_64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return SetAttributeViReal64_32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetAttributeViString", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViString32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As String) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetAttributeViString", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViString64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As String) As Integer
			End Function

			Public Shared Function SetAttributeViString(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As String) As Integer
				If Is64BitProcess Then
					Return SetAttributeViString64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return SetAttributeViString32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetAttributeViBoolean", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViBoolean32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As UShort) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetAttributeViBoolean", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViBoolean64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As UShort) As Integer
			End Function

			Public Shared Function SetAttributeViBoolean(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As UShort) As Integer
				If Is64BitProcess Then
					Return SetAttributeViBoolean64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return SetAttributeViBoolean32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetAttributeViSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViSession32(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As System.IntPtr) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetAttributeViSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetAttributeViSession64(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As System.IntPtr) As Integer
			End Function

			Public Shared Function SetAttributeViSession(instrumentHandle As HandleRef, Channel_Name As String, Attribute_ID As niRFSAProperties, Attribute_Value As System.IntPtr) As Integer
				If Is64BitProcess Then
					Return SetAttributeViSession64(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				Else
					Return SetAttributeViSession32(instrumentHandle, Channel_Name, Attribute_ID, Attribute_Value)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetError", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetError32(instrumentHandle As HandleRef, ByRef errorCode As Integer, BufferSize As Integer, Description As System.Text.StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetError", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetError64(instrumentHandle As HandleRef, ByRef errorCode As Integer, BufferSize As Integer, Description As System.Text.StringBuilder) As Integer
			End Function

			Public Shared Function GetError(instrumentHandle As HandleRef, ByRef errorCode As Integer, BufferSize As Integer, Description As System.Text.StringBuilder) As Integer
				If Is64BitProcess Then
					Return GetError64(instrumentHandle, errorCode, BufferSize, Description)
				Else
					Return GetError32(instrumentHandle, errorCode, BufferSize, Description)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalAdjustIFAttenuationCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustIFAttenuationCalibration32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, iFFilter As Integer, numberofAttenuators As Integer, attenuatorSettings As Double(), measurement As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalAdjustIFAttenuationCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustIFAttenuationCalibration64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, iFFilter As Integer, numberofAttenuators As Integer, attenuatorSettings As Double(), measurement As Double) As Integer
			End Function

			Public Shared Function CalAdjustIFAttenuationCalibration(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, iFFilter As Integer, numberofAttenuators As Integer, attenuatorSettings As Double(), measurement As Double) As Integer
				If Is64BitProcess Then
					Return CalAdjustIFAttenuationCalibration64(instrumentHandle, channelList, iFFilter, numberofAttenuators, attenuatorSettings, measurement)
				Else
					Return CalAdjustIFAttenuationCalibration32(instrumentHandle, channelList, iFFilter, numberofAttenuators, attenuatorSettings, measurement)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalAdjustIFResponseCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustIFResponseCalibration32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, iFFilter As Integer, rFFrequency As Double, bandwidth As Double, numberofMeasurements As Integer, _
				measurements As Double()) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalAdjustIFResponseCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustIFResponseCalibration64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, iFFilter As Integer, rFFrequency As Double, bandwidth As Double, numberofMeasurements As Integer, _
				measurements As Double()) As Integer
			End Function

			Public Shared Function CalAdjustIFResponseCalibration(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, iFFilter As Integer, rFFrequency As Double, bandwidth As Double, numberofMeasurements As Integer, _
				measurements As Double()) As Integer
				If Is64BitProcess Then
					Return CalAdjustIFResponseCalibration64(instrumentHandle, channelList, iFFilter, rFFrequency, bandwidth, numberofMeasurements, _
						measurements)
				Else
					Return CalAdjustIFResponseCalibration32(instrumentHandle, channelList, iFFilter, rFFrequency, bandwidth, numberofMeasurements, _
						measurements)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalAdjustRefLevelCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustRefLevelCalibration32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, referenceLevelCalDataType As Integer, rFBand As Integer, attenuatorTableNumber As Integer, frequency As Double, _
				measurement As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalAdjustRefLevelCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustRefLevelCalibration64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, referenceLevelCalDataType As Integer, rFBand As Integer, attenuatorTableNumber As Integer, frequency As Double, _
				measurement As Double) As Integer
			End Function

			Public Shared Function CalAdjustRefLevelCalibration(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, referenceLevelCalDataType As Integer, rFBand As Integer, attenuatorTableNumber As Integer, frequency As Double, _
				measurement As Double) As Integer
				If Is64BitProcess Then
					Return CalAdjustRefLevelCalibration64(instrumentHandle, channelList, referenceLevelCalDataType, rFBand, attenuatorTableNumber, frequency, _
						measurement)
				Else
					Return CalAdjustRefLevelCalibration32(instrumentHandle, channelList, referenceLevelCalDataType, rFBand, attenuatorTableNumber, frequency, _
						measurement)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalSetTemperature", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalSetTemperature32(instrumentHandle As System.Runtime.InteropServices.HandleRef, temperaturedegreesC As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalSetTemperature", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalSetTemperature64(instrumentHandle As System.Runtime.InteropServices.HandleRef, temperaturedegreesC As Double) As Integer
			End Function

			Public Shared Function CalSetTemperature(instrumentHandle As System.Runtime.InteropServices.HandleRef, temperaturedegreesC As Double) As Integer
				If Is64BitProcess Then
					Return CalSetTemperature64(instrumentHandle, temperaturedegreesC)
				Else
					Return CalSetTemperature32(instrumentHandle, temperaturedegreesC)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ChangeExtCalPassword", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ChangeExtCalPassword32(instrumentHandle As System.Runtime.InteropServices.HandleRef, oldpassword As String, newpassword As String) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ChangeExtCalPassword", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ChangeExtCalPassword64(instrumentHandle As System.Runtime.InteropServices.HandleRef, oldpassword As String, newpassword As String) As Integer
			End Function

			Public Shared Function ChangeExtCalPassword(instrumentHandle As System.Runtime.InteropServices.HandleRef, oldpassword As String, newpassword As String) As Integer
				If Is64BitProcess Then
					Return ChangeExtCalPassword64(instrumentHandle, oldpassword, newpassword)
				Else
					Return ChangeExtCalPassword32(instrumentHandle, oldpassword, newpassword)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CloseCalibrationStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseCalibrationStep32(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CloseCalibrationStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseCalibrationStep64(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			Public Shared Function CloseCalibrationStep(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
				If Is64BitProcess Then
					Return CloseCalibrationStep64(instrumentHandle)
				Else
					Return CloseCalibrationStep32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CloseExtCal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseExtCal32(instrumentHandle As System.Runtime.InteropServices.HandleRef, action As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CloseExtCal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseExtCal64(instrumentHandle As System.Runtime.InteropServices.HandleRef, action As Integer) As Integer
			End Function

			Public Shared Function CloseExtCal(instrumentHandle As System.Runtime.InteropServices.HandleRef, action As Integer) As Integer
				If Is64BitProcess Then
					Return CloseExtCal64(instrumentHandle, action)
				Else
					Return CloseExtCal32(instrumentHandle, action)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CreateConfigurationList", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CreateConfigurationList32(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String, numberOfListAttributes As Integer, listAttributeIDs As niRFSAProperties(), setAsActiveList As Boolean) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CreateConfigurationList", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CreateConfigurationList64(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String, numberOfListAttributes As Integer, listAttributeIDs As niRFSAProperties(), setAsActiveList As Boolean) As Integer
			End Function

			Public Shared Function CreateConfigurationList(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String, numberOfListAttributes As Integer, listAttributeIDs As niRFSAProperties(), setAsActiveList As Boolean) As Integer
				If Is64BitProcess Then
					Return CreateConfigurationList64(instrumentHandle, listName, numberOfListAttributes, listAttributeIDs, setAsActiveList)
				Else
					Return CreateConfigurationList32(instrumentHandle, listName, numberOfListAttributes, listAttributeIDs, setAsActiveList)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CreateConfigurationListStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CreateConfigurationListStep32(instrumentHandle As System.Runtime.InteropServices.HandleRef, setAsActiveStep As Boolean) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CreateConfigurationListStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CreateConfigurationListStep64(instrumentHandle As System.Runtime.InteropServices.HandleRef, setAsActiveStep As Boolean) As Integer
			End Function

			Public Shared Function CreateConfigurationListStep(instrumentHandle As System.Runtime.InteropServices.HandleRef, setAsActiveStep As Boolean) As Integer
				If Is64BitProcess Then
					Return CreateConfigurationListStep64(instrumentHandle, setAsActiveStep)
				Else
					Return CreateConfigurationListStep32(instrumentHandle, setAsActiveStep)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_DeleteConfigurationList", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DeleteConfigurationList32(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_DeleteConfigurationList", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function DeleteConfigurationList64(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String) As Integer
			End Function

			Public Shared Function DeleteConfigurationList(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String) As Integer
				If Is64BitProcess Then
					Return DeleteConfigurationList64(instrumentHandle, listName)
				Else
					Return DeleteConfigurationList32(instrumentHandle, listName)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetCalUserDefinedInfo", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetCalUserDefinedInfo32(instrumentHandle As System.Runtime.InteropServices.HandleRef, userdefinedinfo As StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetCalUserDefinedInfo", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetCalUserDefinedInfo64(instrumentHandle As System.Runtime.InteropServices.HandleRef, userdefinedinfo As StringBuilder) As Integer
			End Function

			Public Shared Function GetCalUserDefinedInfo(instrumentHandle As System.Runtime.InteropServices.HandleRef, userdefinedinfo As StringBuilder) As Integer
				If Is64BitProcess Then
					Return GetCalUserDefinedInfo64(instrumentHandle, userdefinedinfo)
				Else
					Return GetCalUserDefinedInfo32(instrumentHandle, userdefinedinfo)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetCalUserDefinedInfoMaxSize", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetCalUserDefinedInfoMaxSize32(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef infoSize As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetCalUserDefinedInfoMaxSize", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetCalUserDefinedInfoMaxSize64(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef infoSize As Integer) As Integer
			End Function

			Public Shared Function GetCalUserDefinedInfoMaxSize(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef infoSize As Integer) As Integer
				If Is64BitProcess Then
					Return GetCalUserDefinedInfoMaxSize64(instrumentHandle, infoSize)
				Else
					Return GetCalUserDefinedInfoMaxSize32(instrumentHandle, infoSize)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetExtCalLastDateAndTime", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetExtCalLastDateAndTime32(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, ByRef minute As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetExtCalLastDateAndTime", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetExtCalLastDateAndTime64(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, ByRef minute As Integer) As Integer
			End Function

			Public Shared Function GetExtCalLastDateAndTime(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, ByRef minute As Integer) As Integer
				If Is64BitProcess Then
					Return GetExtCalLastDateAndTime64(instrumentHandle, year, month, day, hour, minute)
				Else
					Return GetExtCalLastDateAndTime32(instrumentHandle, year, month, day, hour, minute)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetExtCalLastTemp", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetExtCalLastTemp32(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef temperature As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetExtCalLastTemp", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetExtCalLastTemp64(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef temperature As Double) As Integer
			End Function

			Public Shared Function GetExtCalLastTemp(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef temperature As Double) As Integer
				If Is64BitProcess Then
					Return GetExtCalLastTemp64(instrumentHandle, temperature)
				Else
					Return GetExtCalLastTemp32(instrumentHandle, temperature)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetExtCalRecommendedInterval", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetExtCalRecommendedInterval32(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef months As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetExtCalRecommendedInterval", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetExtCalRecommendedInterval64(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef months As Integer) As Integer
			End Function

			Public Shared Function GetExtCalRecommendedInterval(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef months As Integer) As Integer
				If Is64BitProcess Then
					Return GetExtCalRecommendedInterval64(instrumentHandle, months)
				Else
					Return GetExtCalRecommendedInterval32(instrumentHandle, months)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetNormalizationCoefficients", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetNormalizationCoefficients32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, bufferSize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberofCoefficientSets As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetNormalizationCoefficients", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetNormalizationCoefficients64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, bufferSize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberofCoefficientSets As Integer) As Integer
			End Function

			Public Shared Function GetNormalizationCoefficients(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, bufferSize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberofCoefficientSets As Integer) As Integer
				If Is64BitProcess Then
					Return GetNormalizationCoefficients64(instrumentHandle, channelList, bufferSize, coefficientInfo, numberofCoefficientSets)
				Else
					Return GetNormalizationCoefficients32(instrumentHandle, channelList, bufferSize, coefficientInfo, numberofCoefficientSets)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetScalingCoefficients", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetScalingCoefficients32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, arraySize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberOfCoefficientSets As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetScalingCoefficients", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetScalingCoefficients64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, arraySize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberOfCoefficientSets As Integer) As Integer
			End Function

			Public Shared Function GetScalingCoefficients(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, arraySize As Integer, ByRef coefficientInfo As niRFSA_coefficientInfo, ByRef numberOfCoefficientSets As Integer) As Integer
				If Is64BitProcess Then
					Return GetScalingCoefficients64(instrumentHandle, channelList, arraySize, coefficientInfo, numberOfCoefficientSets)
				Else
					Return GetScalingCoefficients32(instrumentHandle, channelList, arraySize, coefficientInfo, numberOfCoefficientSets)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetStreamEndpointHandle", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetStreamEndpointHandle32(instrumentHandle As System.Runtime.InteropServices.HandleRef, streamEndpoint As String, ByRef writerHandle As UInteger) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetStreamEndpointHandle", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetStreamEndpointHandle64(instrumentHandle As System.Runtime.InteropServices.HandleRef, streamEndpoint As String, ByRef writerHandle As UInteger) As Integer
			End Function

			Public Shared Function GetStreamEndpointHandle(instrumentHandle As System.Runtime.InteropServices.HandleRef, streamEndpoint As String, ByRef writerHandle As UInteger) As Integer
				If Is64BitProcess Then
					Return GetStreamEndpointHandle64(instrumentHandle, streamEndpoint, writerHandle)
				Else
					Return GetStreamEndpointHandle32(instrumentHandle, streamEndpoint, writerHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_InitExtCal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitExtCal32(resourceName As String, password As String, optionstring As String, ByRef instrumentHandle As System.IntPtr) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_InitExtCal", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitExtCal64(resourceName As String, password As String, optionstring As String, ByRef instrumentHandle As System.IntPtr) As Integer
			End Function

			Public Shared Function InitExtCal(resourceName As String, password As String, optionstring As String, ByRef instrumentHandle As System.IntPtr) As Integer
				If Is64BitProcess Then
					Return InitExtCal64(resourceName, password, optionstring, instrumentHandle)
				Else
					Return InitExtCal32(resourceName, password, optionstring, instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_InitializeCalibrationStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitializeCalibrationStep32(instrumentHandle As System.Runtime.InteropServices.HandleRef, calibrationstep As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_InitializeCalibrationStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitializeCalibrationStep64(instrumentHandle As System.Runtime.InteropServices.HandleRef, calibrationstep As Integer) As Integer
			End Function

			Public Shared Function InitializeCalibrationStep(instrumentHandle As System.Runtime.InteropServices.HandleRef, calibrationstep As Integer) As Integer
				If Is64BitProcess Then
					Return InitializeCalibrationStep64(instrumentHandle, calibrationstep)
				Else
					Return InitializeCalibrationStep32(instrumentHandle, calibrationstep)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ResetDevice", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetDevice32(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ResetDevice", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetDevice64(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			Public Shared Function ResetDevice(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
				If Is64BitProcess Then
					Return ResetDevice64(instrumentHandle)
				Else
					Return ResetDevice32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetCalUserDefinedInfo", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetCalUserDefinedInfo32(instrumentHandle As System.Runtime.InteropServices.HandleRef, userdefinedinfo As String) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetCalUserDefinedInfo", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetCalUserDefinedInfo64(instrumentHandle As System.Runtime.InteropServices.HandleRef, userdefinedinfo As String) As Integer
			End Function

			Public Shared Function SetCalUserDefinedInfo(instrumentHandle As System.Runtime.InteropServices.HandleRef, userdefinedinfo As String) As Integer
				If Is64BitProcess Then
					Return SetCalUserDefinedInfo64(instrumentHandle, userdefinedinfo)
				Else
					Return SetCalUserDefinedInfo32(instrumentHandle, userdefinedinfo)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_FetchIQSingleRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQSingleRecordComplexI16_32(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> data As niComplexI16(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_FetchIQSingleRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQSingleRecordComplexI16_64(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, <Out> data As niComplexI16(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
			End Function

			Public Shared Function FetchIQSingleRecordComplexI16(instrumentHandle As HandleRef, Channel_List As String, Record_Number As Int64, Number_of_Samples As Int64, Timeout As Double, ByRef data As niComplexI16(), _
				ByRef Waveform_Info As niRFSA_wfmInfo) As Integer
				If Is64BitProcess Then
					Return FetchIQSingleRecordComplexI16_64(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, data, _
						Waveform_Info)
				Else
					Return FetchIQSingleRecordComplexI16_32(instrumentHandle, Channel_List, Record_Number, Number_of_Samples, Timeout, data, _
						Waveform_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_FetchIQMultiRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQMultiRecordComplexI16_32(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> data As niComplexI16(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_FetchIQMultiRecordComplexI16", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function FetchIQMultiRecordComplexI16_64(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				<Out> data As niComplexI16(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
			End Function

			Public Shared Function FetchIQMultiRecordComplexI16(instrumentHandle As HandleRef, Channel_List As String, Starting_Record As Int64, Number_of_Records As Int64, Number_of_Samples As Int64, Timeout As Double, _
				ByRef data As niComplexI16(), <Out> Waveform_Info As niRFSA_wfmInfo()) As Integer
				If Is64BitProcess Then
					Return FetchIQMultiRecordComplexI16_64(instrumentHandle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
						data, Waveform_Info)
				Else
					Return FetchIQMultiRecordComplexI16_32(instrumentHandle, Channel_List, Starting_Record, Number_of_Records, Number_of_Samples, Timeout, _
						data, Waveform_Info)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalAdjustDownconverterGain", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustDownconverterGain32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, frequency As Double, gain As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalAdjustDownconverterGain", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustDownconverterGain64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, frequency As Double, gain As Double) As Integer
			End Function

			Public Shared Function CalAdjustDownconverterGain(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, frequency As Double, gain As Double) As Integer
				If Is64BitProcess Then
					Return CalAdjustDownconverterGain64(instrumentHandle, channelList, frequency, gain)
				Else
					Return CalAdjustDownconverterGain32(instrumentHandle, channelList, frequency, gain)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CloseExternalAlignment", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseExternalAlignment32(instrumentHandle As System.Runtime.InteropServices.HandleRef, action As Int32) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CloseExternalAlignment", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseExternalAlignment64(instrumentHandle As System.Runtime.InteropServices.HandleRef, action As Int32) As Integer
			End Function

			Public Shared Function CloseExternalAlignment(instrumentHandle As System.Runtime.InteropServices.HandleRef, action As Int32) As Integer
				If Is64BitProcess Then
					Return CloseExternalAlignment64(instrumentHandle, action)
				Else
					Return CloseExternalAlignment32(instrumentHandle, action)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CloseExternalAlignmentStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseExternalAlignmentStep32(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CloseExternalAlignmentStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CloseExternalAlignmentStep64(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			Public Shared Function CloseExternalAlignmentStep(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
				If Is64BitProcess Then
					Return CloseExternalAlignmentStep64(instrumentHandle)
				Else
					Return CloseExternalAlignmentStep32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ExtCalStoreBaselineForSelfCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ExtCalStoreBaselineForSelfCalibration32(instrumentHandle As System.Runtime.InteropServices.HandleRef, password As String, stepToRun As Long) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ExtCalStoreBaselineForSelfCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ExtCalStoreBaselineForSelfCalibration64(instrumentHandle As System.Runtime.InteropServices.HandleRef, password As String, stepToRun As Long) As Integer
			End Function

			Public Shared Function ExtCalStoreBaselineForSelfCalibration(instrumentHandle As System.Runtime.InteropServices.HandleRef, password As String, stepToRun As Long) As Integer
				If Is64BitProcess Then
					Return ExtCalStoreBaselineForSelfCalibration64(instrumentHandle, password, stepToRun)
				Else
					Return ExtCalStoreBaselineForSelfCalibration32(instrumentHandle, password, stepToRun)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ExternalAlignmentAdjustPreselector", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ExternalAlignmentAdjustPreselector32(instrumentHandle As System.Runtime.InteropServices.HandleRef, numberOfCoefficients As Int32, coefficients As Double()) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ExternalAlignmentAdjustPreselector", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ExternalAlignmentAdjustPreselector64(instrumentHandle As System.Runtime.InteropServices.HandleRef, numberOfCoefficients As Int32, coefficients As Double()) As Integer
			End Function

			Public Shared Function ExternalAlignmentAdjustPreselector(instrumentHandle As System.Runtime.InteropServices.HandleRef, numberOfCoefficients As Int32, coefficients As Double()) As Integer
				If Is64BitProcess Then
					Return ExternalAlignmentAdjustPreselector64(instrumentHandle, numberOfCoefficients, coefficients)
				Else
					Return ExternalAlignmentAdjustPreselector32(instrumentHandle, numberOfCoefficients, coefficients)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetDeviceResponse", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetDeviceResponse32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, responseType As Integer, bufferSize As Integer, <[In], Out> frequencies As Double(), <[In], Out> magnitudeResponse As Double(), _
				<[In], Out> phaseResponse As Double(), ByRef numberofFrequencies As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetDeviceResponse", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetDeviceResponse64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, responseType As Integer, bufferSize As Integer, <[In], Out> frequencies As Double(), <[In], Out> magnitudeResponse As Double(), _
				<[In], Out> phaseResponse As Double(), ByRef numberofFrequencies As Integer) As Integer
			End Function

			Public Shared Function GetDeviceResponse(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, responseType As Integer, bufferSize As Integer, <[In], Out> frequencies As Double(), <[In], Out> magnitudeResponse As Double(), _
				<[In], Out> phaseResponse As Double(), ByRef numberofFrequencies As Integer) As Integer
				If Is64BitProcess Then
					Return GetDeviceResponse64(instrumentHandle, channelList, responseType, bufferSize, frequencies, magnitudeResponse, _
						phaseResponse, numberofFrequencies)
				Else
					Return GetDeviceResponse32(instrumentHandle, channelList, responseType, bufferSize, frequencies, magnitudeResponse, _
						phaseResponse, numberofFrequencies)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SetUserData", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetUserData32(instrumentHandle As System.Runtime.InteropServices.HandleRef, identifier As String, bufferSize As Integer, data As Byte()) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SetUserData", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SetUserData64(instrumentHandle As System.Runtime.InteropServices.HandleRef, identifier As String, bufferSize As Integer, data As Byte()) As Integer
			End Function

			Public Shared Function SetUserData(instrumentHandle As System.Runtime.InteropServices.HandleRef, identifier As String, bufferSize As Integer, data As Byte()) As Integer
				If Is64BitProcess Then
					Return SetUserData64(instrumentHandle, identifier, bufferSize, data)
				Else
					Return SetUserData32(instrumentHandle, identifier, bufferSize, data)
				End If
			End Function


			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetUserData", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetUserData32(instrumentHandle As System.Runtime.InteropServices.HandleRef, identifier As String, bufferSize As Integer, data As Byte(), ByRef actualDataSize As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetUserData", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetUserData64(instrumentHandle As System.Runtime.InteropServices.HandleRef, identifier As String, bufferSize As Integer, data As Byte(), ByRef actualDataSize As Integer) As Integer
			End Function

			Public Shared Function GetUserData(instrumentHandle As System.Runtime.InteropServices.HandleRef, identifier As String, bufferSize As Integer, data As Byte(), ByRef actualDataSize As Integer) As Integer
				If Is64BitProcess Then
					Return GetUserData64(instrumentHandle, identifier, bufferSize, data, actualDataSize)
				Else
					Return GetUserData32(instrumentHandle, identifier, bufferSize, data, actualDataSize)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_EnableSessionAccess", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function EnableSessionAccess32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, enable As Boolean) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_EnableSessionAccess", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function EnableSessionAccess64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, enable As Boolean) As Integer
			End Function

			Public Shared Function EnableSessionAccess(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, enable As Boolean) As Integer
				If Is64BitProcess Then
					Return EnableSessionAccess64(instrumentHandle, channelList, enable)
				Else
					Return EnableSessionAccess32(instrumentHandle, channelList, enable)
				End If
			End Function


			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetGainReferenceCalBaseline", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetGainReferenceCalBaseline32(instrumentHandle As System.Runtime.InteropServices.HandleRef, bufferSize As Integer, <[In], Out> gainReferenceCalConstants As Double(), ByRef numberofRefCalConstants As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetGainReferenceCalBaseline", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetGainReferenceCalBaseline64(instrumentHandle As System.Runtime.InteropServices.HandleRef, bufferSize As Integer, <[In], Out> gainReferenceCalConstants As Double(), ByRef numberofRefCalConstants As Integer) As Integer
			End Function

			Public Shared Function GetGainReferenceCalBaseline(instrumentHandle As System.Runtime.InteropServices.HandleRef, bufferSize As Integer, <[In], Out> gainReferenceCalConstants As Double(), ByRef numberofRefCalConstants As Integer) As Integer
				If Is64BitProcess Then
					Return GetGainReferenceCalBaseline64(instrumentHandle, bufferSize, gainReferenceCalConstants, numberofRefCalConstants)
				Else
					Return GetGainReferenceCalBaseline32(instrumentHandle, bufferSize, gainReferenceCalConstants, numberofRefCalConstants)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetRelayName", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetRelayName32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, indexofRelay As Integer, name As StringBuilder, ByRef bufferSize As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetRelayName", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetRelayName64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, indexofRelay As Integer, name As StringBuilder, ByRef bufferSize As Integer) As Integer
			End Function

			Public Shared Function GetRelayName(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, indexofRelay As Integer, name As StringBuilder, ByRef bufferSize As Integer) As Integer
				If Is64BitProcess Then
					Return GetRelayName64(instrumentHandle, channelList, indexofRelay, name, bufferSize)
				Else
					Return GetRelayName32(instrumentHandle, channelList, indexofRelay, name, bufferSize)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetRelayOperationsCount", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetRelayOperationsCount32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, <[In], Out> operationsCountArray As Integer(), ByRef bufferSize As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetRelayOperationsCount", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetRelayOperationsCount64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, <[In], Out> operationsCountArray As Integer(), ByRef bufferSize As Integer) As Integer
			End Function

			Public Shared Function GetRelayOperationsCount(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, <[In], Out> operationsCountArray As Integer(), ByRef bufferSize As Integer) As Integer
				If Is64BitProcess Then
					Return GetRelayOperationsCount64(instrumentHandle, channelList, operationsCountArray, bufferSize)
				Else
					Return GetRelayOperationsCount32(instrumentHandle, channelList, operationsCountArray, bufferSize)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetSelfCalLastDateAndTime", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetSelfCalLastDateAndTime32(instrumentHandle As System.Runtime.InteropServices.HandleRef, selfCalibrationStep As Long, ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, _
				ByRef minute As Integer) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetSelfCalLastDateAndTime", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetSelfCalLastDateAndTime64(instrumentHandle As System.Runtime.InteropServices.HandleRef, selfCalibrationStep As Long, ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, _
				ByRef minute As Integer) As Integer
			End Function

			Public Shared Function GetSelfCalLastDateAndTime(instrumentHandle As System.Runtime.InteropServices.HandleRef, selfCalibrationStep As Long, ByRef year As Integer, ByRef month As Integer, ByRef day As Integer, ByRef hour As Integer, _
				ByRef minute As Integer) As Integer
				If Is64BitProcess Then
					Return GetSelfCalLastDateAndTime64(instrumentHandle, selfCalibrationStep, year, month, day, hour, _
						minute)
				Else
					Return GetSelfCalLastDateAndTime32(instrumentHandle, selfCalibrationStep, year, month, day, hour, _
						minute)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetSelfCalLastTemp", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetSelfCalLastTemp32(instrumentHandle As System.Runtime.InteropServices.HandleRef, selfCalibrationStep As Long, ByRef temperature As Double) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetSelfCalLastTemp", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetSelfCalLastTemp64(instrumentHandle As System.Runtime.InteropServices.HandleRef, selfCalibrationStep As Long, ByRef temperature As Double) As Integer
			End Function

			Public Shared Function GetSelfCalLastTemp(instrumentHandle As System.Runtime.InteropServices.HandleRef, selfCalibrationStep As Long, ByRef temperature As Double) As Integer
				If Is64BitProcess Then
					Return GetSelfCalLastTemp64(instrumentHandle, selfCalibrationStep, temperature)
				Else
					Return GetSelfCalLastTemp32(instrumentHandle, selfCalibrationStep, temperature)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_InitializeExternalAlignment", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitializeExternalAlignment32(Resource_Name As String, Option_String As String, ByRef instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_InitializeExternalAlignment", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitializeExternalAlignment64(Resource_Name As String, Option_String As String, ByRef instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			Public Shared Function InitializeExternalAlignment(Resource_Name As String, Option_String As String, ByRef instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
				If Is64BitProcess Then
					Return InitializeExternalAlignment64(Resource_Name, Option_String, instrumentHandle)
				Else
					Return InitializeExternalAlignment32(Resource_Name, Option_String, instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_InitializeExternalAlignmentStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitializeExternalAlignmentStep32(instrumentHandle As System.Runtime.InteropServices.HandleRef, externalAlignmentStep As [Double]) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_InitializeExternalAlignmentStep", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function InitializeExternalAlignmentStep64(instrumentHandle As System.Runtime.InteropServices.HandleRef, externalAlignmentStep As [Double]) As Integer
			End Function

			Public Shared Function InitializeExternalAlignmentStep(instrumentHandle As System.Runtime.InteropServices.HandleRef, externalAlignmentStep As [Double]) As Integer
				If Is64BitProcess Then
					Return InitializeExternalAlignmentStep64(instrumentHandle, externalAlignmentStep)
				Else
					Return InitializeExternalAlignmentStep32(instrumentHandle, externalAlignmentStep)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_IsSelfCalValid", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function IsSelfCalValid32(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef selfCalValid As Boolean, ByRef validSteps As Long) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_IsSelfCalValid", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function IsSelfCalValid64(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef selfCalValid As Boolean, ByRef validSteps As Long) As Integer
			End Function

			Public Shared Function IsSelfCalValid(instrumentHandle As System.Runtime.InteropServices.HandleRef, ByRef selfCalValid As Boolean, ByRef validSteps As Long) As Integer
				If Is64BitProcess Then
					Return IsSelfCalValid64(instrumentHandle, selfCalValid, validSteps)
				Else
					Return IsSelfCalValid32(instrumentHandle, selfCalValid, validSteps)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_CalAdjustLOExportCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustLOExportCalibration32(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, loNumber As Integer, numberOfFrequencyPoints As Integer, frequencies As Double(), LOAttenuations As Double()) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_CalAdjustLOExportCalibration", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function CalAdjustLOExportCalibration64(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, loNumber As Integer, numberOfFrequencyPoints As Integer, frequencies As Double(), LOAttenuations As Double()) As Integer
			End Function

			Public Shared Function CalAdjustLOExportCalibration(instrumentHandle As System.Runtime.InteropServices.HandleRef, channelList As String, loNumber As Integer, numberOfFrequencyPoints As Integer, frequencies As Double(), LOAttenuations As Double()) As Integer
				If Is64BitProcess Then
					Return CalAdjustLOExportCalibration64(instrumentHandle, channelList, loNumber, numberOfFrequencyPoints, frequencies, LOAttenuations)
				Else
					Return CalAdjustLOExportCalibration32(instrumentHandle, channelList, loNumber, numberOfFrequencyPoints, frequencies, LOAttenuations)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ClearError", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ClearError32(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ClearError", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ClearError64(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			Public Shared Function ClearError(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
				If Is64BitProcess Then
					Return ClearError64(instrumentHandle)
				Else
					Return ClearError32(instrumentHandle)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_GetTerminalName", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetTerminalName32(instrumentHandle As System.Runtime.InteropServices.HandleRef, signal As Integer, signalIdentifier As String, bufferSize As Integer, terminalName As StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_GetTerminalName", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function GetTerminalName64(instrumentHandle As System.Runtime.InteropServices.HandleRef, signal As Integer, signalIdentifier As String, bufferSize As Integer, terminalName As StringBuilder) As Integer
			End Function

			Public Shared Function GetTerminalName(instrumentHandle As System.Runtime.InteropServices.HandleRef, signal As Integer, signalIdentifier As String, bufferSize As Integer, terminalName As StringBuilder) As Integer
				If Is64BitProcess Then
					Return GetTerminalName32(instrumentHandle, signal, signalIdentifier, bufferSize, terminalName)
				Else
					Return GetTerminalName64(instrumentHandle, signal, signalIdentifier, bufferSize, terminalName)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_LockSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function LockSession32(instrumentHandle As HandleRef, ByRef callerHasLock As UShort) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_LockSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function LockSession64(instrumentHandle As HandleRef, ByRef callerHasLock As UShort) As Integer
			End Function

			Public Shared Function LockSession(instrumentHandle As HandleRef, ByRef callerHasLock As UShort) As Integer
				If Is64BitProcess Then
					Return LockSession64(instrumentHandle, callerHasLock)
				Else
					Return LockSession32(instrumentHandle, callerHasLock)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_UnlockSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function UnlockSession32(instrumentHandle As HandleRef, ByRef callerHasLock As UShort) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_UnlockSession", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function UnlockSession64(instrumentHandle As HandleRef, ByRef callerHasLock As UShort) As Integer
			End Function

			Public Shared Function UnlockSession(instrumentHandle As HandleRef, ByRef callerHasLock As UShort) As Integer
				If Is64BitProcess Then
					Return UnlockSession64(instrumentHandle, callerHasLock)
				Else
					Return UnlockSession32(instrumentHandle, callerHasLock)
				End If
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_SelfCalibrate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SelfCalibrate32(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Long) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_SelfCalibrate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function SelfCalibrate64(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Long) As Integer
			End Function

			Public Shared Function SelfCalibrate(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Long) As Integer
				If Is64BitProcess Then
					Return SelfCalibrate64(instrumentHandle, stepsToOmit)
				Else
					Return SelfCalibrate32(instrumentHandle, stepsToOmit)
				End If
			End Function

            ' Added in 15.0

            <DllImport(rfsaModuleName32, EntryPoint: = "niRFSA_ResetWithOptions", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function ResetWithOptions32(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As ULong) As Integer
                
            End Function

            <DllImport(rfsaModuleName64, EntryPoint: = "niRFSA_ResetWithOptions", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function ResetWithOptions64(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As ULong) As Integer

            End Function

            Public Shared Function ResetWithOptions(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As ULong) As Integer
                If Is64BitProcess Then
                    Return ResetWithOptions64(instrumentHandle, stepsToOmit)
                Else
                    Return ResetWithOptions32(instrumentHandle, stepsToOmit)
                End If
                End Function

            #Region "17.1"
                        
            <DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ReadPowerSpectrumF32", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ReadPowerSpectrumF32_32(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <[In], Out> Power_Spectrum_Data As Single(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ReadPowerSpectrumF32", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ReadPowerSpectrumF32_64(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <[In], Out> Power_Spectrum_Data As Single(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
			End Function

			Public Shared Function ReadPowerSpectrumF32(instrumentHandle As HandleRef, Channel_List As String, Timeout As Double, <[In], Out> Power_Spectrum_Data As Single(), Data_Array_Size As Integer, ByRef Spectrum_Info As niRFSA_spectrumInfo) As Integer
				If Is64BitProcess Then
					Return ReadPowerSpectrumF32_64(instrumentHandle, Channel_List, Timeout, Power_Spectrum_Data, Data_Array_Size, Spectrum_Info)
				Else
					Return ReadPowerSpectrumF32_32(instrumentHandle, Channel_List, Timeout, Power_Spectrum_Data, Data_Array_Size, Spectrum_Info)
				End If
			End Function

			#End Region

			#Region "18.1"

			<DllImport(vstModuleName, EntryPoint := "niVSTCal_SelfCalibrate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function VstSelfCalibrate(resource_Name As String) As Integer
			End Function

			<DllImport(vstModuleName, EntryPoint := "niVSTCal_SelfCalErrorMessage", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function VstSelfCalibrateErrorMessage(errorCode As Integer, BufferSize As Integer, errorMessage As System.Text.StringBuilder) As Integer
			End Function

			<DllImport(rfsaModuleName32, EntryPoint := "niRFSA_ClearSelfCalRange", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ClearSelfCalibrationRange32(instrumentHandle As HandleRef) As Integer
			End Function

			<DllImport(rfsaModuleName64, EntryPoint := "niRFSA_ClearSelfCalRange", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ClearSelfCalibrationRange64(instrumentHandle As HandleRef) As Integer
			End Function

			Public Shared Function ClearSelfCalibrationRange(instrumentHandle As HandleRef) As Integer
				If Is64BitProcess Then
					Return ClearSelfCalibrationRange64(instrumentHandle)
				Else
					Return ClearSelfCalibrationRange32(instrumentHandle)
				End If
			End Function

#End Region

            #Region "18.2"

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_CreateDeembeddingSparameterTableS2PFile", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function CreateDeembeddingSParameterTableS2pFile32(instrumentHandle As HandleRef, port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_CreateDeembeddingSparameterTableS2PFile", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function CreateDeembeddingSParameterTableS2pFile64(instrumentHandle As HandleRef, port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
            End Function

            Public Shared Function CreateDeembeddingSParameterTableS2pFile(instrumentHandle As HandleRef, port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
                If Is64BitProcess Then
                    Return CreateDeembeddingSParameterTableS2pFile64(instrumentHandle, port, tableName, s2pFilePath, sParameterOrientation)
                Else
                    Return CreateDeembeddingSParameterTableS2pFile32(instrumentHandle, port, tableName, s2pFilePath, sParameterOrientation)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_CreateDeembeddingSparameterTableArray", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function CreateDeembeddingSParameterTableArray32(instrumentHandle As HandleRef, port As String, tableName As String, frequencies As Double(), frequenciesSize As Integer, sParameterTable As niComplexNumber(,,),
                sParameterTableSize As Integer, numberOfPorts As Integer, sParameterOrientation As Integer) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_CreateDeembeddingSparameterTableArray", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function CreateDeembeddingSParameterTableArray64(instrumentHandle As HandleRef, port As String, tableName As String, frequencies As Double(), frequenciesSize As Integer, sParameterTable As niComplexNumber(,,),
                sParameterTableSize As Integer, numberOfPorts As Integer, sParameterOrientation As Integer) As Integer
            End Function

            Public Shared Function CreateDeembeddingSParameterTableArray(instrumentHandle As HandleRef, port As String, tableName As String, frequencies As Double(), frequenciesSize As Integer, sParameterTable As niComplexNumber(,,),
                sParameterTableSize As Integer, numberOfPorts As Integer, sParameterOrientation As Integer) As Integer
                If Is64BitProcess Then
                    Return CreateDeembeddingSParameterTableArray64(instrumentHandle, port, tableName, frequencies, frequenciesSize, sParameterTable,
                        sParameterTableSize, numberOfPorts, sParameterOrientation)
                Else
                    Return CreateDeembeddingSParameterTableArray32(instrumentHandle, port, tableName, frequencies, frequenciesSize, sParameterTable,
                        sParameterTableSize, numberOfPorts, sParameterOrientation)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_DeleteDeembeddingTable", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function DeleteDeembeddingTable32(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_DeleteDeembeddingTable", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function DeleteDeembeddingTable64(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            Public Shared Function DeleteDeembeddingTable(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
                If Is64BitProcess Then
                    Return DeleteDeembeddingTable64(instrumentHandle, port, tableName)
                Else
                    Return DeleteDeembeddingTable32(instrumentHandle, port, tableName)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_DeleteAllDeembeddingTables", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function DeleteAllDeembeddingTables32(instrumentHandle As HandleRef) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_DeleteAllDeembeddingTables", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function DeleteAllDeembeddingTables64(instrumentHandle As HandleRef) As Integer
            End Function

            Public Shared Function DeleteAllDeembeddingTables(instrumentHandle As HandleRef) As Integer
                If Is64BitProcess Then
                    Return DeleteAllDeembeddingTables64(instrumentHandle)
                Else
                    Return DeleteAllDeembeddingTables32(instrumentHandle)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_ConfigureDeembeddingTableInterpolationNearest", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function ConfigureDeembeddingTableInterpolationNearest32(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_ConfigureDeembeddingTableInterpolationNearest", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function ConfigureDeembeddingTableInterpolationNearest64(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            Public Shared Function ConfigureDeembeddingTableInterpolationNearest(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
                If Is64BitProcess Then
                    Return ConfigureDeembeddingTableInterpolationNearest64(instrumentHandle, port, tableName)
                Else
                    Return ConfigureDeembeddingTableInterpolationNearest32(instrumentHandle, port, tableName)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_ConfigureDeembeddingTableInterpolationLinear", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function ConfigureDeembeddingTableInterpolationLinear32(instrumentHandle As HandleRef, port As String, tableName As String, format As Integer) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_ConfigureDeembeddingTableInterpolationLinear", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function ConfigureDeembeddingTableInterpolationLinear64(instrumentHandle As HandleRef, port As String, tableName As String, format As Integer) As Integer
            End Function

            Public Shared Function ConfigureDeembeddingTableInterpolationLinear(instrumentHandle As HandleRef, port As String, tableName As String, format As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigureDeembeddingTableInterpolationLinear64(instrumentHandle, port, tableName, format)
                Else
                    Return ConfigureDeembeddingTableInterpolationLinear32(instrumentHandle, port, tableName, format)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_ConfigureDeembeddingTableInterpolationSpline", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function ConfigureDeembeddingTableInterpolationSpline32(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_ConfigureDeembeddingTableInterpolationSpline", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function ConfigureDeembeddingTableInterpolationSpline64(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            Public Shared Function ConfigureDeembeddingTableInterpolationSpline(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
                If Is64BitProcess Then
                    Return ConfigureDeembeddingTableInterpolationSpline64(instrumentHandle, port, tableName)
                Else
                    Return ConfigureDeembeddingTableInterpolationSpline32(instrumentHandle, port, tableName)
                End If
            End Function

            <DllImport(rfsaModuleName32, EntryPoint:="niRFSA_GetDeembeddingSparameters", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function GetDeembeddingSParameters32(instrumentHandle As HandleRef, <Out> sParameters As niComplexNumber(), sParametersArraySize As Integer, ByRef numberOfSParametersReturned As Integer, ByRef numberOfPorts As Integer) As Integer
            End Function

            <DllImport(rfsaModuleName64, EntryPoint:="niRFSA_GetDeembeddingSparameters", CallingConvention:=CallingConvention.StdCall)>
            Public Shared Function GetDeembeddingSParameters64(instrumentHandle As HandleRef, <Out> sParameters As niComplexNumber(), sParametersArraySize As Integer, ByRef numberOfSParametersReturned As Integer, ByRef numberOfPorts As Integer) As Integer
            End Function

            Public Shared Function GetDeembeddingSParameters(instrumentHandle As HandleRef, <Out> sParameters As niComplexNumber(), sParametersArraySize As Integer, ByRef numberOfSParametersReturned As Integer, ByRef numberOfPorts As Integer) As Integer
                If Is64BitProcess Then
                    Return GetDeembeddingSParameters64(instrumentHandle, sParameters, sParametersArraySize, numberOfSParametersReturned, numberOfPorts)
                Else
                    Return GetDeembeddingSParameters32(instrumentHandle, sParameters, sParametersArraySize, numberOfSParametersReturned, numberOfPorts)
                End If
            End Function

            #End Region
        End Class
		#End Region

	End Class


	#Region "Constants"
	Public Class niRFSAConstants

		Public Const RfIn As Integer = 2000

		Public Const IqIn As Integer = 2001

		Public Const CalIn As Integer = 2002

		Public Const IOnly As Integer = 2003

		Public Const Differential As Integer = 2100

		Public Const SingleEnded As Integer = 2101

		Public Const IqAnalogEdge As Integer = 605

		Public Const Iq As Integer = 100

		Public Const Spectrum As Integer = 101

		Public Const Pfi0Str As String = "PFI0"

		Public Const Pfi1Str As String = "PFI1"

		Public Const Rtsi0Str As String = "PXI_Trig0"

		Public Const Rtsi1Str As String = "PXI_Trig1"

		Public Const Rtsi2Str As String = "PXI_Trig2"

		Public Const Rtsi3Str As String = "PXI_Trig3"

		Public Const Rtsi4Str As String = "PXI_Trig4"

		Public Const Rtsi5Str As String = "PXI_Trig5"

		Public Const Rtsi6Str As String = "PXI_Trig6"

		Public Const Rtsi7Str As String = "PXI_Trig7"

		Public Const PxiStarStr As String = "PXI_STAR"

		Public Const RisingEdge As Integer = 900

		Public Const FallingEdge As Integer = 901

		Public Const RisingSlope As Integer = 1000

		Public Const FallingSlope As Integer = 1001

		Public Const StartTrigger As Integer = 1100

		Public Const RefTrigger As Integer = 702

		Public Const AdvanceTrigger As Integer = 1102

		Public Const ArmRefTrigger As Integer = 1103

		Public Const ReadyForStartEvent As Integer = 1200

		Public Const ReadyForAdvanceEvent As Integer = 1202

		Public Const ReadyForRefEvent As Integer = 1201

		Public Const EndOfRecordEvent As Integer = 1203

		Public Const DoneEvent As Integer = 1204

		Public Const RefClock As Integer = 1205

		Public Const DoNotExportStr As String = ""

		Public Const ClkOutStr As String = "ClkOut"

		Public Const RefOutStr As String = "RefOut"

		Public Const LoInStr As String = "LO_In"

		Public Const OnBoardStr As String = "Onboard"

		Public Const IfCondOutStr As String = "IFCondRefOut"

		Public Const LoRefClkStr As String = "LORefClk"

		Public Const EndOfRecordEventStr As String = "EndOfRecordEvent"

		Public Const EndOrRecordEventStr As String = EndOfRecordEventStr

		Public Const PxiTrig0Str As String = "PXI_Trig0"

		Public Const PxiTrig1Str As String = "PXI_Trig1"

		Public Const PxiTrig2Str As String = "PXI_Trig2"

		Public Const PxiTrig3Str As String = "PXI_Trig3"

		Public Const PxiTrig4Str As String = "PXI_Trig4"

		Public Const PxiTrig5Str As String = "PXI_Trig5"

		Public Const PxiTrig6Str As String = "PXI_Trig6"

		Public Const Dbm As Integer = 200

		Public Const VoltsSquared As Integer = 201

		Public Const Dbmv As Integer = 202

		Public Const Dbuv As Integer = 203

		Public Const Volts As Integer = 204

		Public Const Watts As Integer = 205

		Public Const Rbw3db As Integer = 300

		Public Const Rbw6db As Integer = 301

		Public Const RbwBinWidth As Integer = 302

		Public Const RbwEnbw As Integer = 303

		Public Const NoAveraging As Integer = 400

		Public Const RmsAveraging As Integer = 401

		Public Const VectorAveraging As Integer = 402

		Public Const PeakHoldAveraging As Integer = 403

		Public Const Uniform As Integer = 500

		Public Const Hanning As Integer = 501

		Public Const Hamming As Integer = 502

		Public Const BlackmanHarris As Integer = 503

		Public Const ExactBlackman As Integer = 504

		Public Const Blackman As Integer = 505

		Public Const FlatTop As Integer = 506

		Public Const _4TermBlackmanHarris As Integer = 507

		Public Const _7TermBlackmanHarris As Integer = 508

		Public Const LowSideLobe As Integer = 509

		Public Const MostRecentSample As Integer = 700

		Public Const FirstSample As Integer = 701

		Public Const FirstPretriggerSample As Integer = 703

		Public Const CurrentReadPosition As Integer = 704

		Public Const OnboardClockStr As String = "OnboardClock"

		Public Const RefInStr As String = "RefIn"

		Public Const PxiClkStr As String = "PXI_Clk"

		Public Const PxiClk10Str As String = "PXI_Clk10"

		Public Const ClkInStr As String = "ClkIn"

		Public Const RefOut2Str As String = "RefOut2"

		Public Const NoneStr As String = "None"

		Public Const None As Integer = 600

		Public Const DigitalEdge As Integer = 601

		Public Const SoftwareEdge As Integer = 604

		Public Const PxiTrig7Str As String = "PXI_Trig7"

		Public Const TimerEventStr As String = "TimerEvent"

		Public Const IqPowerEdge As Integer = 603

		Public Const Low As Integer = 800

		Public Const Medium As Integer = 801

		Public Const High As Integer = 802

		Public Const LoInjectionHighSide As Integer = 1300

		Public Const LoInjectionLowSide As Integer = 1301

		Public Const Narrow As Integer = 800

		Public Const Wide As Integer = 802

		Public Const Disabled As Integer = 1900

		Public Const Enabled As Integer = 1901

		Public Const _1875MhzWide As Integer = 1400

		Public Const _1875MhzNarrow As Integer = 1401

		Public Const _53Mhz As Integer = 1402

		Public Const Bypass As Integer = 1403

		Public Const FsuPpm As Integer = 2000

		Public Const FsuSecondsAfterLock As Integer = 2001

		Public Const FsuSecondsAfterIo As Integer = 2002

		Public Const ExtCalRfBand1 As Integer = 1700

		Public Const ExtCalRfBand2 As Integer = 1701

		Public Const ExtCalRfBand3 As Integer = 1702

		Public Const ExtCalRfBand4 As Integer = 1703

		Public Const ExtCalIfFilterPath1 As Integer = 2100

		Public Const ExtCalIfFilterPath2 As Integer = 2101

		Public Const ExtCalIfFilterPath3 As Integer = 2102

		Public Const ExtCalIfFilterPath4 As Integer = 2103

		Public Const ExtCalIfFilterPath5 As Integer = 2104

		Public Const ExtCalIfFilterPath6 As Integer = 2105

		Public Const ExtCalIfFilterPath7 As Integer = 2106

		Public Const ExtCalIfFilterPath8 As Integer = 2107

		Public Const ExtCalLoPath1 As Integer = 2300

		Public Const ExtCalLoPath2 As Integer = 2301

		Public Const RFPreampDisabled As Integer = 2500

		Public Const RFPreampEnabledWhenInSignalPath As Integer = 2501

		Public Const RFPreampEnabled As Integer = 2502

		Public Const RFPreampAutomatic As Integer = 2503

		Public Const PreselectorDisabled As Integer = 2600

		Public Const PreselectorEnabledWhenInSignalPath As Integer = 2601

		Public Const PreselectorEnabled As Integer = 2602

		Public Const LOYigMainCoilDriveNormal As Integer = 2400

		Public Const LOYigMainCoilDriveFast As Integer = 2401

		Public Const CalToneDisabled As Integer = 2700

		Public Const CalToneLowbandRf As Integer = 2701

		Public Const CalToneHighbandRf As Integer = 2702

		Public Const CalToneHighbandIf As Integer = 2703

		Public Const ExtCalIfAttenuationTableStandard As Integer = 2900

		Public Const ExtCalIfAttenuationTableAcpr As Integer = 2901

		Public Const AC As Integer = 3001

		Public Const DC As Integer = 3002

		Public Const DownconverterCombinedResponse As Integer = 2802

		Public Const DownconverterIfResponse As Integer = 2800

		Public Const DownconverterRfResponse As Integer = 2801

		Public Const ExtAlignmentAbort As Integer = 3100

		Public Const ExtAlignmentCommit As Integer = 3101



		Public Const ExtCalAbort As Integer = 1500

		Public Const ExtCalCommit As Integer = 1501

		Public Const ExtCalDefault As Integer = 1800

		Public Const ExtCalIfAttenuationCalibration As Integer = 1600

		Public Const ExtCalIfResponseCalibration As Integer = 1601

		Public Const ExtCalLo1 As Integer = 2200

		Public Const ExtCalLo2 As Integer = 2201

		Public Const ExtCalLo3 As Integer = 2202

		Public Const ExtCalLoExportCalibration As Integer = 1603

		Public Const ExtCalMechanicalAttenuatorDisabled As Integer = 1801

		Public Const ExtCalRefLevelCalibration As Integer = 1602

		Public Const ExtCalGainReferenceCalibration As Integer = 1604

		Public Const ReferenceTriggerStr As String = "ReferenceTrigger"

		Public Const SelfCalDigitizerSelfCal As Integer = &H8

		Public Const SelfCalOmitNone As Integer = &H0

		Public Const SelfCalPreselectorAllignment As Integer = &H1

		Public Const SelfCalGainReference As Integer = &H2

		Public Const SelfCalIfFlatness As Integer = &H4

		Public Const SelfCalLoSelfCal As Integer = &H10

		Public Const SelfCalPreselectorAlignment As Integer = &H1

		Public Const SelfCalAmplitudeAccuracy As Integer = &H20

		Public Const SelfCalResidualLoPower As Integer = &H40

		Public Const SelfCalImageSuppresion As Integer = &H80

		Public Const StartTriggerStr As String = "StartTrigger"

		Public Const SyncStartTriggerStr As String = "Sync_Start"

		Public Const SyncRefTriggerStr As String = "Sync_Ref"

		Public Const SyncAdvanceTriggerStr As String = "Sync_Advance"

		Public Const VsaCombinedResponse As Integer = 2804

		Public Const VsaIfResponse As Integer = 2803

		' These are added to avoid breaking old code
		<Obsolete("This constant is obsolete; use constant ExtCalIfAttenuationTableStandard instead")> _
		Public Const NiextCalIfAttenuationTableStandard As Integer = ExtCalIfAttenuationTableStandard

		<Obsolete("This constant is obsolete; use constant ExtCalIfAttenuationTableAcpr instead")> _
		Public Const NiextCalIfAttenuationTableAcpr As Integer = ExtCalIfAttenuationTableAcpr

		<Obsolete("This constant is obsolete; use constant ClkOutStr instead")> _
		Public Const CalClkOutStr As String = ClkOutStr

         #region "16.0"
        
        public Const ResetStepsToOmitNone As Integer = 0

        public Const ResetStepsToOmitRoutes As Integer = 1

        Public Const ResetStepsToOmitDeembeddingTables As Integer = 2       

        Public Const SelfCalSynthesizerAlignment As Integer = &H100

        Public Const ErrorReportingWarning As Integer = 1301

        Public Const ErrorReportingDisabled As Integer = 1302

        #End Region

        #Region "17.1"

        Public Const PXIeDStarBStr As String = "PXIe_DStarB"

        Public Const PXIeDStarCStr As String = "PXIe_DStarC"

        Public Const DCOffset As Integer = &H200

        #End Region

		#Region "18.1"

		Public Const SecondaryStr As String = "Secondary"

		Public Const RefIn2Str As String = "RefIn2"

		Public Const PxiClkMasterStr As String = "PXI_ClkMaster"

		Public Const RfsaRFOutLOExportEnabled As Integer = 1900

		Public Const RfsaRFOutLOExportDisabled As Integer = 1901

		Public Const RfsaRFOutLOExportUnspecified As Integer = 1902

		Public Const LOOutExportConfigureFromRfsgEnabled As Integer = 1900

		Public Const LOOutExportConfigureFromRfsgDisabled As Integer = 1901

		#End Region

		#Region "18.2"

		Public Const DeembeddingTypeNone As Integer = 3900

		Public Const DeembeddingTypeScalar As Integer = 3901

		Public Const DeembeddingTypeVector As Integer = 3902

		Public Const SParameterOrientationPort1TowardsDut As Integer = 3800

		Public Const SParameterOrientationPort2TowardsDut As Integer = 3801

		Public Const LinearInterpolationFormatRealAndImaginary As Integer = 4000

		Public Const LinearInterpolationFormatMagnitudeAndPhase As Integer = 4001

		Public Const LinearInterpolationFormatMagnitudeInDecibelAndPhase As Integer = 4002

		Public Const DownconverterFrequencyOffsetModeEnabled As Integer = 1901

		Public Const DownconverterFrequencyOffsetModeAutomatic As Integer = 1903

		Public Const DownconverterFrequencyOffsetModeUserDefined As Integer = 1904

		#End Region

		#Region "Constants added between 2.5.2 and 2.9"

		Public Const ExtAllignmentPreselector As Integer = 1

		Public Const RfPreselectorPathNone As Integer = 3300

		Public Const RfPreselectorPath1 As Integer = 3301

		Public Const RfPreselectorPath2 As Integer = 3302

		Public Const RfPreselectorPath3 As Integer = 3303

		Public Const RfPreselectorPath4 As Integer = 3304

		Public Const RfPreselectorPath5 As Integer = 3305

		Public Const RfPreselectorPath6 As Integer = 3306

		Public Const RfPreselectorPath7 As Integer = 3307

		Public Const RfPreselectorPath8 As Integer = 3308

		Public Const RfPreselectorPath9 As Integer = 3309

		Public Const RfPreselectorPath10 As Integer = 3310

		Public Const RfPreselectorPath11 As Integer = 3311

		Public Const RfPreselectorPath12 As Integer = 3312

		Public Const RfPreselectorPath13 As Integer = 3313

		Public Const RfPreselectorPath14 As Integer = 3314

		Public Const RfPreselectorPath15 As Integer = 3315

		Public Const RfPreselectorPath16 As Integer = 3316

		Public Const RfPreselectorPathExternalFilter As Integer = 3317

		Public Const StepGainDisabled As Integer = 3200

		Public Const StepGainEnabled As Integer = 3201

		Public Const NotchFilterDisabled As Integer = 3400

		Public Const NotchFilterEnabledWhenInSignal As Integer = 3401

		Public Const NotchFilterEnabled As Integer = 3402

		Public Const SignalCondioningEnabled As Integer = 3600

		Public Const SignalCondioningBypassed As Integer = 3601

		#End Region
#Region "Constants added between 2.9 and 14.1"

        Public Const MinHoldAveraging As Integer = 404
        Public Const ScalarAveraging As Integer = 405
        Public Const LogAveraging As Integer = 406
        Public Const Gaussian As Integer = 510
        Public Const KaiserBessel As Integer = 511
        Public Const User As Integer = 1206
        Public Const DownconverterLo2OutStr As String = "downconverterlo2out"
        Public Const ExtCalIfFilterPath9 As Integer = 2108
        Public Const ExtCalIfFilterPath10 As Integer = 2109
        Public Const ExtCalIfFilterPath11 As Integer = 2110
        Public Const ExtCalLoPath3 As Integer = 2302
        Public Const ExtCalLoPath4 As Integer = 2303
        Public Const ExtCalLoPath5 As Integer = 2304
        Public Const CalToneLowbandRfWithoutAlc As Integer = 2704
        Public Const CalToneCombGenerator As Integer = 2705
        Public Const ExtCalRfLowbandSignalConditioningPath1 As Integer = 3700
        Public Const ExtCalRfLowbandSignalConditioningPath2 As Integer = 3701
        Public Const ExtCalRfLowbandSignalConditioningPath3 As Integer = 3702
        Public Const ExtCalRfLowbandSignalConditioningPath4 As Integer = 3703
        Public Const ExtCalRfLowbandSignalConditioningPath5 As Integer = 3704
        Public Const DigitalLevel As Integer = 602

#End Region

	End Class
	#End Region

	#Region "Structs"
	<StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack := 8)> _
	Public Structure niRFSA_wfmInfo

		Public absoluteInitialX As [Double]

		Public relativeInitialX As [Double]

		Public xIncrement As [Double]

		Public actualSamples As Int64

		Public offset As [Double]

		Public gain As [Double]

		Public reserved1 As [Double]

		Public reserved2 As [Double]

	End Structure

	<StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack := 8)> _
	Public Structure niRFSA_spectrumInfo

		Public initialFrequency As [Double]

		Public frequencyIncrement As [Double]

		Public numberOfSpectralLines As Int32

		Public reserved1 As [Double]

		Public reserved2 As [Double]

		Public reserved3 As [Double]

		Public reserved4 As [Double]

		Public reserved5 As [Double]

	End Structure

	<StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack := 1)> _
	Public Structure SmtSpectrumInfo

		Public spectrumType As UShort

		Public linearDB As UShort

		Public window As UShort

		Public windowSize As Integer

		Public FFTSize As Integer

	End Structure

	<StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack := 1)> _
	Public Structure niRFSA_coefficientInfo

		Public offset As [Double]

		Public gain As [Double]

		Public reserved1 As [Double]

		Public reserved2 As [Double]

	End Structure
	#End Region

	#Region "Attributes"
	Public Enum niRFSAProperties

		''' <summary>
		''' System.Int32
		''' </summary>
		AcquisitionType = 1150001

		''' <summary>
		''' System.Double
		''' </summary>
		ReferenceLevel = 1150004

		''' <summary>
		''' System.Double
		''' </summary>
		Attenuation = 1150005

		''' <summary>
		''' System.Double
		''' </summary>
		MixerLevel = 1150006

		''' <summary>
		''' System.Double
		''' </summary>
		IqCarrierFrequency = 1150059

		''' <summary>
		''' System.Double
		''' </summary>
		IqRate = 1150007

		''' <summary>
		''' System.Boolean
		''' </summary>
		NumberOfSamplesIsFinite = 1150008

		''' <summary>
		''' System.Int64
		''' </summary>
		NumberOfSamples = 1150009

		''' <summary>
		''' System.Boolean
		''' </summary>
		NumberOfRecordsIsFinite = 1150010

		''' <summary>
		''' System.Int64
		''' </summary>
		NumberOfRecords = 1150011

		''' <summary>
		''' System.Double
		''' </summary>
        <Obsolete("Use CenterFrequency")> _
        SpectrumCenterFrequency = 1150002

        CenterFrequency = 1150002

		''' <summary>
		''' System.Double
		''' </summary>
		SpectrumSpan = 1150003

		''' <summary>
		''' System.Int32
		''' </summary>
		PowerSpectrumUnits = 1150012

		''' <summary>
		''' System.Double
		''' </summary>
		ResolutionBandwidth = 1150013

		''' <summary>
		''' System.Int32
		''' </summary>
		ResolutionBandwidthType = 1150014

		''' <summary>
		''' System.Int32
		''' </summary>
		NumberOfSpectralLines = 1150018

		''' <summary>
		''' System.Int32
		''' </summary>
		SpectrumAveragingMode = 1150016

		''' <summary>
		''' System.Int32
		''' </summary>
		SpectrumNumberOfAverages = 1150015

		''' <summary>
		''' System.Int32
		''' </summary>
		FftWindowType = 1150017

		''' <summary>
		''' System.Int32
		''' </summary>
		FftWindowSize = 1150049

		''' <summary>
		''' System.Int32
		''' </summary>
		FftSize = 1150050

		''' <summary>
		''' System.Int32
		''' </summary>
		FetchRelativeTo = 1150045

		''' <summary>
		''' System.Int32
		''' </summary>
		FetchOffset = 1150046

		''' <summary>
		''' System.Int32
		''' </summary>
		RecordsDone = 1150047

		''' <summary>
		''' System.String
		''' </summary>
		RefClockSource = 1150019

		''' <summary>
		''' System.Double
		''' </summary>
		RefClockRate = 1150020

		''' <summary>
		''' System.String
		''' </summary>
		ExportedRefClockOutputTerminal = 1150072

		''' <summary>
		''' System.String
		''' </summary>
		DigitizerSampleClockTimebaseSource = 1150021

		''' <summary>
		''' System.Double
		''' </summary>
		DigitizerSampleClockTimebaseRate = 1150022

		''' <summary>
		''' System.String
		''' </summary>
		PxiChassisClk10Source = 1150023

		''' <summary>
		''' System.Int32
		''' </summary>
		StartTriggerType = 1150024

		''' <summary>
		''' System.String
		''' </summary>
		DigitalEdgeStartTriggerSource = 1150025

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalEdgeStartTriggerEdge = 1150026

		''' <summary>
		''' System.String
		''' </summary>
		ExportedStartTriggerOutputTerminal = 1150027

		''' <summary>
		''' System.Int32
		''' </summary>
		RefTriggerType = 1150028

		''' <summary>
		''' System.Int32
		''' </summary>
		RefTriggerPretriggerSamples = 1150035

		''' <summary>
		''' System.String
		''' </summary>
		DigitalEdgeRefTriggerSource = 1150029

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalEdgeRefTriggerEdge = 1150030

		''' <summary>
		''' System.String
		''' </summary>
		IqPowerEdgeRefTriggerSource = 1150055

		''' <summary>
		''' System.Double
		''' </summary>
		IqPowerEdgeRefTriggerLevel = 1150056

		''' <summary>
		''' System.Int32
		''' </summary>
		IqPowerEdgeRefTriggerSlope = 1150057

		''' <summary>
		''' System.Double
		''' </summary>
		RefTriggerMinimumQuietTime = 1150058

		''' <summary>
		''' System.String
		''' </summary>
		ExportedRefTriggerOutputTerminal = 1150032

		''' <summary>
		''' System.Double
		''' </summary>
		RefTriggerDelay = 1150060

		''' <summary>
		''' System.Double
		''' </summary>
		StartToRefTriggerHoldoff = 1150033

		''' <summary>
		''' System.Double
		''' </summary>
		RefToRefTriggerHoldoff = 1150034

		''' <summary>
		''' System.Int32
		''' </summary>
		AdvanceTriggerType = 1150036

		''' <summary>
		''' System.String
		''' </summary>
		DigitalEdgeAdvanceTriggerSource = 1150037

		''' <summary>
		''' System.String
		''' </summary>
		ExportedAdvanceTriggerOutputTerminal = 1150038

		''' <summary>
		''' System.Int32
		''' </summary>
		ArmRefTriggerType = 1150039

		''' <summary>
		''' System.String
		''' </summary>
		DigitalEdgeArmRefTriggerSource = 1150040

		''' <summary>
		''' System.String
		''' </summary>
		ExportedReadyForStartEventOutputTerminal = 1150041

		''' <summary>
		''' System.String
		''' </summary>
		ExportedReadyForAdvanceEventOutputTerminal = 1150042

		''' <summary>
		''' System.String
		''' </summary>
		ExportedReadyForRefEventOutputTerminal = 1150043

		''' <summary>
		''' System.String
		''' </summary>
		ExportedEndOfRecordEventOutputTerminal = 1150044

		''' <summary>
		''' System.String
		''' </summary>
		ExportedDoneEventOutputTerminal = 1150054

		''' <summary>
		''' System.Double
		''' </summary>
		LoFrequency = 1150068

		''' <summary>
		''' System.Int32
		''' </summary>
		DownconverterLoopBandwidth = 1150067

		''' <summary>
		''' System.Boolean
		''' </summary>
		DigitalIfEqualizationEnabled = 1150048

		''' <summary>
		''' System.Double
		''' </summary>
		DownconverterGain = 1150065

		''' <summary>
		''' System.Int32
		''' </summary>
		LoInjectionSide = 1150069

		''' <summary>
		''' System.Double
		''' </summary>
		DigitizerVerticalRange = 1150070

		''' <summary>
		''' System.Boolean
		''' </summary>
		EnableFractionalResampling = 1150071

		''' <summary>
		''' System.String
		''' </summary>
		SerialNumber = 1150053

		''' <summary>
		''' System.Double
		''' </summary>
		DeviceTemperature = 1150051

		''' <summary>
		''' System.Double
		''' </summary>
		TemperatureReadInterval = 1150061

		''' <summary>
		''' System.Boolean
		''' </summary>
		Cache = 1050004

		''' <summary>
		''' System.Boolean
		''' </summary>
		InterchangeCheck = 1050021

		''' <summary>
		''' System.String
		''' </summary>
		DriverSetup = 1050007

		''' <summary>
		''' System.Boolean
		''' </summary>
		QueryInstrumentStatus = 1050003

		''' <summary>
		''' System.Boolean
		''' </summary>
		RangeCheck = 1050002

		''' <summary>
		''' System.Boolean
		''' </summary>
		RecordCoercions = 1050006

		''' <summary>
		''' System.Boolean
		''' </summary>
		Simulate = 1050005

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverDescription = 1050514

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverPrefix = 1050302

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverVendor = 1050513

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverRevision = 1050551

		''' <summary>
		''' System.String
		''' </summary>
		SupportedInstrumentModels = 1050327

		''' <summary>
		''' System.String
		''' </summary>
		InstrumentManufacturer = 1050511

		''' <summary>
		''' System.String
		''' </summary>
		InstrumentModel = 1050512

		''' <summary>
		''' System.String
		''' </summary>
		InstrumentFirmwareRevision = 1050510

		''' <summary>
		''' System.String
		''' </summary>
		LogicalName = 1050305

		''' <summary>
		''' System.String
		''' </summary>
		IoResourceDescriptor = 1050304

		''' <summary>
		''' string
		''' </summary>
		ActiveConfigurationList = 1150092

		''' <summary>
		''' long
		''' </summary>
		ActiveConfigurationListStep = 1150093

		''' <summary>
		''' System.Int32
		''' </summary>
		CalRfPathSelection = 1150083

		''' <summary>
		''' int
		''' </summary>
		DataTransferBlockSize = 1150105

		''' <summary>
		''' double
		''' </summary>
		DataTransferMaximumBandwidth = 1150104

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitizerDitherEnabled = 1150080

		''' <summary>
		''' double
		''' </summary>
		DigitizerTemperature = 1150090

		''' <summary>
		''' double
		''' </summary>
		DownconverterCenterFrequency = 1150082

		''' <summary>
		''' double
		''' </summary>
		ExternalGain = 1150094

		''' <summary>
		''' double
		''' </summary>
		FrequencySettling = 1150088

		''' <summary>
		''' System.Int32
		''' </summary>
		FrequencySettlingUnits = 1150087

		''' <summary>
		''' double
		''' </summary>
		If1AttenValue = 1150078

		''' <summary>
		''' double
		''' </summary>
		If2AttenValue = 1150079

		''' <summary>
		''' double
		''' </summary>
		IfAttenuation = 1150074

		''' <summary>
		''' System.Int32
		''' </summary>
		IfFilter = 1150075

		''' <summary>
		''' double
		''' </summary>
		IfOutputFrequency = 1150086

		''' <summary>
		''' double
		''' </summary>
		LoTemperature = 1150089

		''' <summary>
		''' System.Int32
		''' </summary>
		MechanicalAttenuatorEnabled = 1150081

		''' <summary>
		''' long
		''' </summary>
		MemorySize = 1150085

		''' <summary>
		''' string
		''' </summary>
		ModuleRevision = 1150091

		''' <summary>
		''' bool
		''' </summary>
		P2pEnabled = 1150097

		''' <summary>
		''' bool
		''' </summary>
		P2pEndpointOverflow = 1150103

		''' <summary>
		''' long
		''' </summary>
		P2pEndpointSize = 1150102

		''' <summary>
		''' long
		''' </summary>
		P2pFifoEndpointCount = 1150098

		''' <summary>
		''' long
		''' </summary>
		P2pMostSamplesAvailableInEndpoint = 1150101

		''' <summary>
		''' bool
		''' </summary>
		P2pOnboardMemoryEnabled = 1150107

		''' <summary>
		''' long
		''' </summary>
		P2pSamplesAvailableInEndpoint = 1150100

		''' <summary>
		''' long
		''' </summary>
		P2pSamplesTransferred = 1150099

		''' <summary>
		''' double
		''' </summary>
		PhaseOffset = 1150106

		''' <summary>
		''' int
		''' </summary>
		RfAttenuationIndex = 1150076

		''' <summary>
		''' int
		''' </summary>
		RfAttenuationTable = 1150077

		''' <summary>
		''' double
		''' </summary>
		TimerEventInterval = 1150096

		''' <summary>
		''' int
		''' </summary>
		CalIfAttenuationIndex = 1150109

		''' <summary>
		''' int
		''' </summary>
		CalRfElectronicAttenuationIndex = 1150110

		''' <summary>
		''' int
		''' </summary>
		CalRfMechanicalAttenuationIndex = 1150111

		''' <summary>
		''' int
		''' </summary>
		CalIfFilterSelection = 1150112

		''' <summary>
		''' int
		''' </summary>
		CalLoPathSelection = 1150113

		''' <summary>
		''' double
		''' </summary>
		CalLo1Attenuation = 1150114

		''' <summary>
		''' double
		''' </summary>
		CalLo2Attenuation = 1150115

		''' <summary>
		''' double
		''' </summary>
		CalLo3Attenuation = 1150116

		''' <summary>
		''' System.String
		''' </summary>
		ReadyForStartEventTerminalName = 1150117

		''' <summary>
		''' System.String
		''' </summary>
		ReadyForAdvanceEventTerminalName = 1150118

		''' <summary>
		''' System.String
		''' </summary>
		ReadyForRefEventTerminalName = 1150119

		''' <summary>
		''' System.String
		''' </summary>
		EndOfRecordEventTerminalName = 1150120

		''' <summary>
		''' System.String
		''' </summary>
		DoneEventTerminalName = 1150121

		''' <summary>
		''' System.String
		''' </summary>
		StartTriggerTerminalName = 1150122

		''' <summary>
		''' System.String
		''' </summary>
		RefTriggerTerminalName = 1150123

		''' <summary>
		''' System.String
		''' </summary>
		AdvanceTriggerTerminalName = 1150124

		''' <summary>
		''' double  
		''' </summary>
		DeviceInstantaneousBandwidth = 1150125

		''' <summary>
		''' long
		''' </summary>
		ConfigurationListStepInProgress = 1150126

		''' <summary>
		''' double
		''' </summary>
		MixerLevelOffset = 1150127

		''' <summary>
		''' double
		''' </summary>
		MechanicalAttenuation = 1150128

		''' <summary>
		''' int
		''' </summary>
		RfPreampEnabled = 1150129

		''' <summary>
		''' double
		''' </summary>
		IfOutputPowerLevel = 1150130

		''' <summary>
		''' double
		''' </summary>
		IfOutputPowerLevelOffset = 1150131

		''' <summary>
		''' int
		''' </summary>
		DownconvertorPreselectorEnabled = 1150132

		''' <summary>
		''' int
		''' </summary>
		<Obsolete("use DownconvertorPreselectorEnabled instead")> _
		PreselectorEnabled = DownconvertorPreselectorEnabled

		''' <summary>
		''' bool
		''' </summary>
		LoExportEnabled = 1150134

		''' <summary>
		''' int
		''' </summary>
		LoYigMainCoilDrive = 1150135

		''' <summary>
		''' bool
		''' </summary>
		PreselectorPresent = 1150136

		''' <summary>
		''' bool
		''' </summary>
		RfPreampPresent = 1150137

		''' <summary>
		''' int
		''' </summary>
		DownconvertorCalToneMode = 1150139

		''' <summary>
		''' int
		''' </summary>
		<Obsolete(" Use DownconvertorCalToneMode instead")> _
		CalToneMode = DownconvertorCalToneMode

		''' <summary>
		''' double
		''' </summary>
		DownconvertorCalToneFrequency = 1150140

		''' <summary>
		''' double
		''' </summary>
		<Obsolete("Use DownconvertorCalToneFrequency instead")> _
		CalToneFrequency = DownconvertorCalToneFrequency

		''' <summary>
		''' int
		''' </summary>
		CalIfAttenuationTableSelection = 1150141

		''' <summary>
		''' double
		''' </summary>
		MinimumAcpr = 1150142

		''' <summary>
		''' 
		''' </summary>
		SpectrumOspSamplingRatio = 1150144

		''' <summary>
		''' double
		''' </summary>
		CalibrationCorrectionThroughFilter = 1150146

		''' <summary>
		''' double
		''' </summary>
		CalibrationCorrection300KhzFilter = 1150147

		''' <summary>
		''' double
		''' </summary>
		CalibrationCorrection5MhzFilter = 1150148

		''' <summary>
		''' int
		''' </summary>
		ChannelCoupling = 1150149

		''' <summary>
		''' double
		''' </summary>
		OspDataScalingFactor = 1150151

		''' <summary>
		''' bool
		''' </summary>
		AllowMoreRecordsThanMemory = 1150154

		''' <summary>
		''' double
		''' </summary>
		RfAttenuationStepSize = 1150155
		#Region "Properties added between 2.5 and 2.9"

		''' <summary>
		''' int
		''' </summary>
		StepGainEnabled = 1150157


		''' <summary>
		''' int
		''' </summary>
		SignalConditioningEnabled = 1150160

		''' <summary>
		''' int
		''' </summary>
		IfConditioningDownConversionEnabled = 1150161

		''' <summary>
		''' int
		''' </summary>
		RfPreselectorFilter = 1150166

		''' <summary>
		''' int
		''' </summary>
		NotchFilterEnabled = 1150167


		''' <summary>
		''' Double
		''' </summary>
		IfFilterBandwidth = 1150205

		''' <summary>
		''' Int
		''' </summary>
		LowFrequencyByPassEnabled = 1150207


		''' <summary>
		''' String
		''' </summary>
		FpgaBitFilePath = 1150221

		''' <summary>
		''' Int
		''' </summary>
		SmoothSpectrumEnabled = 1150219


		''' <summary>
		''' Double
		''' </summary>
		RfConditioningTemperature = 1150211
		'ReadOnly
		''' <summary>
		''' Double
		''' </summary>
		IfConditioningTemperature = 1150210
		'ReadOnly
		''' <summary>
		''' Double
		''' </summary>
		FftWindowShapeFactor = 1150206
		'ReadOnly

		''' <summary>
		''' string
		''' </summary>
		LoSource = 1150162


		''' <summary>
		''' bool
		''' </summary>
		DdcRefTriggerOverride = 1150164

		''' <summary>
		''' System.Double
		''' </summary>
		MinimumReconfigTime = 1150165

		''' <summary>
		''' string
		''' </summary>
		<Obsolete(" Use DigitalEdgeConfigurationListStepTriggerSource instead")> _
		ConfigurationListStepTriggerSource = ReconfigurationTriggerSource

		''' <summary>
		''' string
		''' </summary>
		<Obsolete(" Use DigitalEdgeConfigurationListStepTriggerSource instead")> _
		ReconfigurationTriggerSource = 1150095

		''' <summary>
		''' System.Int32
		''' </summary>
		ContiguousMultiRecord = 1150172

		''' <summary>
		''' string
		''' </summary>
		TimerStartSource = 1150173

		''' <summary>
		''' Int
		''' </summary>
		<Obsolete(" Use RfConditioningCalToneMode instead")> _
		RfPreselectorCalToneMode = 1150208

		''' <summary>
		''' Double
		''' </summary>
		<Obsolete(" Use RfConditioningCalToneFrequency instead")> _
        RfPreselectorCalToneFrequency = 1150209


		''' <summary>
		''' System.Double
		''' </summary>
		CalToneStepAttenuation = 1150168

		''' <summary>
		''' System.Double
		''' </summary>
		CalTonePowerReferredToRfIn = 1150174

		''' <summary>
		''' System.Double
		''' </summary>
		IqInPortCarrierrFrequency = 1150181

		''' <summary>
		''' System.Int32
		''' </summary>
		IqInportTerminalConfiguration = 1150182

		''' <summary>
		''' System.Double
		''' </summary>
		IqInPortVerticalRange = 1150183

		''' <summary>
		''' bool
		''' </summary>
		SyncAdvanceTriggerMaster = 1150184

		''' <summary>
		''' string
		''' </summary>
		SyncAdvanceTriggerDistLine = 1150185

		''' <summary>
		''' System.Double
		''' </summary>
		IqInPortTemperature = 1150204


		''' <summary>
		''' System.Int32
		''' </summary>
		InputPort = 1150180


		''' <summary>
		''' System.Double
		''' </summary>
		LoInPower = 1150186

		''' <summary>
		''' System.Int32
		''' </summary>
		LoPllFractionalModeEnabled = 1150187

		''' <summary>
		''' System.Double
		''' </summary>
		LoFrequencyStepSize = 1150188

		''' <summary>
		''' bool
		''' </summary>
		SyncStartTriggerMaster = 1150176

		''' <summary>
		''' string
		''' </summary>
		SyncStartTriggerDistLine = 1150177

		''' <summary>
		''' bool
		''' </summary>
		SyncRefTriggerMaster = 1150178

		''' <summary>
		''' string
		''' </summary>
		SyncRefTriggerDistLine = 1150179


		''' <summary>
		''' System.Int32
		''' </summary>
		SyncRefTriggerDelayEnabled = 1150189

		''' <summary>
		''' bool
		''' </summary>
		SyncSampleClockMaster = 1150217

		''' <summary>
		''' String
		''' </summary>
		SyncSampleClockDistLine = 1150218



		''' <summary>
		''' System.Double
		''' </summary>
		DecimationDelay = 1150191

		''' <summary>
		''' System.Int32
		''' </summary>
		IqAnalogEdgeRefTriggerSource = 1150192

		''' <summary>
		''' RfsaIqAnalogEdgeRefTriggerSlope
		''' </summary>
		IqAnalogEdgeRefTriggerSlope = 1150193

		''' <summary>
		''' System.Double
		''' </summary>
		IqAnalogEdgeRefTriggerLevel = 1150194

		''' <summary>
		''' System.Double
		''' </summary>
		IqAnalogEdgeRefTriggerHysteresis = 1150195


		''' <summary>
		''' Double
		''' </summary>
		DownconvertorFrequencyOffset = 1150203


		#End Region

#Region "attributes added between 2.9 and 14.1"
        ''' <summary>
        ''' Double
        ''' </summary>
        DigitizerSampleClockRate = 1150228

        ''' <summary>
        ''' string
        ''' </summary>
        ExportedDigitizerSampleClockOutputTerminal = 1150229

        ''' <summary>
        ''' bool
        ''' </summary>
        Lo2ExportEnabled = 1150235

        ''' <summary>
        ''' Double
        ''' </summary>
        CalibrationCorrection100mhzFilter = 1150223

        ''' <summary>
        ''' Double
        ''' </summary>
        CalibrationCorrection320mhzFilter = 1150224

        ''' <summary>
        ''' Double
        ''' </summary>
        CalibrationCorrection765mhzFilter = 1150225

        ''' <summary>
        ''' string
        ''' </summary>
        CalDigitizerId = 1150226

        ''' <summary>
        ''' int
        ''' </summary>
        CalRfLowbandSignalConditioningPathSelection = 1150215

        ''' <summary>
        ''' Double
        ''' </summary>
        RfHighPassFiltering = 1150220

        ''' <summary>
        ''' int
        ''' </summary>
        CalIfAttenuationTableSize = 1150216

        ''' <summary>
        ''' Double
        ''' </summary>
        MaxDeviceInstantaneousBandwidth = 1150236

        ''' <summary>
        ''' Double
        ''' </summary>
        MaxIQRate = 1150237


        ''' <summary>
        ''' int
        ''' </summary>
        NoiseSourcePowerEnabled = 1150222

        ''' <summary>
        ''' string
        ''' </summary>
        FpgaTargetName = 1150233


        ''' <summary>
        ''' Double
        ''' </summary>
        SubspanOverlap = 1150234

#End Region

		''' <summary>
		''' int
		''' </summary>
		PreselectorTuningDacValue5665 = 1150158

		''' <summary>
		''' double
		''' </summary>
		DeviceConfigurationTemperature = 1150159


		''' <summary>
		''' System.Double
		''' </summary>
		FftWidth = 1150169

		''' <summary>
		''' System.Int32
		''' </summary>
		InputIsolationEnabled = 1150170


		''' <summary>
		''' System.Double
		''' </summary>
		StartTriggerDelay = 1150175


		''' <summary>
		''' string
		''' </summary>
		IqAnalogEdgeRefTrigger = 1150092

		''' <summary>
		''' System.Int32
		''' </summary>
		RefTriggerOspDelayEnabled = 1150196


		''' <summary>
		''' System.Int32
		''' </summary>
		ChannelCount = 1050203

		''' <summary>
		''' System.String
		''' </summary>
		GroupCapabilities = 1050401

		''' <summary>
		''' System.Int32
		''' </summary>
		SpecificDriverClassSpecMajorVersion = 1050515

		''' <summary>
		''' System.Int32
		''' </summary>
		SpecificDriverClassSpecMinorVersion = 1050516

        #region "16.0"
        
        ''' <summary>
        ''' System.Double
        ''' </summary>
        ModulePowerConsumption = 1150255

        ''' <summary>
        ''' System.Double
        ''' </summary>
        FpgaTemperature = 1150254

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        AllowOutOfSpecificationUserSettings = 1150256
        
        ''' <summary>
        ''' System.Int32
        ''' </summary>
        RfConditioningCalToneMode = 1150208

        ''' <summary>
        ''' System.Double
        ''' </summary>
        RfConditioningCalToneFrequency = 1150209

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AbsoluteDelay = 1150266

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AmplitudeSettling = 1150163

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        OverflowErrorReporting = 1150271

        ''' <summary>
        ''' System.Double
        ''' </summary>
        LoOutPower = 1150246

        #End Region

        #region "17.1"

        ''' <summary>
        ''' System.String
        ''' </summary>
        DigitalEdgeConfigurationListStepTriggerSource = 1150095

        ''' <summary>
        ''' System.Double
        ''' </summary>
        IqInPortCommonMode = 1150269

        #End Region

		#Region "18.1"

		''' <summary>
		''' System.Double
		''' </summary>
		ThermalCorrectionTemperatureResolution = 1150300

		''' <summary>
		''' System.Int32
		''' </summary>
		RFOutLOExportEnabled = 1150298

		''' <summary>
		''' System.Int32
		''' </summary>
		LOOutExportConfigureFromRfsg = 1150299

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalGain = 1150301

		#End Region

		#Region "18.2"

		''' <summary>
		''' System.Int32
		''' </summary>
		DeembeddingType = 1150307
		''' <summary>
		''' System.String
		''' </summary>
		DeembeddingSelectedTable = 1150308

		#End Region

		#Region "19.1"

		''' <summary>
		''' System.String
		''' </summary>
		SelectedPorts = 1150297
		''' <summary>
		''' System.String
		''' </summary>
		AvailablePorts = 1150306
		''' <summary>
		''' System.Double
		''' </summary>
		ReferenceLevelHeadroom = 1150309
		''' <summary>
		''' System.Double
		''' </summary>
		SignalBandwidth = 1150267
		''' <summary>
		''' System.Int32
		''' </summary>
		DownconverterFrequencyOffsetMode = 1150305
		''' <summary>
		''' System.Double
		''' </summary>
		LOVcoFrequencyStepSize = 1150312
		''' <summary>
		''' System.Double
		''' </summary>
		ThermalCorrectionHeadroomRange = 1150316

		#End Region
	End Enum
	#End Region
End Namespace
