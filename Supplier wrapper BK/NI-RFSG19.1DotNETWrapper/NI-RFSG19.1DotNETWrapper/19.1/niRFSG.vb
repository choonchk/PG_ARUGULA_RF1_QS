'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by Measurement Studio for NI-RFSG 16.0.
'     
'     Documentation is available at Start»All Programs»National Instruments»NI-RFSG»Documentation>>NI RF Signal Generators Help.
'      
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System.Runtime.InteropServices
Imports System.Text
Namespace NationalInstruments.ModularInstruments.Interop
	'niRFSG class. Open a niRFSG session by calling one of the constructor methods.
	'Use the niRFSGConstants class and the niRFSGProperties enum when possible to ensure valid input.
	Public Class niRFSG
		Inherits Object
		Implements System.IDisposable

		Private _handle As System.Runtime.InteropServices.HandleRef

		Private _disposed As Boolean = True

		' NIRFSG_MAX_ERROR_MESSAGE_SIZE is 1024
		Private Const maxErrorMessageSize As Integer = 1024

		Public ReadOnly Property Handle() As System.Runtime.InteropServices.HandleRef
			Get
				Return _handle
			End Get
		End Property

		Protected Overrides Sub Finalize()
			Try
				Dispose(False)
			Finally
				MyBase.Finalize()
			End Try
		End Sub

		''' <summary>
		''' This function creates an IVI instrument driver session, typically using the C session instrument handle.
		''' </summary>
		''' <param name="Instrument_Handle">
		''' The instrument handle that is used to create an IVI instrument driver session.
		''' </param>
		Public Sub New(Instrument_Handle As System.IntPtr)
			Me._handle = New System.Runtime.InteropServices.HandleRef(Me, Instrument_Handle)
			Me._disposed = False
		End Sub

		''' <summary>
		''' 
		''' niRFSG_init
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_init&#160;(ViRsrc&#160;resourceName, ViBoolean&#160;idQuery, ViBoolean&#160;resetDevice, ViSession*&#160;vi);
		''' Purpose
		''' Opens a session to the device you specify for the resourceName parameter and returns a ViSession handle that you use to identify the NI-RFSG device in all subsequent NI-RFSG function calls.
		''' 
		''' 
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Resource_Name">
		''' 
		''' resourceName
		''' ViRsrc
		''' Specifies the resource name of the device to initialize.
		''' 
		''' 
		''' 
		''' For NI-DAQmx devices, the syntax is the device name specified in MAX. Typical default names for NI-DAQmx devices in MAX are Dev2 or PXISlot2. You can rename an NI-DAQmx device by right-clicking on the name in MAX.
		''' 
		''' You can also specify the name of an IVI logical name configured with the IVI Configuration utility. For additional information, refer to the IVI topic of the Measurement &amp; Automation Explorer Help. 
		''' 
		''' 
		''' Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use an IVI logical name, make sure the name is identical to the name shown in the IVI Configuration Utility.
		''' 
		''' 
		''' </param>
		''' <param name="ID_Query">
		''' 
		''' idQuery
		''' ViBoolean
		''' Specifies whether you want NI-RFSG to perform an ID query.
		''' 
		''' 
		''' 
		''' Defined Values:
		''' 
		''' 
		''' VI_TRUE (1) Perform ID query.VI_FALSE (0)Do not perform ID query.
		''' 
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Reset">
		''' 
		''' reset
		''' ViBoolean
		''' Specifies whether you want to reset the NI-RFSG device during the initialization procedure.
		''' 
		''' 
		''' Defined Values:
		''' VI_TRUE (1)Reset device.VI_FALSE (0)Do not reset device.
		''' 
		''' 
		''' </param>
		Public Sub New(Resource_Name As String, ID_Query As Boolean, Reset As Boolean)
			Dim instrumentHandle As System.IntPtr
			Dim pInvokeResult As Integer = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset), instrumentHandle)
			Me._handle = New System.Runtime.InteropServices.HandleRef(Me, instrumentHandle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Me._disposed = False
		End Sub

		''' <summary>
		''' 
		''' niRFSG_InitWithOptions
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_InitWithOptions&#160;(ViRsrc&#160;resourceName, ViBoolean&#160;idQuery, ViBoolean&#160;resetDevice, ViConstString&#160;optionString, ViSession*&#160;vi);
		''' 
		''' Purpose
		''' 
		''' Opens a session to the device you specify using the resourceName parameter and 
		''' returns a ViSession handle that you use to identify the NI-RFSG device in all subsequent NI-RFSG function calls.  This function also configures the device through the optionString parameter.
		''' 
		''' 
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Resource_Name">
		''' 
		''' resourceName
		''' ViRsrc
		''' Specifies the resource name of the device to initialize.
		''' 
		''' 
		''' 
		''' For NI-DAQmx devices, the syntax is the device name specified in MAX. Typical default names for NI-DAQmx devices in MAX are Dev2 or PXISlot2. You can rename an NI-DAQmx device by right-clicking on the name in MAX.
		''' 
		''' You can also specify the name of an IVI logical name configured with the IVI Configuration utility. For additional information, refer to the IVI topic of the Measurement &amp; Automation Explorer Help. 
		''' 
		''' 
		''' Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use an IVI logical name, make sure the name is identical to the name shown in the IVI Configuration Utility.
		''' 
		''' 
		''' </param>
		''' <param name="ID_Query">
		''' 
		''' idQuery
		''' ViBoolean
		''' Specifies whether you want NI-RFSG to perform an ID query.
		''' 
		''' 
		''' 
		''' Defined Values:
		''' 
		''' 
		''' VI_TRUE (1) Perform ID query.VI_FALSE (0)Do not perform ID query.
		''' 
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Reset">
		''' 
		''' reset
		''' ViBoolean
		''' Specifies whether you want to reset the NI-RFSG device during the initialization procedure.
		''' 
		''' 
		''' Defined Values:
		''' VI_TRUE (1)Reset device.VI_FALSE (0)Do not reset device.
		''' 
		''' 
		''' </param>
		''' <param name="Option_String">
		''' 
		''' 
		''' optionString
		''' ViConstString
		''' Specifies the initial value of certain attributes for the session.  The following table lists the attributes and the name you pass in this parameter to identify the attribute.
		''' 
		''' 
		''' 
		''' Name              Attribute Name  
		''' RangeCheckNIRFSG_ATTR_RANGE_CHECK
		''' 
		''' QueryInstrStatus  NIRFSG_ATTR_QUERY_INSTRUMENT_STATUS   
		''' 
		''' CacheNIRFSG_ATTR_CACHE
		'''    
		''' 
		''' 
		''' RecordCoercionsNIRFSG_ATTR_RECORD_COERCIONS
		''' 
		''' 
		''' 
		''' DriverSetupNIRFSG_ATTR_DRIVER_SETUP
		''' 
		''' SimulateNIRFSG_ATTR_SIMULATE
		''' 
		''' 
		''' 
		''' 
		''' The format of this string consists of the following relations:
		'''  &quot;AttributeName=Value&quot; 
		''' 
		''' where
		'''  AttributeName is the name of the attribute and Value is the value to which the attribute is set.  To set multiple attributes, separate their assignments with a comma, as shown in the following option string:  
		''' 
		''' &quot;RangeCheck=1,QueryInstrStatus=0,Cache=1,DriverSetup=AWG:pxi1slot4&quot;
		''' 
		''' 
		''' 
		''' 
		''' The DriverSetup string is required in order to simulate a specific device.
		''' 
		''' </param>
		Public Sub New(Resource_Name As String, ID_Query As Boolean, Reset As Boolean, Option_String As String)
			Dim instrumentHandle As System.IntPtr
			Dim pInvokeResult As Integer = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset), Option_String, instrumentHandle)
			Me._handle = New System.Runtime.InteropServices.HandleRef(Me, instrumentHandle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Me._disposed = False
		End Sub

		''' <summary>
		''' 
		''' 
		''' niRFSG_ConfigureRF
		''' 
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureRF&#160;(ViSession&#160;vi, ViReal64&#160;frequency, ViReal64&#160;powerLevel);
		''' 
		''' Purpose
		''' 
		''' Configures the frequency and power level of the RF output signal. The NI 5670/5671/5672 device must be in the Configuration state before calling this function.  The NI 5650/5651/5652/5673/5673E device can be in the Configuration or Generation state when you call this function.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Frequency">
		''' 
		''' frequency
		''' ViReal64
		''' Specifies the frequency of the generated RF signal. For arbitrary waveform generation, this parameter specifies the center frequency of the signal.
		''' 
		''' 
		''' Units: Hz
		''' 
		''' </param>
		''' <param name="Power_Level">
		''' 
		''' 
		''' powerLevel
		''' ViReal64
		''' Specifies either the average power level or peak power level of the generated RF signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute .
		''' 
		''' 
		''' 
		''' Units: dBm
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureRF(Frequency As Double, Power_Level As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureRF(Me._handle, Frequency, Power_Level)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureGenerationMode
		''' 
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureGenerationMode&#160;(ViSession&#160;vi, ViInt32&#160;generationMode);
		''' Purpose
		''' Configures the NI-RFSG device to generate a continuous tone (CW) sine tone, apply I/Q (vector) modulation to the RF output signal, or generate arbitrary waveforms according to scripts. The NI-RFSG device must be in the Configuration state before you call this function.
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5653/5672/5673/5673E 
		''' 
		''' </summary>
		''' <param name="Generation_Mode">
		''' 
		''' generationMode
		''' ViInt32
		''' Specifies the mode used by NI-RFSG to generate an RF output signal.
		''' 
		''' 
		''' Defined Values:
		''' NIRFSG_VAL_CWNI-RFSG generates a signal in CW mode.
		''' NIRFSG_VAL_ARB_WAVEFORMNI-RFSG generates a signal in arb waveform mode.
		''' NIRFSG_VAL_SCRIPTNI-RFSG generates a signal in script mode.
		''' 
		''' Default Value: NIRFSG_VAL_CW
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureGenerationMode(Generation_Mode As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureGenerationMode(Me._handle, Generation_Mode)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_AllocateArbWaveform
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_AllocateArbWaveform&#160;(ViSession&#160;vi,&#160;ViConstString&#160;name,&#160;ViInt32&#160;size_in_samples);
		''' Purpose
		''' Allocates onboard memory space for the arbitrary waveform. Use this function to specify the total size of a waveform before writing the data.  You only need to use this function if you are calling the niRFSG_WriteArbWaveform function multiple times to write a large waveform in smaller blocks. The NI-RFSG device must be in the Configuration state before you call this function.
		''' 
		''' 
		''' Supported Devices: NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Name">
		''' 
		''' name
		''' ViConstString
		''' Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
		''' 
		''' </param>
		''' <param name="Size_In_Samples">
		''' 
		''' size_in_samples
		''' ViInt32
		''' Specifies the number of samples to reserve in the onboard memory for the specified waveform.  Each I/Q pair is considered one sample.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function AllocateArbWaveform(Name As String, Size_In_Samples As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.AllocateArbWaveform(Me._handle, Name, Size_In_Samples)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_WriteArbWaveform
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_WriteArbWaveform&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples, ViReal64[]&#160;iData, ViReal64[]&#160;qData, ViBoolean&#160;moreDataPending);
		''' Purpose
		''' Writes an arbitrary waveform to the NI-RFSG device. This function configures the I and Q vectors of a complex baseband signal. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the moreDataPending parameter is ignored. The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
		''' 
		''' 
		''' Note&#160;&#160;On the NI PXIe-5672/5673/5673E, the moreDataPending parameter is always
		''' ignored. To write data in blocks on these devices, you must allocate the waveform before writing it.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Name">
		''' 
		''' name
		''' ViConstString
		''' Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
		''' 
		''' </param>
		''' <param name="Number_Of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt32
		''' Specifies the number of samples in both the iData and qData arrays. The iData and qData arrays must have the same length. If the NIRFSG_ATTR_ARB_WAVEFORM_QUANTUM attribute value is q, then the number of samples should be a multiple of q. The specified number of samples cannot be 0.
		''' 
		''' </param>
		''' <param name="IData">
		''' 
		''' iData
		''' ViReal64[]
		''' Specifies the in-phase (I) component of the complex baseband signal.
		''' 
		''' </param>
		''' <param name="QData">
		''' 
		''' qData
		''' ViReal64[]
		''' Specifies the quadrature (Q) component of the complex baseband signal.
		''' 
		''' </param>
		''' <param name="More_Data_Pending">
		''' 
		''' moreDataPending
		''' ViBoolean
		''' Specifies whether or not the data block contains the end of the waveform.  Set this parameter to VI_TRUE to allow data to be appended later to the waveform. Splitting the waveform into multiple data blocks can reduce the memory requirements of the write operation. Append data to a previously written waveform by using the same waveform in the name parameter. Set moreDataPending to VI_FALSE to indicate that this data block contains the end of the waveform. If the waveform is already allocated, this parameter is ignored.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function WriteArbWaveform(Name As String, Number_Of_Samples As Integer, IData As Double(), QData As Double(), More_Data_Pending As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteArbWaveform(Me._handle, Name, Number_Of_Samples, IData, QData, System.Convert.ToUInt16(More_Data_Pending))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_WriteArbWaveformComplexF64
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_WriteArbWaveformComplexF64&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples, NIComplexNumber&#160;wfmData[], ViBoolean&#160;moreDataPending);
		''' Purpose
		''' Writes an arbitrary waveform to the NI-RFSG device starting at the position of the last data written in onboard memory. This function accepts the complex baseband data in the form of complex doubles. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the moreDataPending parameter is ignored.  
		''' The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
		''' 
		''' 
		''' 
		''' Note&#160;&#160;On the NI PXIe-5672/5673/5673E, the moreDataPending parameter is always
		''' ignored. To write data in blocks on these devices, you must allocate the waveform before writing it.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Name">
		''' 
		''' name
		''' ViConstString
		''' Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
		''' 
		''' </param>
		''' <param name="Number_Of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt32
		''' Specifies the number of samples in both of the data arrays.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' 
		''' data
		''' NIComplexNumber[]
		''' Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in the size_in_samples parameter in the niRFSG_AllocateArbWaveform function.
		'''  
		''' </param>
		''' <param name="More_Data_Pending">
		''' 
		''' moreDataPending
		''' ViBoolean
		''' Specifies whether or not the data block contains the end of the waveform.  Set this parameter to VI_TRUE to allow data to be appended later to the waveform. Splitting the waveform into multiple data blocks can reduce the memory requirements of the write operation. Append data to a previously written waveform by using the same waveform in the name parameter. Set moreDataPending to VI_FALSE to indicate that this data block contains the end of the waveform. If the waveform is already allocated, this parameter is ignored.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function WriteArbWaveformComplexF64(Name As String, Number_Of_Samples As Integer, Data As niComplexNumber(), More_Data_Pending As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteArbWaveformComplexF64(Me._handle, Name, Number_Of_Samples, Data, System.Convert.ToUInt16(More_Data_Pending))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		Public Function WriteArbWaveformComplexF32(Name As String, Number_Of_Samples As Integer, Data As niComplexNumberF32(), More_Data_Pending As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteArbWaveformComplexF32(Me._handle, Name, Number_Of_Samples, Data, System.Convert.ToUInt16(More_Data_Pending))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		Public Function WriteArbWaveformF32(Name As String, Number_Of_Samples As Integer, iData As Single(), qData As Single(), More_Data_Pending As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteArbWaveformF32(Me._handle, Name, Number_Of_Samples, iData, qData, System.Convert.ToUInt16(More_Data_Pending))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_WriteArbWaveformComplexI16
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_WriteArbWaveformComplexI16&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples,  NIComplexI16&#160;wfmData[]);
		''' Purpose
		''' Writes an arbitrary waveform to the NI-RFSG device starting at the position of the last data written in onboard memory. This function accepts the interleaved I/Q data of a complex baseband signal. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the More_Data_Pending parameter is ignored. The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
		''' 
		''' Note&#160;&#160;This function only supports NIRFSG_VAL_PEAK_POWER mode as specified in the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute.  If a waveform is downloaded using this function, NIRFSG_ATTR_POWER_LEVEL_TYPE cannot be changed to NIRFSG_VAL_AVERAGE_POWER mode without causing error in the output.
		''' 
		''' Supported Devices&#58; NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Name">
		''' 
		''' name
		''' ViConstString
		''' Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
		''' 
		''' </param>
		''' <param name="Number_Of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt32
		''' Specifies the number of samples in the data array.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' 
		''' data
		''' niComplexI16[]
		''' Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in the size_in_samples parameter in the niRFSG_AllocateArbWaveform function.
		'''  
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function WriteArbWaveformComplexI16(Name As String, Number_Of_Samples As Integer, Data As niComplexI16()) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteArbWaveformComplexI16(Me._handle, Name, Number_Of_Samples, Data)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_WriteArbWaveformComplexI16
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_WriteArbWaveformComplexI16&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples,  NIComplexI16&#160;wfmData[]);
		''' Purpose
		''' Writes an arbitrary waveform to the NI-RFSG device starting at the position of the last data written in onboard memory. This function accepts the interleaved I/Q data of a complex baseband signal. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the More_Data_Pending parameter is ignored. The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
		''' 
		''' Note&#160;&#160;This function only supports NIRFSG_VAL_PEAK_POWER mode as specified in the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute.  If a waveform is downloaded using this function, NIRFSG_ATTR_POWER_LEVEL_TYPE cannot be changed to NIRFSG_VAL_AVERAGE_POWER mode without causing error in the output.
		''' 
		''' Supported Devices&#58; NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Name">
		''' 
		''' name
		''' ViConstString
		''' Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
		''' 
		''' </param>
		''' <param name="Number_Of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt32
		''' Specifies the number of samples in the data array.
		''' 
		''' </param>
		''' <param name="Data">
		''' 
		''' 
		''' data
		''' RfsgNIComplexI16[]
		''' Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in the size_in_samples parameter in the niRFSG_AllocateArbWaveform function.
		'''  
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		<Obsolete> _
		Public Function WriteArbWaveformComplexI16(Name As String, Number_Of_Samples As Integer, Data As RfsgNIComplexI16()) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteArbWaveformComplexI16(Me._handle, Name, Number_Of_Samples, Data)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_SelectArbWaveform
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_SelectArbWaveform&#160;(ViSession&#160;vi, ViConstString&#160;name);
		''' Purpose
		''' Specifies the waveform that is generated upon a call to the niRFSG_Initiate function when the generationMode parameter of the niRFSG_ConfigureGenerationMode function is set to NIRFSG_VAL_ARB_WAVEFORM. You must specify a waveform using the name parameter if you have written multiple waveforms. The NI-RFSG device must be in the Configuration  state before you call this function. 
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Name">
		''' 
		''' name
		''' ViConstString
		''' Specifies the name of the stored waveform to generate. This is a case-insensitive alphanumeric string that does not use reserved words. NI-RFSG sets the NIRFSG_ATTR_ARB_SELECTED_WAVEFORM attribute to this value.
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function SelectArbWaveform(Name As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.SelectArbWaveform(Me._handle, Name)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ClearArbWaveform
		''' 
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ClearArbWaveform&#160;(ViSession&#160;vi, ViConstString&#160;name);
		''' Purpose
		''' Deletes a specified waveform from the pool of  currently defined waveforms. The NI-RFSG device must be in the Configuration state before you call this function.
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' </summary>
		''' <param name="Name">
		''' 
		''' name
		''' ViConstString
		''' Name of the stored waveform to delete.
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ClearArbWaveform(Name As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ClearArbWaveform(Me._handle, Name)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ClearAllArbWaveforms
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ClearAllArbWaveforms&#160;(ViSession&#160;vi);
		''' Purpose
		''' Deletes all currently defined waveforms and scripts. The NI-RFSG device must be in the Configuration  state before you call this function.
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ClearAllArbWaveforms() As Integer
			Dim pInvokeResult As Integer = PInvoke.ClearAllArbWaveforms(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureSignalBandwidth
		''' 
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureSignalBandwidth&#160;(ViSession&#160;vi, ViReal64&#160;signalBandwidth);
		''' Purpose
		''' Configures the signal bandwidth of the arbitrary waveform. The NI-RFSG device must be in the Configuration state before you call this function. 
		''' 
		''' NI-RFSG defines signal bandwidth as twice the maximum baseband signal deviation from 0 Hz. Usually, the baseband signal center frequency is 0 Hz. In such cases, the signal bandwidth is simply the baseband signal minimum frequency subtracted from its maximum frequency, or fmax minus fmin. NI-RFSG uses this value to optimally configure the center frequency of the upconverter to help minimize phase noise. The generated signal is not filtered to achieve the set bandwidth. However, specifying a bandwidth smaller than the actual bandwidth of the signal could potentially result in spectral distortion.
		''' 
		''' 
		''' Note&#160;&#160;Based on your signal bandwidth, NI-RFSG decides whether to configure the upconverter center frequency on the NI 5670/5671/5672 in increments of 1 MHz or 5 MHz. Failure to configure signal bandwidth may result in
		''' the signal being placed outside the upconverter passband.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Signal_Bandwidth">
		''' 
		''' signalBandwidth
		''' ViReal64
		''' Specifies the signal bandwidth used by NI-RFSG to generate an RF output signal. NI-RFSG sets the NIRFSG_ATTR_SIGNAL_BANDWIDTH  attribute to this value. 
		''' 
		''' Valid Values:
		''' 0 Hz to 20 MHz
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureSignalBandwidth(Signal_Bandwidth As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSignalBandwidth(Me._handle, Signal_Bandwidth)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureDigitalModulationUserDefinedWaveform
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureDigitalModulationUserDefinedWaveform&#160;(ViSession&#160;vi,&#160;ViInt32&#160;numberOfSamples,&#160;ViInt8[]&#160;userDefinedWaveform);
		''' Purpose
		''' Specifies the message signal used for digital modulation when NIRFSG_ATTR_DIGITAL_MODULATION_WAVEFORM_TYPE is set to NIRFSG_VAL_USER_DEFINED.Supported Devices: NI PXI/PXIe-5650/5651/5652
		''' 
		''' 
		''' </summary>
		''' <param name="Number_Of_Samples">
		''' 
		''' numberOfSamples
		''' ViInt32
		''' Specifies the number of samples in the message signal.
		''' 
		''' </param>
		''' <param name="User_Defined_Waveform">
		''' 
		''' userDefinedWaveform
		''' ViInt8[]
		''' Specifies the user-defined message signal used for digital modulation.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureDigitalModulationUserDefinedWaveform(Number_Of_Samples As Integer, User_Defined_Waveform As SByte()) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalModulationUserDefinedWaveform(Me._handle, Number_Of_Samples, User_Defined_Waveform)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigurePowerLevelType
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigurePowerLevelType&#160;(ViSession&#160;vi, ViInt32&#160;power_level_type);
		''' Purpose
		''' Specifies the way the driver interprets the NIRFSG_ATTR_POWER_LEVEL attribute. In average power mode, NI-RFSG automatically scales waveform data to use the maximum dynamic range.  In peak power mode, waveforms are scaled according to the NIRFSG_ATTR_SOFTWARE_SCALING_FACTOR attribute.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Power_Level_Type">
		''' 
		''' power_level_type
		''' ViInt32
		''' Specifies the way the driver interprets the value of the NIRFSG_ATTR_POWER_LEVEL attribute. NI-RFSG sets the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute to this value.
		''' 
		'''  
		'''                                                             Average Power (default)
		'''                     Indicates the desired power averaged in time. The driver maximizes the dynamic range by scaling the I/Q waveform so that its peak magnitude is equal to one. If your write more than one waveform, NI-RFSG scales each waveform without preserving the power level ratio between the waveforms.
		'''                 
		'''                                                             Peak Power
		'''                     
		'''                     Indicates the maximum power level of the RF signal averaged over one period of the RF carrier frequency (the peak envelope power). This setting requires that the magnitude of the I/Q waveform must always be less than or equal to one. When using peak power, the power level of the RF signal matches the specified power level at moments when the magnitude of the I/Q waveform equals one. If you write more than one waveform, the relative scaling between waveforms is preserved. In peak power mode, waveforms are scaled according to the NIRFSG_ATTR_ARB_WAVEFORM_SOFTWARE_SCALING_FACTOR attribute.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigurePowerLevelType(Power_Level_Type As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigurePowerLevelType(Me._handle, Power_Level_Type)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_CreateConfigurationList
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_CreateConfigurationList&#160;(ViSession&#160;vi, ViConstString&#160;listName, ViInt32&#160;numberOfAttributes, const ViAttr&#160;configurationListAttributes[], ViBoolean&#160;setAsActiveList);
		''' Purpose
		''' Creates an empty configuration list.  After a configuration list is created, the list is enabled using the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute.  Call the niRFSG_CreateConfigurationListStep function to add steps to the configuration list.
		''' 
		''' Supported Devices&#58; NI PXIe-5650/5651/5652/5673E
		''' 
		''' </summary>
		''' <param name="List_Name">
		''' 
		''' listName
		''' ViConstString
		''' Specifies the name of the configuration list.  This string may not contain spaces.
		''' 
		''' </param>
		''' <param name="Number_Of_Attributes">
		''' 
		''' numberOfAttributes
		''' const ViInt32
        ''' Specifies size of the <strong class="Monospace">configurationListAttributes</strong> parameter. 
		''' 
		''' </param>
		''' <param name="Configuration_List_Attributes">
		''' 
		''' configurationListAttributes[]
		''' const ViAttr
		''' Specifies the attributes that the user intends to change between configuration list steps.  Calling the niRFSG_CreateConfigurationList function allocates space for each of the configuration list attributes.  When you use an NI-RFSG Set attribute function to set one of the attributes in the configuration list, that attribute is set for one of the configuration list steps.  Use the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute to specify which configuration list step to configure.
		''' 
		''' 
		''' 
		''' 
		''' The following attributes are valid values for this parameter's array elements:
		''' 
		''' NIRFSG_ATTR_FREQUENCY
		''' 
		''' NIRFSG_ATTR_POWER_LEVEL
		''' 
		''' NIRFSG_ATTR_PHASE_OFFSET
		''' 
		''' NIRFSG_ATTR_TIMER_EVENT_INTERVAL
		''' 
		''' NIRFSG_ATTR_FREQUENCY_SETTLING
		''' 
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Set_As_Active_List">
		''' 
		''' setAsActiveList
		''' ViBoolean
		''' Sets this list as the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute when this parameter is enabled.   NI recommends that you set this parameter to VI_TRUE when creating the list.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function CreateConfigurationList(List_Name As String, Number_Of_Attributes As Integer, Configuration_List_Attributes As niRFSGProperties(), Set_As_Active_List As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.CreateConfigurationList(Me._handle, List_Name, Number_Of_Attributes, Configuration_List_Attributes, System.Convert.ToUInt16(Set_As_Active_List))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_CreateConfigurationListStep
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_CreateConfigurationListStep&#160;(ViSession&#160;vi, ViBoolean&#160;setAsActiveStep);
		''' Purpose
		''' Creates a new configuration list step in the configuration list specified by the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute.  When you create a configuration list step, a new instance of each attribute specified by the configuration list attributes is created.  Configuration list attributes are specified when a configuration list is created.  The new instance of an attribute can be accessed with any Set attribute function using the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST and NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes.
		''' 
		''' Supported Devices&#58; NI PXIe-5650/5651/5652/5673E
		''' 
		''' </summary>
		''' <param name="Set_As_Active_Step">
		''' 
		''' setAsActiveStep
		''' ViBoolean
		''' Sets this step as the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attribute list specified by the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute.  NI recommends that you set this parameter to VI_TRUE when creating the list steps.
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function CreateConfigurationListStep(Set_As_Active_Step As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.CreateConfigurationListStep(Me._handle, System.Convert.ToUInt16(Set_As_Active_Step))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_DeleteConfigurationList
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_DeleteConfigurationList&#160;(ViSession&#160;vi, ViConstString&#160;listName);
		''' Purpose
		''' Deletes a previously created configuration list and all the configuration list steps in the configuration list.  When a configuration list step is deleted, all the instances of the attributes associated with the configuration list step are also removed.
		''' 
		''' Supported Devices&#58; NI PXIe-5650/5651/5652/5673E
		''' 
		''' </summary>
		''' <param name="List_Name">
		''' 
		''' listName
		''' ViConstString
		''' Specifies the name of the configuration list.  This string may not contain spaces.
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function DeleteConfigurationList(List_Name As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.DeleteConfigurationList(Me._handle, List_Name)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureSoftwareStartTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureSoftwareStartTrigger&#160;(ViSession&#160;vi);
		''' Purpose
		''' Configures the Start trigger for software triggering. Refer to the niRFSG_SendSoftwareEdgeTrigger function for more information about using a software trigger.  The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureSoftwareStartTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSoftwareStartTrigger(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureDigitalEdgeStartTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureDigitalEdgeStartTrigger&#160;(ViSession&#160;vi, ViConstString&#160;source, ViInt32&#160;edge);
		''' Purpose
		''' Configures the Start trigger for digital edge triggering.  The NI-RFSG device must be in the Configuration state before calling this function.
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the source terminal for the digital edge trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE to this value. 
		''' Defined Values:
		''' 
		''' ""Empty string.
		''' NIRFSG_VAL_PFI0_STRPFI 0 on the front panel SMB connector.
		''' NIRFSG_VAL_PFI1_STRPFI 1 on the front panel SMB connector.
		''' NIRFSG_VAL_PFI2_STRPFI 2 on the front panel DDC connector.
		''' NIRFSG_VAL_PFI3_STRPFI 3 on the front panel DDC connector.
		''' NIRFSG_VAL_PXI_TRIG0_STRPXI trigger line 0.
		''' NIRFSG_VAL_PXI_TRIG1_STRPXI trigger line 1.
		''' NIRFSG_VAL_PXI_TRIG2_STRPXI trigger line 2.
		''' NIRFSG_VAL_PXI_TRIG3_STRPXI tigger line 3.
		''' NIRFSG_VAL_PXI_TRIG4_STRPXI trigger line 4.
		''' NIRFSG_VAL_PXI_TRIG5_STRPXI trigger line 5.
		''' NIRFSG_VAL_PXI_TRIG6_STRPXI trigger line 6.
		''' NIRFSG_VAL_PXI_TRIG7_STRPXI trigger line 7.
		''' NIRFSG_VAL_PXI_STAR_STRPXI Star trigger line.
		''' 
		''' Default Value: &quot;&quot; (empty string)
		''' 
		''' 
		''' </param>
		''' <param name="Edge">
		''' 
		''' edge
		''' ViInt32
		''' Specifies the active edge for the Start trigger.  NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_EDGE to this value.
		''' Defined Values:NIRFSG_VAL_RISING_EDGERising edge trigger transition from low to high.NIRFSG_VAL_FALLING_EDGEFalling edge trigger.
		''' 
		''' 
		''' Default Value: NIRFSG_VAL_RISING_EDGE
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureDigitalEdgeStartTrigger(Source As String, Edge As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalEdgeStartTrigger(Me._handle, Source, Edge)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureP2PEndpointFullnessStartTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureP2PEndpointFullnessStartTrigger&#160;(ViSession&#160;vi, ViInt64&#160;p2pEndpointFullnessLevel);
		''' Purpose
		''' Configures the Start trigger to detect peer-to-peer endpoint fullness. Generation begins when the number of samples in the peer-to-peer endpoint reaches the threshold specified by the level parameter.  The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' Note&#160;&#160;Due to an additional internal FIFO in the RF signal generator, the writer peer actually writes 2,304 bytes more than the quantity of data specified by this function to satisfy the trigger level.
		''' 
		''' 
		''' Supported Devices&#58; NI PXIe-5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="P2P_Endpoint_Fullness_Level">
		''' 
		''' p2pEndpointFullnessLevel
		''' ViInt64
		''' Specifies the quantity of data in the FIFO endpoint that asserts the trigger.  Units are samples per channel. 
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureP2PEndpointFullnessStartTrigger(P2P_Endpoint_Fullness_Level As Long) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureP2PEndpointFullnessStartTrigger(Me._handle, P2P_Endpoint_Fullness_Level)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_DisableStartTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_DisableStartTrigger&#160;(ViSession&#160;vi);
		''' Purpose
		''' Configures the device to not wait for a Start trigger after the niRFSG_Initiate function is called. Calling the niRFSG_DisableStartTrigger function is only necessary if the Start trigger has been previously configured and now needs to be disabled.  The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function DisableStartTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.DisableStartTrigger(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureSoftwareScriptTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureSoftwareScriptTrigger&#160;(ViSession&#160;vi, ViConstString&#160;triggerIdentifier);
		''' Purpose
		''' Configures the Script trigger for software triggering. Refer to the niRFSG_SendSoftwareEdgeTrigger function for more information about using the software Script trigger. The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Trigger_Identifier">
		''' 
		''' triggerIdentifier
		''' ViConstString
		''' Specifies the Script trigger to configure.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureSoftwareScriptTrigger(Trigger_Identifier As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureSoftwareScriptTrigger(Me._handle, Trigger_Identifier)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureDigitalEdgeScriptTrigger
		''' Specific Function
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureDigitalEdgeScriptTrigger&#160;(ViSession&#160;vi, ViConstString&#160;triggerIdentifier, ViConstString&#160;source, ViInt32&#160;edge);
		''' Purpose
		''' Configures the specified Script trigger for digital edge triggering. The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Trigger_Identifier">
		''' 
		''' triggerIdentifier
		''' ViConstString
		''' Specifies the Script trigger to configure.
		''' 
		''' </param>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the source terminal for the digital edge Script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_SOURCE to this value.
		''' Defined Values:
		''' 
		''' ""Empty string.
		''' NIRFSG_VAL_PFI0_STRPFI 0 on the front panel SMB connector.
		''' NIRFSG_VAL_PFI1_STRPFI 1 on the front panel SMB connector.
		''' NIRFSG_VAL_PFI2_STRPFI 2 on the front panel DDC connector.
		''' NIRFSG_VAL_PFI3_STRPFI 3 on the front panel DDC connector.
		''' NIRFSG_VAL_PXI_TRIG0_STRPXI trigger line 0.
		''' NIRFSG_VAL_PXI_TRIG1_STRPXI trigger line 1.
		''' NIRFSG_VAL_PXI_TRIG2_STRPXI trigger line 2.
		''' NIRFSG_VAL_PXI_TRIG3_STRPXI tigger line 3.
		''' NIRFSG_VAL_PXI_TRIG4_STRPXI trigger line 4.
		''' NIRFSG_VAL_PXI_TRIG5_STRPXI trigger line 5.
		''' NIRFSG_VAL_PXI_TRIG6_STRPXI trigger line 6.
		''' NIRFSG_VAL_PXI_TRIG7_STRPXI trigger line 7.
		''' NIRFSG_VAL_PXI_STAR_STRPXI Star trigger line.
		''' 
		''' Default Value: &quot;&quot; (empty string)
		''' 
		''' </param>
		''' <param name="Edge">
		''' 
		''' edge
		''' ViInt32
		''' Specifies the active edge for the digital edge Script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_EDGE to this value.
		''' Defined Values:NIRFSG_VAL_RISING_EDGERising edge trigger transition from low to high.NIRFSG_VAL_FALLING_EDGEFalling edge trigger.
		''' 
		''' Default Value: NIRFSG_VAL_RISING_EDGE
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureDigitalEdgeScriptTrigger(Trigger_Identifier As String, Source As String, Edge As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalEdgeScriptTrigger(Me._handle, Trigger_Identifier, Source, Edge)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureDigitalLevelScriptTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureDigitalLevelScriptTrigger&#160;(ViSession vi, ViConstString Trigger_Identifier, ViConstString Source, ViInt32 Level);
		''' 
		''' Purpose
		''' Configures a specified Script trigger for digital level triggering.  The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' Supported Devices: NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Trigger_Identifier">
		''' 
		''' triggerIdentifier
		''' ViConstString
		''' Specifies the Script trigger to configure.
		''' 
		''' </param>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the trigger source terminal for the digital level script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_SOURCE to this value. 
		''' Defined Values:
		''' 
		''' ""Empty string.
		''' 
		''' NIRFSG_VAL_PFI0_STRPFI 0 on the front panel SMB connector.
		''' NIRFSG_VAL_PFI1_STRPFI 1 on the front panel SMB connector.
		''' NIRFSG_VAL_PFI2_STRPFI 2 on the front panel DDC connector.
		''' NIRFSG_VAL_PFI3_STRPFI 3 on the front panel DDC connector.
		''' NIRFSG_VAL_PXI_TRIG0_STRPXI trigger line 0.
		''' NIRFSG_VAL_PXI_TRIG1_STRPXI trigger line 1.
		''' NIRFSG_VAL_PXI_TRIG2_STRPXI trigger line 2.
		''' NIRFSG_VAL_PXI_TRIG3_STRPXI tigger line 3.
		''' NIRFSG_VAL_PXI_TRIG4_STRPXI trigger line 4.
		''' NIRFSG_VAL_PXI_TRIG5_STRPXI trigger line 5.
		''' NIRFSG_VAL_PXI_TRIG6_STRPXI trigger line 6.
		''' NIRFSG_VAL_PXI_TRIG7_STRPXI trigger line 7.
		''' NIRFSG_VAL_RTSI0_STRRTSI trigger line 0.
		''' NIRFSG_VAL_RTSI1_STRRTSI trigger line 1.
		''' NIRFSG_VAL_RTSI2_STRRTSI trigger line 2.
		''' NIRFSG_VAL_RTSI3_STRRTSI trigger line 3.
		''' NIRFSG_VAL_RTSI4_STRRTSI trigger line 4.
		''' NIRFSG_VAL_RTSI5_STRRTSI trigger line 5.
		''' NIRFSG_VAL_RTSI6_STRRTSI trigger line 6.
		'''  NIRFSG_VAL_PXI_STAR_STRPXI STAR Line.
		''' Default Value: "" (empty string)
		''' 
		''' </param>
		''' <param name="Level">
		''' 
		''' Level
		''' ViInt32
		''' Specifies the active level for the digital level script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_ACTIVE_LEVEL to this value.
		''' Defined Values:NIRFSG_VAL_ACTIVE_HIGHNIRFSG_VAL_ACTIVE_LOW
		''' Default Value: NIRFSG_VAL_ACTIVE_HIGH
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureDigitalLevelScriptTrigger(Trigger_Identifier As String, Source As String, Level As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalLevelScriptTrigger(Me._handle, Trigger_Identifier, Source, Level)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_DisableScriptTrigger
		''' Specific Function
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_DisableScriptTrigger&#160;(ViSession&#160;vi, ViConstString&#160;triggerIdentifier);
		''' Purpose
		''' Configures the device to not wait for the specified Script trigger after the niRFSG_Initiate function is called. Calling the niRFSG_DisableScriptTrigger function is only necessary if the Script trigger has been previously configured and now must be disabled. The NI-RFSG device must be in the Configuration state before you call this function.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Trigger_Identifier">
		''' 
		''' triggerIdentifier
		''' ViConstString
		''' Specifies the Script trigger to configure.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function DisableScriptTrigger(Trigger_Identifier As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.DisableScriptTrigger(Me._handle, Trigger_Identifier)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_SendSoftwareEdgeTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_SendSoftwareEdgeTrigger&#160;(ViSession&#160;vi, ViInt32&#160;trigger, ViConstString&#160;triggerIdentifier);
		''' Purpose
		''' Forces a particular trigger to occur. The specified trigger is generated regardless of whether the trigger has been configured as a software trigger.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Trigger">
		''' 
		''' trigger
		''' ViInt32
		''' Specifies the trigger to assert.
		''' Defined Values:NIRFSG_VAL_START_TRIGGERTransitions the device from an Idle state to a Generation state where the device can respond to sample clocks.NIRFSG_VAL_SCRIPT_TRIGGERAllows you to create sophisticated generation operations that are determined by the generation script.
		''' 
		''' Default Value: NIRFSG_VAL_START_TRIGGER
		''' 
		''' 
		''' </param>
		''' <param name="Trigger_Identifier">
		''' 
		''' triggerIdentifier
		''' ViConstString
		''' Specifies the Script trigger to configure.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function SendSoftwareEdgeTrigger(Trigger As Integer, Trigger_Identifier As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.SendSoftwareEdgeTrigger(Me._handle, Trigger, Trigger_Identifier)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger&#160;(ViSession&#160;vi, ViConstString&#160;source, ViInt32&#160;edge);
		''' Purpose
		''' Configures the Configuration List Step trigger for digital edge triggering. The NI-RFSG device must be in the Configuration state before you call this function.
		''' 
		''' Supported Devices&#58; NI PXIe-5650/5651/5652/5653/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Source">
		''' 
		''' source
		''' ViConstString
		''' Specifies the trigger source terminal for the digital edge Configuration List Step trigger. NI-RFSG sets the NIRFSG_ATTR_DIGITAL_EDGE_CONFIGURATION_LIST_STEP_TRIGGER_SOURCE  attribute to this value. Refer to this attribute for possible values.
		''' 
		''' 
		''' </param>
		''' <param name="Edge">
		''' 
		''' edge
		''' ViInt32
		''' Specifies the active edge for the digital edge Configuration List Step trigger.  NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_CONFIGURATION_LIST_STEP_TRIGGER_EDGE to this value.
		''' Defined Values:NIRFSG_VAL_RISING_EDGERising edge trigger transition from low to high.NIRFSG_VAL_FALLING_EDGEFalling edge trigger.
		''' 
		''' 
		''' Default Value: NIRFSG_VAL_RISING_EDGE
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureDigitalEdgeConfigurationListStepTrigger(Source As String, Edge As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureDigitalEdgeConfigurationListStepTrigger(Me._handle, Source, Edge)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_DisableConfigurationListStepTrigger
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_DisableConfigurationListStepTrigger&#160;(ViSession&#160;vi, ViConstString&#160;source, ViInt32&#160;edge);
		''' Purpose
		''' Configures the device to not receive triggers for the configuration list after the niRFSG_Initiate function is called.  The configuration list does not advance steps if this trigger is disabled.  Calling the niRFSG_DisableConfigurationListStepTrigger  function is necessary if the trigger has been previously configuration and then needs to be disabled. The NI-RFSG device must be in the Configuration state before you call this VI.
		''' 
		''' Supported Devices&#58; NI PXIe-5650/5651/5652/5653/5673E
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function DisableConfigurationListStepTrigger() As Integer
			Dim pInvokeResult As Integer = PInvoke.DisableConfigurationListStepTrigger(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_GetTerminalName
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_GetTerminalName&#160;(ViSession&#160;vi, ViInt32&#160;signal, ViConstString&#160;signalIdentifier, ViInt32&#160;bufferSize, ViChar&#160;terminalName);
		''' Purpose
		''' Returns the fully-qualified name of the signal being queried. The fully-qualified name is helpful to automatically route signals in a multisegment chassis.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Signal">
		''' 
		''' signal
		''' ViInt32
		''' Specifies the signal being queried.
		''' 
		''' 
		''' Defined Values:
		''' 
		''' NIRFSG_VAL_START_TRIGGERQueries the Start trigger.NIRFSG_VAL_SCRIPT_TRIGGERQueries a Script trigger.
		''' NIRFSG_VAL_MARKER_EVENTQueries a Marker event.
		''' NIRFSG_VAL_STARTED_EVENTQueries the Started event.
		''' NIRFSG_VAL_DONE_EVENTQueries the Done event.
		''' NIRFSG_VAL_CONFIGURATION_LIST_STEP_TRIGGERQueries the Configuration List Step trigger.
		''' 
		''' 
		''' </param>
		''' <param name="Signal_Identifier">
		''' 
		''' signalIdentifier
		''' ViConstString
		''' Specifies which instance of the selected signal to query.  This parameter is necessary when the signal parameter is set to NIRFSG_VAL_SCRIPT_TRIGGER or NIRFSG_VAL_MARKER_EVENT. Otherwise, set the signalIdentifier parameter to "" (empty string).
		''' 
		''' 
		''' 
		''' 
		''' Defined Values:
		''' 
		''' NIRFSG_VAL_SCRIPT_TRIGGER0Specifies Script trigger 0.
		''' NIRFSG_VAL_SCRIPT_TRIGGER1Specifies Script trigger 1.
		'''   NIRFSG_VAL_SCRIPT_TRIGGER2Specifies Script trigger 2.
		'''   NIRFSG_VAL_SCRIPT_TRIGGER3Specifies Script trigger 3.
		''' NIRFSG_VAL_MARKER_EVENT0 Specifies Marker 0.
		'''  NIRFSG_VAL_MARKER_EVENT1Specifies Marker 1.
		'''   NIRFSG_VAL_MARKER_EVENT2 Specifies Marker 2.
		'''    NIRFSG_VAL_MARKER_EVENT3Specifies Marker 3.
		''' "" (empty string)Does not specify a signal identifier. 
		'''    
		''' 
		''' </param>
		''' <param name="Buffer_Size">
		''' 
		''' bufferSize
		''' ViInt32
		''' Pass the number of bytes in the ViChar buffer you specify for the attributeValue parameter.  
		''' 
		''' If you pass 0, you can pass VI_NULL for the attributeValue parameter.
		''' </param>
		''' <param name="Terminal_Name">
		''' 
		''' terminalName[]
		''' ViChar
		''' Returns the string to use as the source for other devices.
		'''    
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the status code, call the niRFSG_error_message function.  To obtain additional information about the error condition, call the niRFSG_GetError function.  To clear the error information from the driver, call the niRFSG_ClearError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function GetTerminalName(Signal As Integer, Signal_Identifier As String, Buffer_Size As Integer, Terminal_Name As System.Text.StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetTerminalName(Me._handle, Signal, Signal_Identifier, Buffer_Size, Terminal_Name)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureRefClock
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureRefClock&#160;(ViSession&#160;vi, ViConstString&#160;clockSource, ViReal64&#160;refClockRate);
		''' Purpose
		''' Configures the NI-RFSG device Reference clock.  The Reference clock ensures that the NI-RFSG devices are operating from a common timebase.  The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Ref_Clock_Source">
		''' 
		''' refClockSource
		''' ViConstString
		''' Specifies the source of Reference clock signal. 
		''' 
		''' 
		'''  
		''' 
		''' NIRFSG_VAL_ONBOARD_CLOCK_STR (default)Uses the onboard Reference clock as the clock source.
		''' NIRFSG_VAL_REF_IN_STR             Uses the clock signal present at the front panel REF IN connector as the clock source.     
		''' NIRFSG_VAL_PXI_CLK_STRUses the PXI_CLK signal, which is present on the PXI backplane, as the clock source.  
		''' NIRFSG_VAL_CLK_IN_STR  Uses the clock signal present at the front panel CLK IN connector as the clock source.
		''' 
		''' </param>
		''' <param name="Ref_Clock_Rate">
		''' 
		''' refClockRate
		''' ViReal64
		''' Specifies the Reference clock rate, expressed in Hz. NI-RFSG sets NIRFSG_ATTR_REF_CLOCK_RATE to this value.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureRefClock(Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureRefClock(Me._handle, Ref_Clock_Source, Ref_Clock_Rate)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigurePXIChassisClk10
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigurePXIChassisClk10&#160;(ViSession&#160;vi, ViConstString&#160;pxiClk10Source);
		''' Purpose
		''' Specifies the signal to drive the 10&#160;MHz Reference clock on the PXI backplane. 
		''' This option can only be configured when the NI 5610 is in Slot 2 of the PXI chassis.
		''' The NI-RFSG device must be in the Configuration state before you call this function.
		''' 
		''' Supported Devices&#58; NI PXI-5610/5670/5671
		''' 
		''' 
		''' </summary>
		''' <param name="PXI_Clk_10_Source">
		''' 
		''' pxiClk10Source
		''' ViConstString
		''' Specifies the source of the Reference clock signal.
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigurePXIChassisClk10(PXI_Clk_10_Source As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigurePXIChassisClk10(Me._handle, PXI_Clk_10_Source)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ExportSignal
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ExportSignal&#160;(ViSession&#160;vi, ViInt32&#160;signal, ViConstString&#160;signalIdentifier, ViConstString&#160;outputTerminal);
		''' Purpose
		''' Routes signals (triggers, clocks, and events) to a specified output terminal. The NI-RFSG device must be in the Configuration state before you call this function.
		''' 
		''' You can clear a previously routed signal by exporting the signal to "" (empty string). 
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Signal">
		''' 
		''' signal
		''' ViInt32
		''' Specifies the signal to route.Onboard Reference clock output terminal is not configurable on the&#160;NI 5670/5671/5672 device.Triggers and Marker events are not available on the NI 5650/5651/5652 device.
		''' 
		''' 
		''' Defined Values:
        ''' <tr>
		''' NIRFSG_VAL_START_TRIGGERExports a Start trigger.NIRFSG_VAL_SCRIPT_TRIGGERExports a Script trigger.
		''' NIRFSG_VAL_MARKER_EVENTExports a Marker event.
		''' NIRFSG_VAL_DONE_EVENTExports a Done event.NIRFSG_VAL_REF_CLOCKRoutes the onboard 10 MHz synchronization clock (PXI chassis only).
		''' NIRFSG_VAL_STARTED_EVENTExports a Started event.</tr>
		''' 
		''' </param>
		''' <param name="Signal_Identifier">
		''' 
		''' signalIdentifier
		''' ViConstString
		''' Specifies which instance of the selected signal to export.This parameter is useful when the signal parameter is set to NIRFSG_VAL_SCRIPT_TRIGGER or NIRFSG_VAL_MARKER_EVENT. Otherwise, set the signalIdentifier parameter to "" (empty string).
		''' 
		''' 
		''' 
		''' 
		''' Defined Values:
		''' 
		''' NIRFSG_VAL_SCRIPT_TRIGGER0Specifies Script trigger 0.
		''' NIRFSG_VAL_SCRIPT_TRIGGER1Specifies Script trigger 1.
		'''   NIRFSG_VAL_SCRIPT_TRIGGER2Specifies Script trigger 2.
		'''   NIRFSG_VAL_SCRIPT_TRIGGER3Specifies Script trigger 3.
		''' NIRFSG_VAL_MARKER_EVENT0 Specifies Marker 0.
		'''  NIRFSG_VAL_MARKER_EVENT1Specifies Marker 1.
		'''   NIRFSG_VAL_MARKER_EVENT2 Specifies Marker 2.
		'''    NIRFSG_VAL_MARKER_EVENT3Specifies Marker 3.
		''' "" (empty string)None (no signal to export) 
		'''    
		''' 
		''' </param>
		''' <param name="Output_Terminal">
		''' 
		''' outputTerminal
		''' ViConstString
		''' Specifies the terminal where the signal is exported.  You can choose not to export any signal.
		''' 
		''' 
		''' 
		''' 
		''' 
		''' 
		''' Defined Values:
		''' 
		''' NIRFSG_VAL_DO_NOT_EXPORT_STRDoes not export a signal.
		''' NIRFSG_VAL_REF_OUT_STRExports a signal to the REF OUT connector.
		'''   NIRFSG_VAL_REF_OUT2_STRExports a signal to the REF OUT2 connector, if applicable.
		'''   NIRFSG_VAL_CLK_OUT_STRExports a signal to the CLK OUT connector.
		''' NIRFSG_VAL_PFI0_STR Exports a signal to the PFI 0 terminal.
		'''  NIRFSG_VAL_PFI1_STRExports a signal to the PFI 1 terminal.
		'''   NIRFSG_VAL_PFI4_STR Exports a signal to the PFI 4 terminal.
		'''    NIRFSG_VAL_PFI5_STRExports a signal to the PFI 5 terminal.
		'''   NIRFSG_VAL_PXI_TRIG0_STRExports a signal to the PXI trigger line 0 terminal.
		'''   NIRFSG_VAL_PXI_TRIG1_STRExports a signal to the PXI trigger line 1 terminal.
		'''   NIRFSG_VAL_PXI_TRIG2_STRExports a signal to the PXI trigger line 2 terminal.
		'''   NIRFSG_VAL_PXI_TRIG3_STRExports a signal to the PXI trigger line 3 terminal.
		'''   NIRFSG_VAL_PXI_TRIG4_STRExports a signal to the PXI trigger line 4 terminal.
		''' 
		'''   NNIRFSG_VAL_PXI_TRIG5_STRExports a signal to the PXI trigger line 5 terminal.
		''' 
		'''   NIRFSG_VAL_PXI_TRIG6_STRExports a signal to the PXI trigger line 6 terminal.
		'''   NIRFSG_VAL_PXI_STAR_STRExports a signal to the PXI star trigger line terminal.
		'''    
		''' 
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ExportSignal(Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ExportSignal(Me._handle, Signal, Signal_Identifier, Output_Terminal)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_GetStreamEndpointHandle
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_GetStreamEndpointHandle&#160;(ViSession&#160;vi, ViConstString&#160;streamEndpoint, ViUInt32*&#160;readerHandle);
		''' Purpose
		''' Returns a reader endpoint handle that can be used with NI-P2P to configure a peer-to-peer stream with an RF signal generator endpoint.
		''' 
		''' 
		''' Supported Devices: NI PXIe-5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Stream_Endpoint">
		''' 
		''' streamEndpoint
		''' ViConstString
		''' Specifies the stream endpoint FIFO to configure. Refer to the Peer-to-Peer Data Streaming topic in the NI RF Signal Generators Help for more information.
		''' 
		''' </param>
		''' <param name="Reader_Handle">
		''' 
		''' readerHandle
		''' ViUInt32*
		''' Returns the reader endpoint handle that is used with NI-P2P to create a stream with the NI-RFSG device as an endpoint.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function GetStreamEndpointHandle(Stream_Endpoint As String, ByRef Reader_Handle As UInteger) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetStreamEndpointHandle(Me._handle, Stream_Endpoint, Reader_Handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' 
		''' 
		''' niRFSG_WriteP2PEndpointI16
		''' 
		''' ViStatus niRFSG_WriteP2PEndpointI16&#160;(ViSession&#160;vi, ViConstString&#160;streamEndpoint, ViInt32&#160;numberOfSamples, ViInt16&#160;endpointData[])
		''' 
		''' Purpose
		''' 
		''' Writes an array of 16-bit integer data to the peer-to-peer endpoint. Use this function to write initial data from the host to the endpoint before starting generation to avoid an underflow when you start the generation.
		''' 
		''' Supported Devices: NI PXIe-5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Stream_Endpoint">
		''' 
		''' streamEndpoint
		''' ViConstString
		''' Specifies the stream endpoint FIFO to configure. Refer to the Peer-to-Peer Data Streaming topic in the NI RF Signal Generators Help for more information.
		''' 
		''' </param>
		''' <param name="Number_Of_Samples">
		''' 
		''' 
		''' numberOfSamples
		''' ViInt32
		''' Specifies the number of samples to write into the endpoint FIFO.
		'''  
		''' </param>
		''' <param name="Endpoint_Data">
		''' 
		''' 
		''' endpointData
		''' ViInt16 []
		''' Specifies the array of data to write into the endpoint FIFO. The binary data is left-justified.
		'''  
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function WriteP2PEndpointI16(Stream_Endpoint As String, Number_Of_Samples As Integer, Endpoint_Data As Short()) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteP2PEndpointI16(Me._handle, Stream_Endpoint, Number_Of_Samples, Endpoint_Data)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_WriteScript
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_WriteScript&#160;(ViSession&#160;vi, ViConstString&#160;script);
		''' 
		''' Purpose
		''' Writes a script to the device to control waveform generation in Script mode. First, configure your device for Script mode by calling the niRFSG_ConfigureGenerationMode function. The NI-RFSG device must be in the Configuration state before calling the niRFSG_WriteScript function. Refer to Scripting Instructions in the NI RF Signal Generators Help for information about using scripts
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' </summary>
		''' <param name="Script">
		''' 
		''' 
		''' script
		''' ViConstString
		''' Specifies a string containing a syntactically correct script. NI-RFSG supports multiple scripts that may be selected by name with the NIRFSG_ATTR_SELECTED_SCRIPT attribute. Refer to Scripting Instructions for more information about using scripts. 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function WriteScript(Script As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.WriteScript(Me._handle, Script)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureOutputEnabled
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureOutputEnabled&#160;(ViSession&#160;vi, ViBoolean&#160;output_enabled);
		''' Purpose
		''' Enables or disables signal output.  You can call this function in any software state, and it does not change the current software state.  Setting output_enabled to VI_FALSE while in the Generation state attenuates the generated signal so that no signal is output.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Output_Enabled">
		''' 
		''' output_enabled
		''' ViBoolean
		''' Specifies whether you want to enable or disable the output.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ConfigureOutputEnabled(Output_Enabled As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureOutputEnabled(Me._handle, System.Convert.ToUInt16(Output_Enabled))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ConfigureIQEnabled [OBSOLETE]
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ConfigureIQEnabled&#160;(ViSession&#160;vi, ViBoolean&#160;enabled);
		''' Purpose
		''' Configures the NI-RFSG device to apply I/Q (vector) modulation to the RF output signal. I/Q modulation must be enabled in order to generate any arbitrary (non-sine) waveform; if I/Q modulation is disabled, a sine tone is always generated, regardless if an arbitrary waveform is written. The NI-RFSG device must be in the Configuration state before calling this function.
		''' 
		''' 
		''' 
		''' Note&#160;&#160;This function is obsolete.  Use the  NIRFSG_ATTR_GENERATION_MODE attribute to enable I/Q modulation instead.
		''' 
		''' Upon device initialization, or calling the niRFSG_reset function or the niRFSG_ResetDevice function, I/Q modulation is disabled.
		''' 
		''' 
		''' </summary>
		''' <param name="IQ_Enabled">
		''' 
		''' enabled
		''' ViBoolean
		''' NI-RFSG sets the NIRFSG_ATTR_IQ_ENABLED attribute to this value.
		''' 
		''' 
		''' 
		''' Defined Values:
		''' 
		''' 
		''' VI_TRUEEnables IQ (vector) modulation (arbitrary waveform generation)VI_FALSEDisables IQ (vector) modulation (sine wave generation)
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		<Obsolete> _
		Public Function ConfigureIQEnabled(IQ_Enabled As Boolean) As Integer
			Dim pInvokeResult As Integer = PInvoke.ConfigureIQEnabled(Me._handle, System.Convert.ToUInt16(IQ_Enabled))
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' 
		''' 
		''' 
		''' niRFSG_ResetAttribute
		''' 
		''' ViStatus niRFSG_ResetAttribute         (ViSession vi, ViConstString channelName, ViAttr attributeId);
		''' 
		''' Purpose
		''' 
		''' Resets the attribute to its default value.
		''' 
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' </summary>
		''' <param name="Channel_Name">
		''' 
		''' channelName
		''' ViConstString
		''' Specifies the channel to which the attribute applies if this attribute is channel-based. If the attribute is not channel-based, set this parameter to &quot;&quot; (empty string) or VI_NULL.
		''' 
		''' Default Value:  &quot;&quot; (empty string)
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Attribute_ID">
		''' 
		''' attributeID
		''' ViAttr
		''' Pass the ID of an attribute.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ResetAttribute(Channel_Name As String, Attribute_ID As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ResetAttribute(Me._handle, Channel_Name, Attribute_ID)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_Initiate
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_Initiate&#160;(ViSession&#160;vi);
		''' Purpose
		''' Initiates signal generation, causing the NI-RFSG device to leave the Configuration state and enter the Generation state.  If the settings have not been committed to the device before you call this function, they are committed with this function. The operation returns when the RF output signal settles. To return to the Configuration state, call the niRFSG_Abort function. On the NI 5653, this function tunes the device and waits for the required settling time.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function Initiate() As Integer
			Dim pInvokeResult As Integer = PInvoke.Initiate(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_CheckGenerationStatus
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_CheckGenerationStatus&#160;(ViSession&#160;vi, ViBoolean*&#160;isDone);
		''' Purpose
		''' Checks the status of the generation.  Call this function to check for any errors that might occur during the signal generation or to check whether the device has finished generating.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Is_Done">
		''' 
		''' isDone
		''' ViBoolean*
		''' Returns information about the completion of signal generation.
		''' 
		''' 
		''' Defined Values:
		''' 
		''' VI_TRUESignal generation is complete. VI_FALSE Signal generation is occurring.
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function CheckGenerationStatus(ByRef Is_Done As Boolean) As Integer
			Dim Is_DoneAsUShort As UShort
			Dim pInvokeResult As Integer = PInvoke.CheckGenerationStatus(Me._handle, Is_DoneAsUShort)
			Is_Done = System.Convert.ToBoolean(Is_DoneAsUShort)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_Abort
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_Abort&#160;(ViSession&#160;vi);
		''' Purpose
		''' Stops signal generation.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function Abort() As Integer
			Dim pInvokeResult As Integer = PInvoke.Abort(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_Commit
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_Commit&#160;(ViSession&#160;vi);
		''' Purpose
		''' Programs the device with the correct settings.  Calling this function moves the NI-RFSG device from the Configuration state to the Committed state. 
		''' After calling this function, changing any attribute reverts the NI-RFSG device to the Configuration state.
		''' 
        ''' <p class="Body">Supported devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E</p>
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function Commit() As Integer
			Dim pInvokeResult As Integer = PInvoke.Commit(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_PerformThermalCorrection
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_PerformThermalCorrection&#160;(ViSession&#160;vi);
		''' Purpose
		''' Corrects for any signal drift due to environmental temperature variation when generating the same signal for extended periods of time without a parameter change.   Under normal circumstances of short-term signal generation, NI-RFSG performs thermal correction automatically by ensuring stable power levels, and you do not need to call this function.
		''' 
		''' Use this function when generating the same signal for an extended period of time in a temperature-fluctuating environment.
		''' The NI-RFSG device must be in the Generation state before calling this function.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function PerformThermalCorrection() As Integer
			Dim pInvokeResult As Integer = PInvoke.PerformThermalCorrection(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_WaitUntilSettled
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_WaitUntilSettled&#160;(ViSession&#160;vi, ViInt32&#160;maxTimeMilliseconds);
		''' Purpose
		''' Waits until the RF output signal has settled. This function is useful for devices that support changes while in the Generation state. Call this function after making a dynamic change to wait for the output to settle. 
		''' 
		''' 
		''' 
		''' You can also call this function after calling the niRFSG_Commit function to wait for changes to settle. The niRFSG_WaitUntilSettled function is not needed after calling the niRFSG_Initiate function because the niRFSG_Initiate function does not return until the output is settled. 
		''' 
		''' Supported Devices&#58;  NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Max_Time_Milliseconds">
		''' 
		''' maxTimeMilliseconds
		''' ViInt32
		''' Defines the maximum time the function waits for the output to settle. If the maximum time is exceeded, this function returns an error. The units are expressed in milliseconds.
		''' 
		''' Default Value: 10000
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function WaitUntilSettled(Max_Time_Milliseconds As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.WaitUntilSettled(Me._handle, Max_Time_Milliseconds)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_reset
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_reset&#160;(ViSession&#160;vi);
		''' Purpose
		''' Resets all attributes to their default values and moves the NI-RFSG device to the Configuration state.  This function aborts the generation, clears all routes, and resets session attributes to the initial values.  During a reset, routes of signals between this and other devices are released, regardless of which device created the route.
		''' 
		''' Generally, calling this function instead of the niRFSG_ResetDevice function is acceptable.  The niRFSG_reset function executes faster than the niRFSG_ResetDevice function.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function reset() As Integer
			Dim pInvokeResult As Integer = PInvoke.reset(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ResetDevice
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ResetDevice&#160;(ViSession&#160;vi);
		''' 
		''' Purpose
		''' 
		''' Performs a hard reset on the device which consists of the following actions:
		''' Signal generation is stopped.
		''' All routes are released.
		''' External bidirectional terminals are tristated.
		''' FPGAs are reset.
		''' Hardware is configured to its default state.
		''' All session attributes are reset to their default states.
		'''  
		''' During a device reset, routes of signals between this and other devices are released, regardless of which device created the route.
		''' 
		''' NI 5610/5670/5671/5672&#8212; After calling this function, the device requires 25 seconds before returning to full functionality.  NI-RFSG enforces this condition by adding a wait, if needed, the next time you try to access the device. 
		'''  
		''' 
		''' Note&#160;&#160;You must call the niRFSG_ResetDevice function if the NI-RFSG device has shut down because of a high-temperature condition.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ResetDevice() As Integer
			Dim pInvokeResult As Integer = PInvoke.ResetDevice(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_ResetWithDefaults
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_ResetWithDefaults&#160;(ViSession vi);
		''' 
		''' Purpose
		''' Performs a software reset of the device, returning it to the default state and applying any initial default settings from the IVI Configuration Store.
        ''' <p class="body">Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E</p>
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ResetWithDefaults() As Integer
			Dim pInvokeResult As Integer = PInvoke.ResetWithDefaults(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_GetChannelName
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_GetChannelName&#160;(ViSession vi, ViInt32 Index, ViInt32 BufferSize, ViChar Channel_Name[]);
		''' 
		''' Purpose
		''' Returns the channel string that is in the channel table at an index you specify.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Index">
		''' 
		''' Index
		''' ViInt32
		''' Specifies a one-based index into the channel table.
		''' 
		''' </param>
		''' <param name="BufferSize">
		''' 
		''' BufferSize
		''' ViInt32
		''' Specifies the size of the buffer for the channel string
		''' 
		''' </param>
		''' <param name="Channel_Name">
		''' 
		''' Channel_Name
		''' ViChar[]
		''' Returns a channel string from the channel table at the index you specify in the Index parameter.
		''' Do not modify the contents of the channel string.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function GetChannelName(Index As Integer, BufferSize As Integer, Channel_Name As System.Text.StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetChannelName(Me._handle, Index, BufferSize, Channel_Name)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_Disable
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_Disable&#160;(ViSession vi);
		''' 
		''' Purpose
		''' Places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected.
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5672/5673/5673E
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function Disable() As Integer
			Dim pInvokeResult As Integer = PInvoke.Disable(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_self_test
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_self_test&#160;(ViSession&#160;vi, ViInt16*&#160;selfTestResult, ViChar[]&#160;selfTestMessage);
		''' Purpose
		''' Performs a self-test on the NI-RFSG device and returns the test results.  This function performs a simple series of tests to ensure that the NI-RFSG device is powered up and responding.  
		''' 
		''' 
		''' 
		''' This function does not affect external I/O connections or connections between devices.  Complete functional testing and calibration are not performed by this function. The NI-RFSG device must be in the Configuration state before you call this function.
		''' 
		''' Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' 
		''' </summary>
		''' <param name="Self_Test_Result">
		''' 
		''' selfTestResult
		''' ViInt16*
		''' This parameter contains the value returned from the NI-RFSG device self test.
		''' 
		''' 
		''' 
		''' Self-Test Code Description
		''' 0Self test passed
		''' 1Self test failed
		'''    
		'''    
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Self_Test_Message">
		''' 
		''' selfTestMessage
		''' ViChar[]
		''' Returns the self-test response string from the NI-RFSG device. For an explanation of the string contents, refer to the status parameter of this function.
		''' 
		''' You must pass a ViChar array with at least 256 bytes.
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function self_test(ByRef Self_Test_Result As Short, Self_Test_Message As System.Text.StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.self_test(Me._handle, Self_Test_Result, Self_Test_Message)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_error_query
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_error_query&#160;(ViSession&#160;vi, ViInt32&#160;*Error_Code, ViChar&#160;Error_Message[]);
		''' Purpose
		''' Reads an error code and an error message from the instrument error queue.
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' </summary>
		''' <param name="Error_Code">
		''' 
		''' Error_Code
		''' ViInt32*
		''' Returns the error code read from the instrument error queue.
		''' 
		''' </param>
		''' <param name="Error_Message">
		''' 
		''' Error_Message
		''' ViChar[]
		''' Returns the error message string read from the instrument error message queue.
		''' You must pass a ViChar array with at least 256 bytes.
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function error_query(ByRef Error_Code As Integer, Error_Message As System.Text.StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.error_query(Me._handle, Error_Code, Error_Message)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_revision_query
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_revision_query&#160;(ViSession&#160;vi, ViChar[]&#160;instrumentDriverRevision, ViChar[]&#160;firmwareRevision);
		''' Purpose
		''' Returns the revision numbers of the NI-RFSG driver and the instrument firmware.
		''' 
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Instrument_Driver_Revision">
		''' 
		''' instrumentDriverRevision
		''' ViChar[]
		''' Returns the value of the NIRFSG_ATTR_SPECIFIC_DRIVER_REVISION attribute in the form of a string.
		''' 
		''' You must pass a ViChar array with at least 256 bytes.
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Firmware_Revision">
		''' 
		''' firmwareRevision
		''' ViChar[]
		''' Returns the value of the NIRFSG_ATTR_INSTRUMENT_FIRMWARE_REVISION attribute in the form of a string.
		''' 
		''' You must pass a ViChar array with at least 256 bytes.
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function revision_query(Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
			Dim pInvokeResult As Integer = PInvoke.revision_query(Me._handle, Instrument_Driver_Revision, Firmware_Revision)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_QueryArbWaveformCapabilities
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_QueryArbWaveformCapabilities&#160;(ViSession&#160;vi, ViInt32*&#160;maxNumberWaveforms, ViInt32*&#160;waveformQuantum, ViInt32*&#160;minWaveformSize, ViInt32*&#160;maxWaveformSize);
		''' Purpose
		''' Queries and returns the waveform capabilities of the NI-RFSG device.  These capabilities are related to the current device configuration. The NI-RFSG device must be in the Configuration  or the Generation state before calling this function.
		''' 
		''' Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
		''' 
		''' 
		''' </summary>
		''' <param name="Max_Number_Waveforms">
		''' 
		''' maxNumberWaveforms
		''' ViInt32*
		''' Returns the value of the NIRFSG_ATTR_ARB_MAX_NUMBER_WAVEFORMS attribute. This value is the maximum number of waveforms you can write.
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Waveform_Quantum">
		''' 
		''' waveformQuantum
		''' ViInt32*
		''' Returns the value of the NIRFSG_ATTR_ARB_WAVEFORM_QUANTUM attribute. If the waveform quantum is q, then the size of the waveform that you write should be a multiple of q. The units are expressed in samples.
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Min_Waveform_Size">
		''' 
		''' minWaveformSize
		''' ViInt32*
		''' Returns the value of the NIRFSG_ATTR_ARB_WAVEFORM_SIZE_MIN attribute. The number of samples of the waveform that you write must be greater than or equal to this value.
		''' 
		''' 
		''' 
		''' </param>
		''' <param name="Max_Waveform_Size">
		''' 
		''' maxWaveformSize
		''' ViInt32*
		''' Returns the value of the NIRFSG_ATTR_ARB_WAVEFORM_SIZE_MAX attribute. The number of samples of the waveform that you write must be less than or equal to this value.
		''' 
		''' 
		''' 
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function QueryArbWaveformCapabilities(ByRef Max_Number_Waveforms As Integer, ByRef Waveform_Quantum As Integer, ByRef Min_Waveform_Size As Integer, ByRef Max_Waveform_Size As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.QueryArbWaveformCapabilities(Me._handle, Max_Number_Waveforms, Waveform_Quantum, Min_Waveform_Size, Max_Waveform_Size)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' niRFSG_SelfCal
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_SelfCal&#160;(ViSession&#160;vi);
		''' Purpose
		''' Performs an internal self-calibration on the device. If the calibration is successful, new calibration data and constants are stored in the onboard nonvolatile memory of the module.
		''' 
		''' Supported Devices&#58; NI PXI-5610/5670/5671, NI PXIe-5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function SelfCal() As Integer
			Dim pInvokeResult As Integer = PInvoke.SelfCal(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Self-calibrates all configurations within the specified frequency and peak power level limits.
		''' If there is an open session for NI-RFSA for your device, it may remain open but cannot be used while this function runs.
		''' It is recommended that no external signals are present on the RF In port while the calibration is taking place.
		''' For best results, NI recommends that you perform a self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
		''' Supported Devices&#58; NI 5644R/5645R/5646R
		''' 
		''' </summary>
		'''<param name = "stepsToOmit">
		''' Specifies which calibration steps to skip during the self-calibration process. The default value is an empty array, which indicates that no calibration steps are omitted.
		''' Defined Values:
		''' NIRFSG_VAL_SELF_CAL_OMIT_NONENo calibration steps are omitted.
		''' NIRFSG_VAL_SELF_CAL_LO_SELF_CALOmits the LO Self Cal step. If you omit this step, the power level of the LO is not adjusted.
		''' NIRFSG_VAL_SELF_CAL_POWER_LEVEL_ACCURACYOmits the Power Level Accuracy step. If you omit this step, the power level accuracy of the device is not adjusted.
		''' NIRFSG_VAL_SELF_CAL_RESIDUAL_LO_POWEROmits the Residual LO Power step. If you omit this step, the Residual LO Power performance is not adjusted.
		''' NIRFSG_VAL_SELF_CAL_IMAGE_SUPPRESSIONOmits the Image Suppression step. If you omit this step, the Residual Sideband Image performance is not adjusted.
		''' Default Value: NIRFSG_VAL_SELF_CAL_OMIT_NONE
		''' 
		'''</param>
		'''<param name = "minFrequency">
		''' Specifies the minimum frequency to calibrate.
		''' 
		'''</param>
		'''<param name = "maxFrequency">
		''' Specifies the maximum frequency to calibrate.
		''' 
		'''</param>
		'''<param name = "minPowerLevel">
		''' Specifies the minimum power level to calibrate.
		''' 
		'''</param>
		'''<param name = "maxPowerLevel">
		''' Specifies the maximum power level to calibrate.
		''' 
		'''</param>
		'''<returns>
		''' 
		'''niRFSG_SelfCalibrateRange
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_SelfCalibrateRange&#160;(ViSession&#160;vi,&#160;ViInt64&#160;stepsToOmit,&#160;ViReal64&#160;minFrequency,&#160;ViReal64&#160;maxFrequency,&#160;ViReal64&#160;minPowerLevel,&#160;ViReal64&#160;maxPowerLevel);
		''' Purpose
		''' Self-calibrates all configurations within the specified frequency and peak power level limits.
		''' If there is an open session for NI-RFSA for your device, it may remain open but cannot be used while this function runs.
		''' It is recommended that no external signals are present on the RF In port while the calibration is taking place.
		''' For best results, NI recommends that you perform a self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
		''' Supported Devices&#58; NI 5644R/5645R/5646R
		''' 
		'''</returns>
		Public Function SelfCalibrateRange(stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minPowerLevel As Double, maxPowerLevel As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.SelfCalibrateRange(Me._handle, stepsToOmit, minFrequency, maxFrequency, minPowerLevel, maxPowerLevel)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' 
		''' 
		''' niRFSG_GetExternalCalibrationLastDateAndTime
		''' 
		''' ViStatus niRFSG_GetExternalCalibrationLastDateAndTime&#160;(ViSession&#160;vi, ViInt32*&#160;year, ViInt32*&#160;month, ViInt32*&#160;day, ViInt32*&#160;hour, ViInt32*&#160;minute, ViInt32*&#160;second);
		''' 
		''' Purpose
		''' 
		''' Returns the date and time of the last successful external calibration. The time returned is 24-hour local time. For example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter. 
		''' 
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Module">
		''' 
		''' </param>
		''' <param name="Year">
		''' 
		''' 
		''' year
		''' ViInt32*
		''' Specifies the year of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Month">
		''' 
		''' 
		''' month
		''' ViInt32*
		''' Specifies the month of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Day">
		''' 
		''' 
		''' day
		''' ViInt32*
		''' Specifies the day of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Hour">
		''' 
		''' 
		''' hour
		''' ViInt32*
		''' Specifies the hour of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Minute">
		''' 
		''' 
		''' minute
		''' ViInt32*
		''' Specifies the minute of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Second">
		''' 
		''' 
		''' second
		''' ViInt32*
		''' Specifies the second of the last successful calibration.
		'''  
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function GetSelfCalibrationDateAndTime([Module] As Integer, ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, ByRef Minute As Integer, _
			ByRef Second As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetSelfCalibrationDateAndTime(Me._handle, [Module], Year, Month, Day, Hour, _
				Minute, Second)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' 
		''' 
		''' niRFSG_GetExternalCalibrationLastDateAndTime
		''' 
		''' ViStatus niRFSG_GetExternalCalibrationLastDateAndTime&#160;(ViSession&#160;vi, ViInt32*&#160;year, ViInt32*&#160;month, ViInt32*&#160;day, ViInt32*&#160;hour, ViInt32*&#160;minute, ViInt32*&#160;second);
		''' 
		''' Purpose
		''' 
		''' Returns the date and time of the last successful external calibration. The time returned is 24-hour (military) local time; for example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter. 
		''' 
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' 
		''' </summary>
		''' <param name="Year">
		''' 
		''' 
		''' year
		''' ViInt32*
		''' Specifies the year of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Month">
		''' 
		''' 
		''' month
		''' ViInt32*
		''' Specifies the month of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Day">
		''' 
		''' 
		''' day
		''' ViInt32*
		''' Specifies the day of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Hour">
		''' 
		''' 
		''' hour
		''' ViInt32*
		''' Specifies the hour of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Minute">
		''' 
		''' 
		''' minute
		''' ViInt32*
		''' Specifies the minute of the last successful calibration.
		'''  
		''' </param>
		''' <param name="Second">
		''' 
		''' 
		''' second
		''' ViInt32*
		''' Specifies the second of the last successful calibration.
		'''  
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function GetExternalCalibrationLastDateAndTime(ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, ByRef Minute As Integer, ByRef Second As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.GetExternalCalibrationLastDateAndTime(Me._handle, Year, Month, Day, Hour, Minute, _
				Second)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' 
		''' 
		''' niRFSG_ChangeExternalCalibrationPassword
		''' 
		''' ViStatus niRFSG_ChangeExternalCalibrationPassword&#160;(ViSession&#160;vi, ViConstString&#160;Password, ViConstString&#160;newPassword);
		''' 
		''' Purpose
		''' 
		''' Changes the external calibration password of the device.
		''' 
		''' Supported Devices: NI PXIe-5611/5653/5673/5673E
		''' 
		''' 
		''' 
		''' </summary>
		''' <param name="Old_Password">
		''' 
		''' 
		''' Password
		''' ViConstString
		''' Specifies the old (current) external calibration password.  This password is case sensitive.
		'''  
		''' </param>
		''' <param name="New_Password">
		''' 
		''' 
		''' newPassword
		''' ViConstString
		''' Specifies the new (desired) external calibration password.
		'''  
		''' </param>
		''' <returns>
		''' 
		''' status
		''' ViStatus
		''' Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
		''' 
		''' To obtain a text description of the error code, call the niRFSG_GetError function.
		'''           
		''' The general meaning of the status code is as follows:
		''' ValueMeaning
		''' 0Success
		''' Positive ValuesWarnings
		''' Negative ValuesErrors
		''' 
		''' </returns>
		Public Function ChangeExternalCalibrationPassword(Old_Password As String, New_Password As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.ChangeExternalCalibrationPassword(Me._handle, Old_Password, New_Password)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' Aborts any signal generation in progress and destroys the instrument driver session.
		''' Note&#160;&#160;After calling this function, you cannot use NI-RFSG again until you call the niRFSG_init function or the  niRFSG_InitWithOptions function.
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		''' </summary>
		'''
		'''<returns>
		''' 
		'''niRFSG_close
		''' C Function Prototype
		''' ViStatus&#160;niRFSG_close&#160;(ViSession&#160;vi);
		''' Purpose
		''' Aborts any signal generation in progress and destroys the instrument driver session.
		''' Note&#160;&#160;After calling this function, you cannot use NI-RFSG again until you call the niRFSG_init function or the  niRFSG_InitWithOptions function.
		''' Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
		''' 
		'''</returns>
		Public Function close() As Integer
			Return PInvoke.TestForError(Me._handle, Me.Dispose(True))
		End Function

		Public Sub Dispose() Implements IDisposable.Dispose
			Me.Dispose(True)
			System.GC.SuppressFinalize(Me)
		End Sub

		Private Function Dispose(disposing As Boolean) As Integer
			Dim pInvokeResult As Integer = 0
			If (Me._disposed = False) Then
				' Returns any error RFSG returns, but does not throw exception
				pInvokeResult = PInvoke.close(Me._handle)
				Me._handle = New System.Runtime.InteropServices.HandleRef(Nothing, System.IntPtr.Zero)
			End If
			Me._disposed = True
			Return pInvokeResult
		End Function

		#Region "VstSelfCalibration and VstSelfCalibrateErrorMethods"
		''' <summary>
		''' 
		''' </summary>
		Public Shared Function VstSelfCalibrate(resouceName As String) As Integer
			Dim pInvokeResult As Integer = PInvoke.VstSelfCalibrate(resouceName)
			niRFSG.TestForVstSelfCalibrateError(pInvokeResult)
			Return pInvokeResult
		End Function

		Private Shared Function TestForVstSelfCalibrateError(status As Integer) As Integer
			If (status < 0) Then
				niRFSG.GetVstSelfCalibrateException(status)
			End If
			Return status
		End Function

		Private Shared Function GetVstSelfCalibrateException(code As Integer) As Integer
			Dim size As Integer = PInvoke.VstSelfCalibrateErrorMessage(code, 0, Nothing)
			Dim msg As New System.Text.StringBuilder()
			If (size >= 0) Then
				msg.Capacity = size
				PInvoke.VstSelfCalibrateErrorMessage(code, size, msg)
			End If
			Throw New System.Runtime.InteropServices.ExternalException(msg.ToString(), code)
		End Function

		#End Region

		#Region "18.1"

		''' <summary>
		''' 
		''' </summary>
		Public Function AlignLODaisyChain5840(useExternalLO As Boolean, externalLO As String, resourceName As String, portTypes As Integer(), startFrequency As Double, stopFrequency As Double) As Integer
			Dim pInvokeResult As Integer = PInvoke.AlignLODaisyChain5840(useExternalLO, externalLO, resourceName, portTypes.Length, portTypes, startFrequency, _
				stopFrequency)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		''' <summary>
		''' 
		''' </summary>
		Public Function ClearSelfCalibrationRange() As Integer
			Dim pInvokeResult As Integer = PInvoke.ClearSelfCalibrationRange(Me._handle)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		#End Region

        #Region "18.2"

        ''' <summary>
        ''' Creates an S-parameter de-embedding table based on the specified S2P file.
        ''' </summary>
        ''' <param name="port"> Specifies the port to be used.</param>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique. If you use the same name as an existing table, the table is replaced.</param>
        ''' <param name="s2pFilePath"> Specifies the path to the S2P file that contains de-embedding information.</param>
        ''' <param name="sParameterOrientation"> Specifies the orientation of the data in the S2P file.</param>
        ''' <remarks>
        ''' If you only create one table, NI-RFSG automatically selects that table to de-embed the measurement.
        ''' </remarks>
        Public Function CreateDeembeddingSParameterTableS2pFile(port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.CreateDeembeddingSParameterTableS2pFile(Me._handle, port, tableName, s2pFilePath, sParameterOrientation)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Creates an S-parameter de-embedding table from the input data.
        ''' </summary>
        ''' <param name="port"> Specifies the port to be used.</param>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique. If you use the same name as an existing table, the table is replaced.</param>
        ''' <param name="frequencies"> Specifies the frequencies for the S-parameter table rows. Frequencies must be unique and in ascending order.</param>
        ''' <param name="sParameterTable"> Specifies the S-parameters for each frequency. S-parameters for each frequency are placed in the array in the following order, s11, s12, s21, s22.</param>
        ''' <param name="sParameterOrientation"> Specifies the orientation of the data in the S2P file.</param>
        ''' <remarks>
        ''' If you only create one table, NI-RFSG automatically selects that table to de-embed the measurement.
        ''' </remarks>
        Public Function CreateDeembeddingSParameterTableArray(port As String, tableName As String, frequencies As Double(), sParameterTable As niComplexNumber(,,), sParameterOrientation As Integer) As Integer
            Dim numberOfPorts As Integer = 0
            Dim numberOfRows As Integer = sParameterTable.GetLength(1)
            Dim numberOfCols As Integer = sParameterTable.GetLength(2)
            If numberOfRows = numberOfCols Then
                numberOfPorts = numberOfRows
            End If
            Dim pInvokeResult As Integer = PInvoke.CreateDeembeddingSParameterTableArray(Me._handle, port, tableName, frequencies, frequencies.Length, sParameterTable, _
                sParameterTable.Length, numberOfPorts, sParameterOrientation)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Deletes the selected de-embedding table.
        ''' </summary>
        ''' <param name="port"> Specifies the port to be used.</param>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique.</param>
        Public Function DeleteDeembeddingTable(port As String, tableName As String) As Integer
            Dim pInvokeResult As Integer = PInvoke.DeleteDeembeddingTable(Me._handle, port, tableName)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Deletes all configured de-embedding tables for the session.
        ''' </summary>
        Public Function DeleteAllDeembeddingTables() As Integer
            Dim pInvokeResult As Integer = PInvoke.DeleteAllDeembeddingTables(Me._handle)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Selects the nearest interpolation method.
        ''' </summary>
        ''' <param name="port"> Specifies the port to be used.</param>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique.</param>
        ''' <remarks>
        ''' NI-RFSG uses the parameters of the table nearest to the carrier frequency for de-embedding.
        ''' </remarks>
        Public Function ConfigureDeembeddingTableInterpolationNearest(port As String, tableName As String) As Integer
            Dim pInvokeResult As Integer = PInvoke.ConfigureDeembeddingTableInterpolationNearest(Me._handle, port, tableName)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Selects the linear interpolation method.
        ''' </summary>
        ''' <param name="port"> Specifies the port to be used.</param>
        ''' <param name="tableName"> Specifies the name of the table. The name of the table must be unique.</param>
        ''' <param name="format"> Specifies the format of parameters to interpolate.</param>
        ''' <remarks>
        ''' If the carrier frequency does not match a row in the de-embedding table, NI-RFSG performs a linear interpolation based on the entries in the de-embedding table to determine the parameters to use for de-embedding.
        ''' </remarks>
        Public Function ConfigureDeembeddingTableInterpolationLinear(port As String, tableName As String, format As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.ConfigureDeembeddingTableInterpolationLinear(Me._handle, port, tableName, format)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Selects the spline interpolation method.
        ''' </summary>
        ''' <param name="port"> Specifies the port to be used.</param>
        ''' <param name="tableName"> Specifies the name of the table.</param>
        ''' <remarks>
        ''' If the carrier frequency does not match a row in the de-embedding table, NI-RFSG performs a spline interpolation based on the entries in the de-embedding table to determine the parameters to use for de-embedding.
        ''' </remarks>
        Public Function ConfigureDeembeddingTableInterpolationSpline(port As String, tableName As String) As Integer
            Dim pInvokeResult As Integer = PInvoke.ConfigureDeembeddingTableInterpolationSpline(Me._handle, port, tableName)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Returns the S-parameters used for de-embedding a measurement. This includes interpolation of the parameters based on the configured carrier frequency.
        ''' </summary>
        ''' <param name="sParameters"> Returns an array of S-parameters. The S-parameters are returned in the following order, s11, s12, s21, s22. </param>
        ''' <remarks>
        ''' This method returns an empty array if no de-embedding is done.
        ''' </remarks>
        Public Function GetDeembeddingSParameters(ByRef sParameters As niComplexNumber(,)) As Integer
            Dim internalSParameters As niComplexNumber() = Nothing
            Dim sParametersSize As Integer = 0

            Dim numberOfSParametersReturned As Integer = 0
            Dim numberOfPorts As Integer = 0

            Dim rows As Integer = 0
            Dim cols As Integer = 0
            Dim count As Integer = 0
            Dim pInvokeResult As Integer = 0

            pInvokeResult = PInvoke.TestForError(Me._handle, PInvoke.GetDeembeddingSParameters(Me._handle, internalSParameters, sParametersSize, numberOfSParametersReturned, numberOfPorts))

            If (sParameters Is Nothing) OrElse (sParameters.Length <> numberOfSParametersReturned) Then
                internalSParameters = New niComplexNumber(numberOfSParametersReturned - 1) {}
                pInvokeResult = PInvoke.GetDeembeddingSParameters(Handle, internalSParameters, numberOfSParametersReturned, sParametersSize, numberOfPorts)
                rows = numberOfPorts
                cols = numberOfPorts
                sParameters = New niComplexNumber(rows - 1, cols - 1) {}
                For i As Integer = 0 To rows - 1
                    Dim j As Integer = 0
                    While j < cols
                        sParameters(i, j) = internalSParameters(count)
                        j += 1
                        count += 1
                    End While
                Next
            End If
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

		#End Region

		#Region "19.1"


		''' <summary>
		''' Resets all properties to default values and specifies steps to omit during the reset process, such as signal routes.
		''' </summary>
		''' <param name="stepsToOmit">Specifies a list of steps to skip during the reset process.</param>
		''' <remarks>
		''' 
		''' </remarks>
		Public Function ResetWithOptions(stepsToOmit As Integer) As Integer
			Dim pInvokeResult As Integer = PInvoke.ResetWithOptions(Me._handle, stepsToOmit)
			PInvoke.TestForError(Me._handle, pInvokeResult)
			Return pInvokeResult
		End Function

		#End Region

		''' <summary>
		'''Specifies the name of the list to be active.  When you get or set    an attribute and it is in the configuration list configuration,    the attribute is set to or read from the active list step of the    active configuration list.   If the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set    to &quot;&quot; (empty string), no list is active. 
		''' 
		''' </summary>
		Public Function SetActiveConfigurationList(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ActiveConfigurationList, channel, value)
		End Function

		''' <summary>
		'''Specifies the name of the list to be active.  When you get or set    an attribute and it is in the configuration list configuration,    the attribute is set to or read from the active list step of the    active configuration list.   If the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set    to &quot;&quot; (empty string), no list is active. 
		''' 
		''' </summary>
		Public Function GetActiveConfigurationList(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ActiveConfigurationList, channel, value)
		End Function

		''' <summary>
		'''Specifies the step in the configuration list for RF list mode    that you want to make active for configuration or initiation. 
		''' 
		''' </summary>
		Public Function SetActiveConfigurationListStep(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.ActiveConfigurationListStep, channel, value)
		End Function

		''' <summary>
		'''Specifies the step in the configuration list for RF list mode    that you want to make active for configuration or initiation. 
		''' 
		''' </summary>
		Public Function GetActiveConfigurationListStep(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ActiveConfigurationListStep, channel, value)
		End Function

		''' <summary>
		'''Allows you to set the frequency and power values beyond the limits of the   NI-RFSG device specifications.  This allows a wider frequency and power   range, but accuracy cannot be guaranteed, and results may vary by unit. To   set this attribute, the NI-RFSG device must be in the Configuration state.   
		''' 
		''' </summary>
		Public Function SetAllowOutOfSpecificationUserSettings(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.AllowOutOfSpecificationUserSettings, channel, value)
		End Function

		''' <summary>
		'''Allows you to set the frequency and power values beyond the limits of the   NI-RFSG device specifications.  This allows a wider frequency and power   range, but accuracy cannot be guaranteed, and results may vary by unit. To   set this attribute, the NI-RFSG device must be in the Configuration state.   
		''' 
		''' </summary>
		Public Function GetAllowOutOfSpecificationUserSettings(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.AllowOutOfSpecificationUserSettings, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency deviation to use in frequency modulation. 
		''' 
		''' </summary>
		Public Function SetAnalogModulationFmDeviation(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.AnalogModulationFmDeviation, channel, value)
		End Function

		''' <summary>
		'''>Specifies the frequency deviation to use in frequency modulation. 
		''' 
		''' </summary>
		Public Function GetAnalogModulationFmDeviation(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.AnalogModulationFmDeviation, channel, value)
		End Function

		''' <summary>
		'''Specifies the deviation to use in phase modulation. 
		''' 
		''' </summary>
		Public Function SetAnalogModulationPmDeviation(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.AnalogModulationPmDeviation, channel, value)
		End Function

		''' <summary>
		'''Specifies the deviation to use in phase modulation. 
		''' 
		''' </summary>
		Public Function GetAnalogModulationPmDeviation(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.AnalogModulationPmDeviation, channel, value)
		End Function

		''' <summary>
		'''Specifies the analog modulation format to use. 
		''' 
		''' </summary>
		Public Function SetAnalogModulationType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.AnalogModulationType, channel, value)
		End Function
		''' <summary>
		'''Specifies the analog modulation format to use. 
		''' 
		''' </summary>
		Public Function GetAnalogModulationType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.AnalogModulationType, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency of the waveform to use as the message signal in   analog modulation. Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function SetAnalogModulationWaveformFrequency(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.AnalogModulationWaveformFrequency, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency of the waveform to use as the message signal in   analog modulation. Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function GetAnalogModulationWaveformFrequency(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.AnalogModulationWaveformFrequency, channel, value)
		End Function

		''' <summary>
		'''Specifies the type of waveform to use as the message signal for analog   modulation. 
		''' 
		''' </summary>
		Public Function SetAnalogModulationWaveformType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.AnalogModulationWaveformType, channel, value)
		End Function

		''' <summary>
		'''Specifies the type of waveform to use as the message signal for analog   modulation. 
		''' 
		''' </summary>
		Public Function GetAnalogModulationWaveformType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.AnalogModulationWaveformType, channel, value)
		End Function

		''' <summary>
		'''Indicates the carrier frequency generated by the arbitrary waveform   generator (AWG) module. The specified carrier frequency is related  
		''' 
		''' </summary>
		Public Function SetArbCarrierFrequency(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.ArbCarrierFrequency, channel, value)
		End Function

		''' <summary>
		'''Indicates the carrier frequency generated by the arbitrary waveform   generator (AWG) module. The specified carrier frequency is related  
		''' 
		''' </summary>
		Public Function GetArbCarrierFrequency(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbCarrierFrequency, channel, value)
		End Function

		''' <summary>
		'''Alpha value to use when calculating the pulse-shaping filter coefficients.   This attribute is only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device   that does not support OSP. 
		''' 
		''' </summary>
		Public Function SetArbFilterRaisedCosineAlpha(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.ArbFilterRaisedCosineAlpha, channel, value)
		End Function

		''' <summary>
		'''Alpha value to use when calculating the pulse-shaping filter coefficients.   This attribute is only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device   that does not support OSP. 
		''' 
		''' </summary>
		Public Function GetArbFilterRaisedCosineAlpha(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbFilterRaisedCosineAlpha, channel, value)
		End Function

		''' <summary>
		'''Alpha value to use when calculating the pulse-shaping FIR filter coefficients.   This attribute can only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_ROOT_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this property with a device   that does not support OSP. 
		''' 
		''' </summary>
		Public Function SetArbFilterRootRaisedCosineAlpha(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.ArbFilterRootRaisedCosineAlpha, channel, value)
		End Function

		''' <summary>
		'''Alpha value to use when calculating the pulse-shaping FIR filter coefficients.   This attribute can only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_ROOT_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this property with a device   that does not support OSP. 
		''' 
		''' </summary>
		Public Function GetArbFilterRootRaisedCosineAlpha(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbFilterRootRaisedCosineAlpha, channel, value)
		End Function

		''' <summary>
		'''Pulse-shaping filter type for the FIR filter. This attribute can be used   only with signal generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device that   does not support OSP. 
		''' 
		''' </summary>
		Public Function SetArbFilterType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.ArbFilterType, channel, value)
		End Function

		''' <summary>
		'''Pulse-shaping filter type for the FIR filter. This attribute can be used   only with signal generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device that   does not support OSP. 
		''' 
		''' </summary>
		Public Function GetArbFilterType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbFilterType, channel, value)
		End Function

		''' <summary>
		'''Returns the maximum number of waveforms the device can hold in memory. 
		''' 
		''' </summary>
		Public Function GetArbMaxNumberWaveforms(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbMaxNumberWaveforms, channel, value)
		End Function

		''' <summary>
		'''Specifies the Sample clock mode on the NI 5421/5441/5442/5450 AWG module.   To set this attribute, the device must be in the Configuration state. 
		'''   NOTE: Using the high resolution clock may result in increased phase noise. /n 
		''' 
		''' </summary>
		Public Function SetArbOnboardSampleClockMode(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.ArbOnboardSampleClockMode, channel, value)
		End Function

		''' <summary>
		'''Specifies the Sample clock mode on the NI 5421/5441/5442/5450 AWG module.   To set this attribute, the device must be in the Configuration state. 
		'''   NOTE: Using the high resolution clock may result in increased phase noise. /n 
		''' 
		''' </summary>
		Public Function GetArbOnboardSampleClockMode(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbOnboardSampleClockMode, channel, value)
		End Function

		''' <summary>
		'''Specifies the oscillator phase digital-to-analog converter (DAC) value    on the arbitrary waveform generator (AWG).  Use this attribute to reduce    the trigger jitter when synchronizing multiple devices with NI-TClk.    This attribute can also help maintain synchronization repeatability    by writing a previous measurement's phase DAC value to the current session.    This attribute is applicable only when using the    NIRFSG_ATTR_ARB_SAMPLE_CLOCK_SOURCE attribute set to NIRFSG_VAL_CLK_IN_STR. /n   
		''' 
		''' </summary>
		Public Function SetArbOscillatorPhaseDacValue(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.ArbOscillatorPhaseDacValue, channel, value)
		End Function

		''' <summary>
		'''Specifies the oscillator phase digital-to-analog converter (DAC) value    on the arbitrary waveform generator (AWG).  Use this attribute to reduce    the trigger jitter when synchronizing multiple devices with NI-TClk.    This attribute can also help maintain synchronization repeatability    by writing a previous measurement's phase DAC value to the current session.    This attribute is applicable only when using the    NIRFSG_ATTR_ARB_SAMPLE_CLOCK_SOURCE attribute set to NIRFSG_VAL_CLK_IN_STR. /n   
		''' 
		''' </summary>
		Public Function GetArbOscillatorPhaseDacValue(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbOscillatorPhaseDacValue, channel, value)
		End Function

		''' <summary>
		'''Indicates the average output power from the NI 5421/5441/5442/5450   AWG module. If an arbitrary waveform is being generated, this   attribute specifies either the average power or the peak power of the   signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute setting. 
		'''    Units: dBm 
		''' 
		''' </summary>
		Public Function GetArbPower(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbPower, channel, value)
		End Function

		''' <summary>
		'''Specifies the AWG prefilter gain. The prefilter gain is   applied to the waveform data before any other signal processing.   Reduce this value to prevent overflow in the AWG interpolation filters.   Other gains on the NI-RFSG device are automatically adjusted to   compensate for nonunity AWG prefilter gain. The NI PXI-5671 and   the NI PXIe-5672 must be in the Configuration state to use this attribute.   However, the NI PXIe-5673/5673E can be in either the Configuration   or the Generation state to use this attribute. 
		'''   On the NI PXI-5671, this attribute applies only when the   NIRFSG_ATTR_IQ_RATE attribute is set to a value   less than or equal to 8.33 MS/s. 
		'''   Units: dB 
		''' 
		''' </summary>
		Public Function SetArbPreFilterGain(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.ArbPreFilterGain, channel, value)
		End Function

		''' <summary>
		'''Specifies the AWG prefilter gain. The prefilter gain is   applied to the waveform data before any other signal processing.   Reduce this value to prevent overflow in the AWG interpolation filters.   Other gains on the NI-RFSG device are automatically adjusted to   compensate for nonunity AWG prefilter gain. The NI PXI-5671 and   the NI PXIe-5672 must be in the Configuration state to use this attribute.   However, the NI PXIe-5673/5673E can be in either the Configuration   or the Generation state to use this attribute. 
		'''   On the NI PXI-5671, this attribute applies only when the   NIRFSG_ATTR_IQ_RATE attribute is set to a value   less than or equal to 8.33 MS/s. 
		'''   Units: dB 
		''' 
		''' </summary>
		Public Function GetArbPreFilterGain(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbPreFilterGain, channel, value)
		End Function

		''' <summary>
		'''Returns the rate of the Sample clock on the AWG module. 
		'''   Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function GetArbSampleClockRate(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbSampleClockRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the Sample clock source for the NI 5421/5441/5442/5450/5451   AWG module. To set this attribute, the NI-RFSG device must   be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetArbSampleClockSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ArbSampleClockSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the Sample clock source for the NI 5421/5441/5442/5450/5451   AWG module. To set this attribute, the NI-RFSG device must   be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetArbSampleClockSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ArbSampleClockSource, channel, value)
		End Function

		''' <summary>
		'''Indicates the AWG module temperature in degrees Celsius. 
		'''   Units: degrees Celsius (°C) 
		''' 
		''' </summary>
		Public Function GetArbTemperature(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbTemperature, channel, value)
		End Function

		''' <summary>
		'''Returns the waveform quantum for the device. The number of samples   in a waveform must be an integer multiple of the waveform quantum.   The other restrictions on the length of the waveform are the minimum and    maximum arbitrary waveform sizes. On the NI 5671/5672, the value of this   attribute depends on the I/Q rate. Set the NIRFSG_ATTR_IQ_RATE attribute   before reading this attribute. 
		''' 
		''' </summary>
		Public Function GetArbWaveformQuantum(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbWaveformQuantum, channel, value)
		End Function

        ''' <summary>
		'''Returns the repeat count of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM and the repeat count is finite.
		'''   To set this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetArbWaveformRepeatCount(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbWaveformRepeatCount, channel, value)
		End Function

        ''' <summary>
		'''Returns the repetition mode of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM.
		''' 
		''' </summary>
		Public Function GetAttrArbWaveformRepeatCountIsFinite(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.ArbWaveformRepeatCountIsFinite, channel, value)
		End Function

		''' <summary>
		'''Returns the size of the largest waveform that is allowed. To read   this attribute, the NI-RFSG device must be in the Configuration state.
		'''   For the NI 5671/5672, the value of this attribute depends on the I/Q rate.   Set the I/Q rate before reading this attribute.  For the NI 5673/5673E,   the maximum waveform size is reduced to account for the amount of device   memory currently used. 
		'''   Note: Not all onboard memory can be used for waveform storage. A portion   of onboard memory stores scripts that specify how the waveforms are   generated.  These scripts typically require less than 1 KB of onboard   memory. 
		''' 
		''' </summary>
		Public Function GetArbWaveformSizeMax(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbWaveformSizeMax, channel, value)
		End Function

		''' <summary>
		'''Returns the size of the smallest waveform that is allowed. For the   NI 5671/5672, the value of this attribute depends on the I/Q rate.   Set the NIRFSG_ATTR_IQ_RATE attribute before reading this attribute.
		'''   Units: Samples 
		''' 
		''' </summary>
		Public Function GetArbWaveformSizeMin(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ArbWaveformSizeMin, channel, value)
		End Function

		''' <summary>
		'''Specifies how much to scale the data before writing it with the   niRFSG_WriteArbWaveform function. The resulting waveform must be   smaller than 1.0 in complex magnitude. This attribute is supported only   if the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to   NIRFSG_VAL_PEAK_POWER. 
		''' 
		''' </summary>
		Public Function SetArbWaveformSoftwareScalingFactor(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.ArbWaveformSoftwareScalingFactor, channel, value)
		End Function

		''' <summary>
		'''Specifies how much to scale the data before writing it with the   niRFSG_WriteArbWaveform function. The resulting waveform must be   smaller than 1.0 in complex magnitude. This attribute is supported only   if the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to   NIRFSG_VAL_PEAK_POWER. 
		''' 
		''' </summary>
		Public Function GetArbWaveformSoftwareScalingFactor(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ArbWaveformSoftwareScalingFactor, channel, value)
		End Function

        ''' <summary>
		'''Specifies the repeat count of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM and the repeat count is finite.
		'''   To set this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetArbWaveformRepeatCount(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.ArbWaveformRepeatCount, channel, value)
		End Function

        ''' <summary>
		'''Specifies the repetition mode of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM.
		'''   To set this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetArbWaveformRepeatCountIsFinite(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.ArbWaveformRepeatCountIsFinite, channel, value)
		End Function

		''' <summary>
		'''Specifies whether attenuator hold is enabled. While this attribute is   set to VI_TRUE, changing the power level causes NI-RFSG to scale the   digital data sent to the AWG instead of adjusting the attenuators.   Changing power levels in this manner allows the device to increase or   decrease the power level in more accurate increments, but it may affect   signal-to-noise ratios (noise density).
		'''   Setting this attribute to VI_TRUE limits the power levels that can be   attained. With attenuator hold enabled, the power level must satisfy the   following conditions:
        '''   - Power level &lt;= the maximum power level set with the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute 
        '''   - Power level &gt;= (the maximum power level set with  the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute -70 dB)
        '''   - Power level &gt;= -145 dBm
		'''   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		''' 
		''' </summary>
		Public Function SetAttenuatorHoldEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.AttenuatorHoldEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether attenuator hold is enabled. While this attribute is   set to VI_TRUE, changing the power level causes NI-RFSG to scale the   digital data sent to the AWG instead of adjusting the attenuators.   Changing power levels in this manner allows the device to increase or   decrease the power level in more accurate increments, but it may affect   signal-to-noise ratios (noise density).
		'''   Setting this attribute to VI_TRUE limits the power levels that can be   attained. With attenuator hold enabled, the power level must satisfy the   following conditions:
        '''   - Power level &lt;= the maximum power level set with the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute 
        '''   - Power level &gt;= (the maximum power level set with  the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute -70 dB)
        '''   - Power level &gt;= -145 dBm
		'''   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		''' 
		''' </summary>
		Public Function GetAttenuatorHoldEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.AttenuatorHoldEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum power level of the RF output signal whenthe   NIRFSG_ATTR_ATTENUATOR_HOLD_ENABLED attribute is set to VI_TRUE.
		'''   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function SetAttenuatorHoldMaxPower(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.AttenuatorHoldMaxPower, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum power level of the RF output signal whenthe   NIRFSG_ATTR_ATTENUATOR_HOLD_ENABLED attribute is set to VI_TRUE.
		'''   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function GetAttenuatorHoldMaxPower(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.AttenuatorHoldMaxPower, channel, value)
		End Function

		''' <summary>
		'''Enables or disables automatic thermal correction. When enabled, settings   changes cause NI-RFSG to check whether the device temperature has changed   and adjustd the settings as needed.When disabled, you must explicitly call   the niRFSG_PerformThermalCorrection function to adjust the device for   temperature changes. 
		''' 
		''' </summary>
		Public Function GetAutomaticThermalCorrection(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.AutomaticThermalCorrection, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to cache the value of attributes. When caching is   enabled, NI-RFSG tracks the current NI-RFSG device settings and avoids   sending redundant commands to the device. 
		'''   NI-RFSG can always cache or never cache particular attributes, regardless   of the setting of this attribute.
		''' 
		''' </summary>
		Public Function SetCache(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.Cache, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to cache the value of attributes. When caching is   enabled, NI-RFSG tracks the current NI-RFSG device settings and avoids   sending redundant commands to the device. 
		'''   NI-RFSG can always cache or never cache particular attributes, regardless   of the setting of this attribute.
		''' 
		''' </summary>
		Public Function GetCache(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.Cache, channel, value)
		End Function

		'''<summary>
		'''
		''' </summary>
		Public Function GetCompensateForFilterGroupDelay(channel As String, ByRef value As [Boolean]) As Integer
			Return GetBoolean(niRFSGProperties.CompensateForFilterGroupDelay, channel, value)
		End Function
		'''<summary>
		'''
		''' </summary>
		Public Function SetCompensateForFilterGroupDelay(channel As String, value As [Boolean]) As Integer
			Return SetBoolean(niRFSGProperties.CompensateForFilterGroupDelay, channel, value)
		End Function

		''' <summary>
		'''Specifies the Configuration List step that is currently programmed to the hardware.    This attribute can be read only when a Configuration List is running. 
		''' 
		''' </summary>
		Public Function GetConfigurationListStepInProgress(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.ConfigurationListStepInProgress, channel, value)
		End Function

		''' <summary>
		'''Returns the fully-qualified signal name as a string. 
		''' 
		''' </summary>
		Public Function GetConfigurationListStepTriggerTerminalName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ConfigurationListStepTriggerTerminalName, channel, value)
		End Function

		''' <summary>
		'''Specifies the type of trigger to use as the Configuration List Step Trigger.    To set this attribute, the NI-RFSG device must be in the    Configuration state. 
		''' 
		''' </summary>
		Public Function SetConfigurationListStepTriggerType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.ConfigurationListStepTriggerType, channel, value)
		End Function

		''' <summary>
		'''Specifies the type of trigger to use as the Configuration List Step Trigger.    To set this attribute, the NI-RFSG device must be in the    Configuration state. 
		''' 
		''' </summary>
		Public Function GetConfigurationListStepTriggerType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ConfigurationListStepTriggerType, channel, value)
		End Function

		''' <summary>
		'''Indicates the number of samples download to onboard memory at one time. This   attribute is useful when the total data to be transferred to onboard   memory is large. 
		'''   Units: Samples 
		''' 
		''' </summary>
		Public Function SetDataTransferBlockSize(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DataTransferBlockSize, channel, value)
		End Function

		''' <summary>
		'''Indicates the number of samples download to onboard memory at one time. This   attribute is useful when the total data to be transferred to onboard   memory is large. 
		'''   Units: Samples 
		''' 
		''' </summary>
		Public Function GetDataTransferBlockSize(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DataTransferBlockSize, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum amount of bus bandwidth to use for data transfers. 
		''' 
		''' </summary>
		Public Function SetDataTransferMaximumBandwidth(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.DataTransferMaximumBandwidth, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum amount of bus bandwidth to use for data transfers. 
		''' 
		''' </summary>
		Public Function GetDataTransferMaximumBandwidth(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.DataTransferMaximumBandwidth, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum number of concurrent PCI Express read requests the RF signal   
		''' 
		''' </summary>
		Public Function SetDataTransferMaximumInFlightReads(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DataTransferMaximumInFlightReads, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum number of concurrent PCI Express read requests the RF signal   
		''' 
		''' </summary>
		Public Function GetDataTransferMaximumInFlightReads(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DataTransferMaximumInFlightReads, channel, value)
		End Function

		''' <summary>
		'''Specifies the preferred size of the data field in a PCI Express read request packet. 
		''' 
		''' </summary>
		Public Function SetDataTransferPreferredPacketSize(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DataTransferPreferredPacketSize, channel, value)
		End Function

		''' <summary>
		'''Specifies the preferred size of the data field in a PCI Express read request packet. 
		''' 
		''' </summary>
		Public Function GetDataTransferPreferredPacketSize(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DataTransferPreferredPacketSize, channel, value)
		End Function

		''' <summary>
		'''Returns the device temperature. If the NI-RFSG session is controlling   multiple devices, this attribute returns the temperature of the primary   NI RF device.  The NI-RFSG session is opened using the primary RF device name. 
		'''   Serial signals between the sensor and the system control unit could   modulate the signal being generated, thus causing phase spurs. After the device   thoroughly warms up, its temperature varies only slightly (less than 1 degree Celsius)   and slowly, and it is not necessary to constantly poll this temperature sensor.   Refer to the thermal management topic appropriate to your device in the   NI RF Signal Generators Help for more information about device temperature. 
		'''   Units: desgrees Celsius (°C) 
		''' 
		''' </summary>
		Public Function GetDeviceTemperature(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.DeviceTemperature, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the Configuration List Step    trigger.  This attribute is valid only when the    NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute    is set to NIRFSG_VAL_DIGITAL_EDGE. To set this property, the NI-RFSG    device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function SetDigitalEdgeConfigurationListStepTriggerEdge(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalEdgeConfigurationListStepTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the Configuration List Step    trigger.  This attribute is valid only when the    NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute    is set to NIRFSG_VAL_DIGITAL_EDGE. To set this property, the NI-RFSG    device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function GetDigitalEdgeConfigurationListStepTriggerEdge(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalEdgeConfigurationListStepTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Configuration List Step trigger.   This attribute is valid only when the   NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. 
		''' 
		''' </summary>
		Public Function SetDigitalEdgeConfigurationListStepTriggerSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.DigitalEdgeConfigurationListStepTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Configuration List Step trigger.   This attribute is valid only when the   NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. 
		''' 
		''' </summary>
		Public Function GetDigitalEdgeConfigurationListStepTriggerSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.DigitalEdgeConfigurationListStepTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the script trigger. This attribute is used   when NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE is set to NIRFSG_VAL_DIGITAL_EDGE. To   set the NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_EDGE attribute,   the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetDigitalEdgeScriptTriggerEdge(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalEdgeScriptTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the script trigger. This attribute is used   when NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE is set to NIRFSG_VAL_DIGITAL_EDGE. To   set the NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_EDGE attribute,   the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetDigitalEdgeScriptTriggerEdge(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalEdgeScriptTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set this   attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetDigitalEdgeScriptTriggerSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.DigitalEdgeScriptTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set this   attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetDigitalEdgeScriptTriggerSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.DigitalEdgeScriptTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the start trigger. This attribute is used   when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. To set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_EDGE   attribute, the NI-RFSG device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function SetDigitalEdgeStartTriggerEdge(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalEdgeStartTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the active edge for the start trigger. This attribute is used   when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. To set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_EDGE   attribute, the NI-RFSG device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function GetDigitalEdgeStartTriggerEdge(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalEdgeStartTriggerEdge, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the start trigger. This attribute is   used when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set the   NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute, the NI-RFSG device   must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetDigitalEdgeStartTriggerSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.DigitalEdgeStartTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the start trigger. This attribute is   used when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set the   NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute, the NI-RFSG device   must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetDigitalEdgeStartTriggerSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.DigitalEdgeStartTriggerSource, channel, value)
		End Function

		''' <summary>
		'''When this attribute is enabled, NI-RFSG equalizes the waveform   data to correct for variations in the response of the NI-RFSG device.   Enabling digital equalization improves   the modulation error rates (MER) and error vector magnitude (EVM) for   signals with large bandwidths (> 500 kHz). On the NI 5670/5671, this   equalization is performed in the software so that tuning time is   increased. On the NI 5672, this is performed in the hardware so that it   has no performance penalties.
		'''   This attribute only applies when the NIRFSG_ATTR_GENERATION_MODE attribute   is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. To set this   attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetDigitalEqualizationEnabled(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalEqualizationEnabled, channel, value)
		End Function

		''' <summary>
		'''When this attribute is enabled, NI-RFSG equalizes the waveform   data to correct for variations in the response of the NI-RFSG device.   Enabling digital equalization improves   the modulation error rates (MER) and error vector magnitude (EVM) for   signals with large bandwidths (> 500 kHz). On the NI 5670/5671, this   equalization is performed in the software so that tuning time is   increased. On the NI 5672, this is performed in the hardware so that it   has no performance penalties.
		'''   This attribute only applies when the NIRFSG_ATTR_GENERATION_MODE attribute   is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. To set this   attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetDigitalEqualizationEnabled(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalEqualizationEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies the active level for the Script trigger. This attribute is used   when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. 
		''' 
		''' </summary>
		Public Function SetDigitalLevelScriptTriggerActiveLevel(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalLevelScriptTriggerActiveLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies the active level for the Script trigger. This attribute is used   when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. 
		''' 
		''' </summary>
		Public Function GetDigitalLevelScriptTriggerActiveLevel(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalLevelScriptTriggerActiveLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. This attribute is not case-sensitive. To set   the NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_SOURCE attribute,   the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetDigitalLevelScriptTriggerSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.DigitalLevelScriptTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. This attribute is not case-sensitive. To set   the NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_SOURCE attribute,   the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetDigitalLevelScriptTriggerSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.DigitalLevelScriptTriggerSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the deviation to use in FSK modulation. 
		''' 
		''' </summary>
		Public Function SetDigitalModulationFskDeviation(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.DigitalModulationFskDeviation, channel, value)
		End Function

		''' <summary>
		'''Specifies the deviation to use in FSK modulation. 
		''' 
		''' </summary>
		Public Function GetDigitalModulationFskDeviation(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.DigitalModulationFskDeviation, channel, value)
		End Function

		''' <summary>
		'''Specifies the order of the pseudorandom bit sequence (PRBS)   sequence internally generated by hardware   and used as the message signal in digital modulation. 
		''' 
		''' </summary>
		Public Function SetDigitalModulationPrbsOrder(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalModulationPrbsOrder, channel, value)
		End Function

		''' <summary>
		'''Specifies the order of the pseudorandom bit sequence (PRBS)   sequence internally generated by hardware   and used as the message signal in digital modulation. 
		''' 
		''' </summary>
		Public Function GetDigitalModulationPrbsOrder(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalModulationPrbsOrder, channel, value)
		End Function

		''' <summary>
		'''Specifies the seed of the internally generated   pseudorandom bit sequence (PRBS) sequence.
		''' 
		''' </summary>
		Public Function SetDigitalModulationPrbsSeed(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalModulationPrbsSeed, channel, value)
		End Function

		''' <summary>
		'''Specifies the seed of the internally generated   pseudorandom bit sequence (PRBS) sequence.
		''' 
		''' </summary>
		Public Function GetDigitalModulationPrbsSeed(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalModulationPrbsSeed, channel, value)
		End Function

		''' <summary>
		'''Specifies the symbol rate of the bit stream for FSK modulation.
		''' 
		''' </summary>
		Public Function SetDigitalModulationSymbolRate(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.DigitalModulationSymbolRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the symbol rate of the bit stream for FSK modulation.
		''' 
		''' </summary>
		Public Function GetDigitalModulationSymbolRate(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.DigitalModulationSymbolRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the digital modulation format to use.
		''' 
		''' </summary>
		Public Function SetDigitalModulationType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalModulationType, channel, value)
		End Function

		''' <summary>
		'''Specifies the digital modulation format to use.
		''' 
		''' </summary>
		Public Function GetDigitalModulationType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalModulationType, channel, value)
		End Function

		''' <summary>
		'''Specifies the type of waveform to use as the message signal in digital   modulation.
		''' 
		''' </summary>
		Public Function SetDigitalModulationWaveformType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DigitalModulationWaveformType, channel, value)
		End Function

		''' <summary>
		'''Specifies the type of waveform to use as the message signal in digital   modulation.
		''' 
		''' </summary>
		Public Function GetDigitalModulationWaveformType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DigitalModulationWaveformType, channel, value)
		End Function

		''' <summary>
		'''Enables or disables digital pattern on the NI 5421/5441 AWG module. This   attribute must be set to VI_TRUE to enable signal routing to and from the   Digital Data &amp; Control connector. To set this attribute, the NI-RFSG   device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetDigitalPattern(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.DigitalPattern, channel, value)
		End Function

		''' <summary>
		'''Enables or disables digital pattern on the NI 5421/5441 AWG module. This   attribute must be set to VI_TRUE to enable signal routing to and from the   Digital Data &amp; Control connector. To set this attribute, the NI-RFSG   device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetDigitalPattern(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.DigitalPattern, channel, value)
		End Function

		''' <summary>
		'''Enables the device for Direct DMA writes.  When enabled, the   niRFSG_WriteArbWaveform function writes data residing on the direct DMA   device (specified in the data address in the   NIRFSG_ATTR_DIRECT_DMA_WINDOW_ADDRESS attribute) to the NI-RFSG device   onboard memory.
		''' 
		''' </summary>
		Public Function SetDirectDmaEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.DirectDmaEnabled, channel, value)
		End Function

		''' <summary>
		'''Enables the device for Direct DMA writes.  When enabled, the   niRFSG_WriteArbWaveform function writes data residing on the direct DMA   device (specified in the data address in the   NIRFSG_ATTR_DIRECT_DMA_WINDOW_ADDRESS attribute) to the NI-RFSG device   onboard memory.
		''' 
		''' </summary>
		Public Function GetDirectDmaEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.DirectDmaEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies the window address (beginning of window) of the waveform data   source. This window address is specified by your Direct DMA-compatible   data source.
		''' 
		''' </summary>
		Public Function SetDirectDmaWindowAddress(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DirectDmaWindowAddress, channel, value)
		End Function

		''' <summary>
		'''Specifies the window address (beginning of window) of the waveform data   source. This window address is specified by your Direct DMA-compatible   data source.
		''' 
		''' </summary>
		Public Function GetDirectDmaWindowAddress(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DirectDmaWindowAddress, channel, value)
		End Function

		''' <summary>
		'''Specifies the size of the memory window provided by your direct   DMA-compatible data source. 
		'''   Units: bytes 
		''' 
		''' </summary>
		Public Function SetDirectDmaWindowSize(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DirectDmaWindowSize, channel, value)
		End Function

		''' <summary>
		'''Specifies the size of the memory window provided by your direct   DMA-compatible data source. 
		'''   Units: bytes 
		''' 
		''' </summary>
		Public Function GetDirectDmaWindowSize(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DirectDmaWindowSize, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the niRFSG_WriteArbWaveform function writes waveforms   immediately to the device or copies the waveform to host memory for   download later. NI-RFSG reads and validates this attribute when an   arbitrary waveform is first allocated.
		'''   NI 5670: Direct download is always disabled. 
		'''   NI 5671: To increase performance when using large waveforms,   enable direct download.  To maximize reconfigurability, disable direct   
		''' 
		''' </summary>
		Public Function SetDirectDownload(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.DirectDownload, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the niRFSG_WriteArbWaveform function writes waveforms   immediately to the device or copies the waveform to host memory for   download later. NI-RFSG reads and validates this attribute when an   arbitrary waveform is first allocated.
		'''   NI 5670: Direct download is always disabled. 
		'''   NI 5671: To increase performance when using large waveforms,   enable direct download.  To maximize reconfigurability, disable direct   
		''' 
		''' </summary>
		Public Function GetDirectDownload(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.DirectDownload, channel, value)
		End Function

		''' <summary>
		'''Returns the name of the fully-qualified signal name as a string. 
		''' 
		''' </summary>
		Public Function GetDoneEventTerminalName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.DoneEventTerminalName, channel, value)
		End Function

		''' <summary>
		'''The driver setup string is used to set the initial values for attributes   that are specific to NI-RFSG.
		'''    The format of the driver setup string is in the following format:
		'''        Tag: Value
		'''   where
		'''   Tag is the name of the driver setup string attribute
		'''    Value is the value set to the attribute.
		'''    To set multiple attributes, separate their assignments with a semicolon.
		'''   The following describes the driver setup string tags:
		'''   AWG--Specifies the resource name of the Arbitrary Waveform Generator to   use for this session. If this driver setup tag is not specified, the   resource name for the upconverter associated in MAX is used.
		'''   Example:  DriverSetup=AWG:pxi1slot4 
		'''    or 
		'''   DriverSetup=AWGModule:pxi1slot4 
		'''    Refer to the niRFSG_InitWithOptions function for additional information   about the optionsString parameter. Refer to the NI RF Signal Generators   Getting Started Guide, located at Start» All Programs»National   Instruments»NI-RFSG» Documentation, for information about MAX setup.
		''' 
		''' </summary>
		Public Function GetDriverSetup(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.DriverSetup, channel, value)
		End Function

        ''' <summary>
		'''Specifies the delay, in seconds, applied to the Started event, Done event, and all Marker events with respect to the analog    output of the RF signal generator. To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    By default, markers and events are delayed to align with the waveform data generated from the device.    This attribute adds an additional delay to markers and events. Use this attribute to adjust the time delay between    events and the corresponding data. 
		'''    Units: Seconds 
		''' 
		''' </summary>
		Public Function SetEventsDelay(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.EventsDelay, channel, value)
		End Function
        ''' <summary>
		'''Specifies the delay, in seconds, applied to the Started event, Done event, and all Marker events with respect to the analog    output of the RF signal generator. To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    By default, markers and events are delayed to align with the waveform data generated from the device.    This attribute adds an additional delay to markers and events. Use this attribute to adjust the time delay between    events and the corresponding data. 
		'''    Units: Seconds 
		''' 
		''' </summary>
		Public Function GetEventsDelay(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.EventsDelay, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the Configuration List Step   trigger.  To set this attribute, the NI-RFSG device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function SetExportedConfigurationListStepTriggerOutputTerminal(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ExportedConfigurationListStepTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the Configuration List Step   trigger.  To set this attribute, the NI-RFSG device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function GetExportedConfigurationListStepTriggerOutputTerminal(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExportedConfigurationListStepTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the Done event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetExportedDoneEventOutputTerminal(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ExportedDoneEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the Done event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetExportedDoneEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExportedDoneEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the marker event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetExportedMarkerEventOutputTerminal(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ExportedMarkerEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the marker event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetExportedMarkerEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExportedMarkerEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the reference clock on   the NI 5650/5651/5652/5673 RF signal generators. To set this attribute,   the NI-RFSG device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function SetExportedRefClockOutputTerminal(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ExportedRefClockOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the reference clock on   the NI 5650/5651/5652/5673 RF signal generators. To set this attribute,   the NI-RFSG device must be in the Configuration state. 
		''' 
		''' </summary>
		Public Function GetExportedRefClockOutputTerminal(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExportedRefClockOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the script trigger. To   set this attribute, the NI-RFSG device must be in the Configuration state.   For trigger delay information, refer to the triggering section in the NI   RF Signal Generators Help. 
		''' 
		''' </summary>
		Public Function SetExportedScriptTriggerOutputTerminal(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ExportedScriptTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the script trigger. To   set this attribute, the NI-RFSG device must be in the Configuration state.   For trigger delay information, refer to the triggering section in the NI   RF Signal Generators Help. 
		''' 
		''' </summary>
		Public Function GetExportedScriptTriggerOutputTerminal(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExportedScriptTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the started event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetExportedStartedEventOutputTerminal(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ExportedStartedEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the started event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetExportedStartedEventOutputTerminal(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExportedStartedEventOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the Start trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		''' 
		''' </summary>
		Public Function SetExportedStartTriggerOutputTerminal(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.ExportedStartTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Specifies the destination terminal for exporting the Start trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		''' 
		''' </summary>
		Public Function GetExportedStartTriggerOutputTerminal(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExportedStartTriggerOutputTerminal, channel, value)
		End Function

		''' <summary>
		'''Returns the recommended interval between each external calibration of the device. 
		'''   Units: months 
		''' 
		''' </summary>
		Public Function GetExternalCalibrationRecommendedInterval(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ExternalCalibrationRecommendedInterval, channel, value)
		End Function

		''' <summary>
		'''Indicates in degrees Celsius the temperature of the device at the time of   the last external calibration. 
		''' 
		''' </summary>
		Public Function GetExternalCalibrationTemperature(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ExternalCalibrationTemperature, channel, value)
		End Function

		''' <summary>
		'''Specifies a string that contains arbitrary, user-defined information that   is stored with external calibration. 
		''' 
		''' </summary>
		<Obsolete> _
		Public Function GetExternalCalibrationUserDefinedInfo(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ExternalCalibrationUserDefinedInfo, channel, value)
		End Function

		''' <summary>
		'''Returns the maximum string length for the   NIRFSG_ATTR_EXTERNAL_CALIBRATION_USER_DEFINED_INFO attribute. 
		''' 
		''' </summary>
		<Obsolete> _
		Public Function GetExternalCalibrationUserDefinedInfoMaxSize(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ExternalCalibrationUserDefinedInfoMaxSize, channel, value)
		End Function

		''' <summary>
		'''Specifies the external amplification or attenuation, if any, between   the RF signal generator and the device under test.   
		'''   Positive values for this property represent amplification, and   negative values for this property represent attenuation.  
		'''   Note:  Setting this property adjusts the device output   power to compensate for any amplification or attenuation between   the RF signal generator and the device under test.  
		''' 
		''' </summary>
		Public Function SetExternalGain(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.ExternalGain, channel, value)
		End Function

		''' <summary>
		'''Specifies the external amplification or attenuation, if any, between   the RF signal generator and the device under test.   
		'''   Positive values for this property represent amplification, and   negative values for this property represent attenuation.  
		'''   Note:  Setting this property adjusts the device output   power to compensate for any amplification or attenuation between   the RF signal generator and the device under test.  
		''' 
		''' </summary>
		Public Function GetExternalGain(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.ExternalGain, channel, value)
		End Function

        ''' <summary>
		'''Returns a string containing the path to the location of the current NI-RFSG instrument    driver FPGA extensions bitfile, a .lvbitx file, that is programmed on the device.    You can specify the bitfile location using the Driver Setup string in the optionString parameter    of the niRFSG_InitWithOptions function. 
		'''    NI-RFSG instrument driver FPGA extensions enable you to use pre-compiled FPGA bitfiles to    customize the behavior of the vector signal transceiver FPGA while maintaining the functionality    of the NI-RFSG instrument driver. 
		'''    Refer to the NI-RFSA and NI-RFSG Instrument Driver FPGA Extensions topic in the NI RF Signal    Generators Help for more information about using NI-RFSG instrument driver FPGA extensions for    NI vector signal analyzers. 
		''' 
		''' </summary>
		Public Function GetFpgaBitfilePath(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.FpgaBitfilePath, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency of the generated RF signal. For arbitrary waveform   generation, this attribute specifies the center frequency of the signal. 
		'''   Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function SetFrequency(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.Frequency, channel, value)
		End Function

		''' <summary>
		'''Specifies the frequency of the generated RF signal. For arbitrary waveform   generation, this attribute specifies the center frequency of the signal. 
		'''   Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function GetFrequency(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.Frequency, channel, value)
		End Function

		''' <summary>
		'''Configures the frequency settling time.  Interpretation of this value   depends on the NIRFSG_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
		''' 
		''' </summary>
		Public Function SetFrequencySettling(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.FrequencySettling, channel, value)
		End Function

		''' <summary>
		'''Configures the frequency settling time.  Interpretation of this value   depends on the NIRFSG_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
		''' 
		''' </summary>
		Public Function GetFrequencySettling(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.FrequencySettling, channel, value)
		End Function

		''' <summary>
		'''Specifies the interpretation of the value passed to the   NIRFSG_ATTR_FREQUENCY_SETTLING attribute. 
		''' 
		''' </summary>
		Public Function SetFrequencySettlingUnits(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.FrequencySettlingUnits, channel, value)
		End Function

		''' <summary>
		'''Specifies the interpretation of the value passed to the   NIRFSG_ATTR_FREQUENCY_SETTLING attribute. 
		''' 
		''' </summary>
		Public Function GetFrequencySettlingUnits(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.FrequencySettlingUnits, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum frequency error allowed during the software   upconversion process. NI-RFSG may introduce a frequency error up to the   specified amount in order to optimize computational speed and onboard   memory usage while upconverting phase-continuous signals. 
		'''   If the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED attribute is set to   NIRFSG_VAL_DISABLE, the NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute is   ignored, and the driver does not introduce a frequency error. On devices   that do not use software upconversion, this property is ignored. The   NI 5670 always uses software upconversion, and the NI 5671 uses software   upconversion for I/Q rates greater than 8.33 MS/s. 
		'''   To set the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute, the NI-RFSG device must be in   the Configuration state.
		'''   Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function SetFrequencyTolerance(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.FrequencyTolerance, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum frequency error allowed during the software   upconversion process. NI-RFSG may introduce a frequency error up to the   specified amount in order to optimize computational speed and onboard   memory usage while upconverting phase-continuous signals. 
		'''   If the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED attribute is set to   NIRFSG_VAL_DISABLE, the NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute is   ignored, and the driver does not introduce a frequency error. On devices   that do not use software upconversion, this property is ignored. The   NI 5670 always uses software upconversion, and the NI 5671 uses software   upconversion for I/Q rates greater than 8.33 MS/s. 
		'''   To set the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute, the NI-RFSG device must be in   the Configuration state.
		'''   Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function GetFrequencyTolerance(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.FrequencyTolerance, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to generate a continuous wave (CW) signal, the arb   waveform specified by the NIRFSG_ATTR_SELECTED_WAVEFORM attribute, or the   script specified by the NIRFSG_ATTR_SELECTED_SCRIPT attribute, upon   calling the niRFSG_Initiate function. 
		''' 
		''' </summary>
		Public Function SetGenerationMode(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.GenerationMode, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to generate a continuous wave (CW) signal, the arb   waveform specified by the NIRFSG_ATTR_SELECTED_WAVEFORM attribute, or the   script specified by the NIRFSG_ATTR_SELECTED_SCRIPT attribute, upon   calling the niRFSG_Initiate function. 
		''' 
		''' </summary>
		Public Function GetGenerationMode(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.GenerationMode, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains a comma-separated list of class-extension   groups that NI-RFSG implements.
		''' 
		''' </summary>
		Public Function GetGroupCapabilities(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.GroupCapabilities, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the firmware revision information for the   NI-RFSG device you are currently using.
		''' 
		''' </summary>
		Public Function GetInstrumentFirmwareRevision(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.InstrumentFirmwareRevision, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the name of the manufacturer for the   NI-RFSG device you are currently using.
		''' 
		''' </summary>
		Public Function GetInstrumentManufacturer(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.InstrumentManufacturer, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the model number or name of the NI-RFSG   device that you are currently using. For drivers that support more than   one device, this attribute returns a comma-separated list of   supported devices.
		''' 
		''' </summary>
		Public Function GetInstrumentModel(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.InstrumentModel, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to perform interchangeability checking and retrieve   interchangeability warnings.
		'''   NOTE: This attribute is currently not supported. 
		''' 
		''' </summary>
		Public Function SetInterchangeCheck(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.InterchangeCheck, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to perform interchangeability checking and retrieve   interchangeability warnings.
		'''   NOTE: This attribute is currently not supported. 
		''' 
		''' </summary>
		Public Function GetInterchangeCheck(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.InterchangeCheck, channel, value)
		End Function


        ''' <summary>
		'''Specifies the delay, in seconds, to apply to the I/Q waveform. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
		'''    Units: Seconds 
		''' 
		''' </summary>
		Public Function SetInterpolationDelay(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.InterpolationDelay, channel, value)
		End Function
        ''' <summary>
		'''Specifies the delay, in seconds, to apply to the I/Q waveform. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
		'''    Units: Seconds 
		''' 
		''' </summary>
		Public Function GetInterpolationDelay(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.InterpolationDelay, channel, value)
		End Function

		''' <summary>
		'''Specifies the gain imbalance of the I/Q modulator (I versus Q). 
		'''   Units: dB 
		''' 
		''' </summary>
		Public Function SetIqGainImbalance(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqGainImbalance, channel, value)
		End Function

		''' <summary>
		'''Specifies the gain imbalance of the I/Q modulator (I versus Q). 
		'''   Units: dB 
		''' 
		''' </summary>
		Public Function GetIqGainImbalance(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqGainImbalance, channel, value)
		End Function

		''' <summary>
		'''Enables/disables I/Q impairment.  The NIRFSG_ATTR_IQ_I_OFFSET,   NIRFSG_ATTR_IQ_Q_OFFSET, NIRFSG_ATTR_IQ_GAIN_IMBALANCE, and   NIRFSG_ATTR_IQ_SKEW attributes are ignored when the   NIRFSG_ATTR_IQ_IMPAIRMENT_ENABLED attribute is disabled. 
		''' 
		''' </summary>
		Public Function SetIqImpairmentEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.IqImpairmentEnabled, channel, value)
		End Function

		''' <summary>
		'''Enables/disables I/Q impairment.  The NIRFSG_ATTR_IQ_I_OFFSET,   NIRFSG_ATTR_IQ_Q_OFFSET, NIRFSG_ATTR_IQ_GAIN_IMBALANCE, and   NIRFSG_ATTR_IQ_SKEW attributes are ignored when the   NIRFSG_ATTR_IQ_IMPAIRMENT_ENABLED attribute is disabled. 
		''' 
		''' </summary>
		Public Function GetIqImpairmentEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.IqImpairmentEnabled, channel, value)
		End Function

		''' <summary>
		'''When using a National Instruments AWG, this attribute specifies the   I-signal DC offset.  Actual AWG signal offset is equal to the I/Q   modulator offset correction plus the value specified by this attribute.    Units are either percent or volts, depending on the    NIRFSG_ATTR_OFFSET_UNITS attribute.
		'''   When using an external AWG, this attribute is read-only 
		'''   and indicates the I/Q modulator I-offset.  Units are volts, as indicated   by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
		''' 
		''' </summary>
		Public Function SetIqIOffset(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqIOffset, channel, value)
		End Function

		''' <summary>
		'''When using a National Instruments AWG, this attribute specifies the   I-signal DC offset.  Actual AWG signal offset is equal to the I/Q   modulator offset correction plus the value specified by this attribute.    Units are either percent or volts, depending on the    NIRFSG_ATTR_OFFSET_UNITS attribute.
		'''   When using an external AWG, this attribute is read-only 
		'''   and indicates the I/Q modulator I-offset.  Units are volts, as indicated   by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
		''' 
		''' </summary>
		Public Function GetIqIOffset(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqIOffset, channel, value)
		End Function

		''' <summary>
		'''Specifies the units of the NIRFSG_ATTR_IQ_I_OFFSET attribute and the   NIRFSG_ATTR_IQ_Q_OFFSET attribute.  Offset units are either percent or   volts.
		''' 
		''' </summary>
		Public Function SetIqOffsetUnits(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.IqOffsetUnits, channel, value)
		End Function

		''' <summary>
		'''Specifies the units of the NIRFSG_ATTR_IQ_I_OFFSET attribute and the   NIRFSG_ATTR_IQ_Q_OFFSET attribute.  Offset units are either percent or   volts.
		''' 
		''' </summary>
		Public Function GetIqOffsetUnits(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.IqOffsetUnits, channel, value)
		End Function

		''' <summary>
		'''When using a National Instruments AWG, this attribute 
		'''   specifies the Q-signal DC offset.  Actual AWGsignal offset is equal to the   I/Q modulator offset correction plus the value specified by this   attribute.  Units are either percent or volts, depending on the   NIRFSG_ATTR_OFFSET_UNITS attribute.
		'''   When using an external AWG, 
		'''   this attribute is read-only, and indicates the IQ modulator Q offset.   Units are volts, as indicated by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
		''' 
		''' </summary>
		Public Function SetIqQOffset(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqQOffset, channel, value)
		End Function

		''' <summary>
		'''When using a National Instruments AWG, this attribute 
		'''   specifies the Q-signal DC offset.  Actual AWGsignal offset is equal to the   I/Q modulator offset correction plus the value specified by this   attribute.  Units are either percent or volts, depending on the   NIRFSG_ATTR_OFFSET_UNITS attribute.
		'''   When using an external AWG, 
		'''   this attribute is read-only, and indicates the IQ modulator Q offset.   Units are volts, as indicated by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
		''' 
		''' </summary>
		Public Function GetIqQOffset(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqQOffset, channel, value)
		End Function

        ''' <summary>
		'''Specifies the frequency of the I/Q OUT port signal. The onboard signal processing (OSP)    applies the specified frequency shift to the I/Q data before the data is sent to the    digital-to-analog converter (DAC). To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Hertz (Hz) 
		''' 
		''' </summary>
		Public Function SetIqOutPortCarrierFrequency(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqOutPortCarrierFrequency, channel, value)
		End Function
        ''' <summary>
		'''Specifies the frequency of the I/Q OUT port signal. The onboard signal processing (OSP)    applies the specified frequency shift to the I/Q data before the data is sent to the    digital-to-analog converter (DAC). To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Hertz (Hz) 
		''' 
		''' </summary>
		Public Function GetIqOutPortCarrierFrequency(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqOutPortCarrierFrequency, channel, value)
		End Function

        ''' <summary>
		'''Specifies the common-mode offset applied to the signals generated at each differential output terminal.    This attribute applies only when you set the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute to NIRFSG_VAL_DIFFERENTIAL.    Common-mode offset shifts both positive and negative terminals in the same direction. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Volts 
		''' 
		''' </summary>
		Public Function SetIqOutPortCommonModeOffset(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqOutPortCommonModeOffset, channel, value)
		End Function
        ''' <summary>
		'''Specifies the common-mode offset applied to the signals generated at each differential output terminal.    This attribute applies only when you set the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute to NIRFSG_VAL_DIFFERENTIAL.    Common-mode offset shifts both positive and negative terminals in the same direction. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Volts 
		''' 
		''' </summary>
		Public Function GetIqOutPortCommonModeOffset(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqOutPortCommonModeOffset, channel, value)
		End Function

        ''' <summary>
		'''Specifies the amplitude of the generated signal in volts, peak-to-peak (Vpp). For example,    if you set this attribute to 1.0, the output signal ranges from -0.5 volts to 0.5 volts. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the specifications document for your device for allowable output levels. 
		'''    Units: Volts, peak-to-peak 
		''' 
		''' </summary>
		Public Function SetIqOutPortLevel(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqOutPortLevel, channel, value)
		End Function
        ''' <summary>
		'''Specifies the amplitude of the generated signal in volts, peak-to-peak (Vpp). For example,    if you set this attribute to 1.0, the output signal ranges from -0.5 volts to 0.5 volts. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the specifications document for your device for allowable output levels. 
		'''    Units: Volts, peak-to-peak 
		''' 
		''' </summary>
		Public Function GetIqOutPortLevel(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqOutPortLevel, channel, value)
		End Function

        ''' <summary>
		'''Specifies the load impedance connected to the I/Q OUT port. To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Ohms 
		''' 
		''' </summary>
		Public Function SetIqOutPortLoadImpedance(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqOutPortLoadImpedance, channel, value)
		End Function
        ''' <summary>
		'''Specifies the load impedance connected to the I/Q OUT port. To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Ohms 
		''' 
		''' </summary>
		Public Function GetIqOutPortLoadImpedance(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqOutPortLoadImpedance, channel, value)
		End Function

        ''' <summary>
		'''Specifies the value, in volts, that the signal generator adds to the arbitrary waveform data.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Volts 
		''' 
		''' </summary>
		Public Function SetIqOutPortOffset(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqOutPortOffset, channel, value)
		End Function
        ''' <summary>
		'''Specifies the value, in volts, that the signal generator adds to the arbitrary waveform data.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Units: Volts 
		''' 
		''' </summary>
		Public Function GetIqOutPortOffset(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqOutPortOffset, channel, value)
		End Function

        ''' <summary>
		'''Returns the temperature of the I/Q Out circuitry on the device. To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Untis: Degrees Celsius 
		''' 
		''' </summary>
		Public Function GetIqOutPortTemperature(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqOutPortTemperature, channel, value)
		End Function


        ''' <summary>
		'''Specifies whether to use the I/Q OUT port for Differential configuration or Single-Ended configuration.    If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, you must terminate the negative I and Q output    connectors with a 50 Ohm termination. 
		'''    If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, the positive I and Q connectors generate the resulting waveform.    If you set this attribute to NIRFSG_VAL_DIFFERENTIAL, both the positive and negative I and Q connectors generate the resulting waveform. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Differential and Single-Ended Operation (I/Q Interface) topic of the NI RF Signal Generators Help    for more information about differential and single-ended operation.
		''' 
		''' </summary>
		Public Function SetIqOutPortTerminalConfiguration(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.IqOutPortTerminalConfiguration, channel, value)
		End Function
        ''' <summary>
		'''Specifies whether to use the I/Q OUT port for Differential configuration or Single-Ended configuration.    If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, you must terminate the negative I and Q output    connectors with a 50 Ohm termination. 
		'''    If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, the positive I and Q connectors generate the resulting waveform.    If you set this attribute to NIRFSG_VAL_DIFFERENTIAL, both the positive and negative I and Q connectors generate the resulting waveform. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Differential and Single-Ended Operation (I/Q Interface) topic of the NI RF Signal Generators Help    for more information about differential and single-ended operation.
		''' 
		''' </summary>
		Public Function GetIqOutPortTerminalConfiguration(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.IqOutPortTerminalConfiguration, channel, value)
		End Function

		''' <summary>
		'''This attribute specifies the I/Q rate of the arbitrary waveform.   The I/Q rate is coerced to what rates the hardware can achieve.   Read this value back after setting it to see what the actual   I/Q rate is. NI-RFSG internally uses an FIR filter with flat   response up to (0.4 × IQ rate). Given a desired signal with   the maximum frequency content f, sample the signal at   an I/Q rate greater than or equal to (f/0.4). 
		'''   This attribute applies only when the NIRFSG_ATTR_GENERATION_MODE   attribute is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
		'''   Use this attribute to associate an I/Q rate with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of   the NI RF Signal Generators Help for more information about assigning  
		''' 
		''' </summary>
		Public Function SetIqRate(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqRate, channel, value)
		End Function

		''' <summary>
		'''This attribute specifies the I/Q rate of the arbitrary waveform.   The I/Q rate is coerced to what rates the hardware can achieve.   Read this value back after setting it to see what the actual   I/Q rate is. NI-RFSG internally uses an FIR filter with flat   response up to (0.4 × IQ rate). Given a desired signal with   the maximum frequency content f, sample the signal at   an I/Q rate greater than or equal to (f/0.4). 
		'''   This attribute applies only when the NIRFSG_ATTR_GENERATION_MODE   attribute is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
		'''   Use this attribute to associate an I/Q rate with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of   the NI RF Signal Generators Help for more information about assigning  
		''' 
		''' </summary>
		Public Function GetIqRate(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the adjustment of the phase angle between the I and Q vectors.   If this skew is zero, the phase angle is 90 degrees. 
		''' 
		''' </summary>
		Public Function SetIqSkew(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.IqSkew, channel, value)
		End Function

		''' <summary>
		'''Specifies the adjustment of the phase angle between the I and Q vectors.   If this skew is zero, the phase angle is 90 degrees. 
		''' 
		''' </summary>
		Public Function GetIqSkew(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.IqSkew, channel, value)
		End Function

		''' <summary>
		'''Enables or disables the inverse phase rotation of the IQ signal by   swapping the I and Q inputs.  
		'''   To set this attribute, the NI-RFSG device must   be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetIqSwapEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.IqSwapEnabled, channel, value)
		End Function

		''' <summary>
		'''Enables or disables the inverse phase rotation of the IQ signal by   swapping the I and Q inputs.  
		'''   To set this attribute, the NI-RFSG device must   be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetIqSwapEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.IqSwapEnabled, channel, value)
		End Function

		''' <summary>
		'''Contains the logical name you specified when opening the current IVI session.   You can pass a logical name to the niRFSG_init   function or the niRFSG_InitWithOptions function. The IVI Configuration   Utility must contain an entry for the logical name. The logical name entry   refers to a driver session section in the IVI Configuration file. The   driver session section specifies a physical device and initial user   options.
		''' 
		''' </summary>
		Public Function GetLogicalName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.LogicalName, channel, value)
		End Function

		''' <summary>
		'''Specifies the power level of the signal at the front panel LO IN   connector. 
		'''   NOTE: This attribute is read/write if you are using an external LO.   Otherwise, this attribute is read-only. 
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function SetLoInPower(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.LoInPower, channel, value)
		End Function

		''' <summary>
		'''Specifies the power level of the signal at the front panel LO IN   connector. 
		'''   NOTE: This attribute is read/write if you are using an external LO.   Otherwise, this attribute is read-only. 
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function GetLoInPower(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.LoInPower, channel, value)
		End Function

		''' <summary>
		'''Configures the loop bandwidth of the tuning PLLs.NI 5610/5670/5671/5672 --   this attribute is ignoredfor signal bandwidths greater than or equal to 10   MHz. 
		'''    Note: Setting this attribute to NIRFSG_VAL_HIGH on the    NI 5650/5651/5652/5673/5673E allows the frequency to settle    significantly faster at the expense of increased phase noise.    Setting this attribute to NIRFSG_VAL_MEDIUM is not a valid    option on the NI 5650/5651/5652/5673/5673E. 
		''' 
		''' </summary>
		Public Function SetLoopBandwidth(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.LoopBandwidth, channel, value)
		End Function

		''' <summary>
		'''Configures the loop bandwidth of the tuning PLLs.NI 5610/5670/5671/5672 --   this attribute is ignoredfor signal bandwidths greater than or equal to 10   MHz. 
		'''    Note: Setting this attribute to NIRFSG_VAL_HIGH on the    NI 5650/5651/5652/5673/5673E allows the frequency to settle    significantly faster at the expense of increased phase noise.    Setting this attribute to NIRFSG_VAL_MEDIUM is not a valid    option on the NI 5650/5651/5652/5673/5673E. 
		''' 
		''' </summary>
		Public Function GetLoopBandwidth(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.LoopBandwidth, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the local oscillator signal is present at the front   panel LO Out connector.
		'''   The local oscillator signal remains at the LO OUT front panel connector   until this attribute is set to VI_FALSE even if the   NIRFSG_ATTR_OUTPUT_ENABLED attribute is set to VI FALSE,   the niRFSG_Abort function is called, or the NI-RFSG sesssion is closed.   
		''' 
		''' </summary>
		Public Function SetLoOutEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.LoOutEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the local oscillator signal is present at the front   panel LO Out connector.
		'''   The local oscillator signal remains at the LO OUT front panel connector   until this attribute is set to VI_FALSE even if the   NIRFSG_ATTR_OUTPUT_ENABLED attribute is set to VI FALSE,   the niRFSG_Abort function is called, or the NI-RFSG sesssion is closed.   
		''' 
		''' </summary>
		Public Function GetLoOutEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.LoOutEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies the power level of the signal at the front panel LO OUT   connector. 
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function GetLoOutPower(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.LoOutPower, channel, value)
		End Function


        ''' <summary>
		'''Specifies whether to use fractional mode for the local oscillator (LO) phase-locked loop (PLL).    This attribute enables or disables fractional frequency tuning in the LO. Fractional mode    provides a finer frequency step resolution and allows smaller values for the   
		''' 
		''' </summary>
		Public Function SetLoPllFractionalModeEnabled(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.LoPllFractionalModeEnabled, channel, value)
		End Function
        ''' <summary>
		'''Specifies whether to use fractional mode for the local oscillator (LO) phase-locked loop (PLL).    This attribute enables or disables fractional frequency tuning in the LO. Fractional mode    provides a finer frequency step resolution and allows smaller values for the   
		''' 
		''' </summary>
		Public Function GetLoPllFractionalModeEnabled(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.LoPllFractionalModeEnabled, channel, value)
		End Function

        ''' <summary>
		'''Specifies whether to use the internal or external local oscillator (LO) source.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    To use an external LO source, set this attribute to NIRFSG_VAL_LO_SOURCE_LO_IN_STR,    connect a signal to the LO IN connector on the device, and use the    NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute to specify the LO frequency. 
		'''    To use the internal LO source, set the NIRFSG_ATTR_LO_SOURCE attribute to    NIRFSG_VAL_LO_SOURCE_ONBOARD_STR. If you specify an internal LO source,    the LO is generated inside the device itself. 
		''' 
		''' </summary>
		Public Function SetLoSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.LoSource, channel, value)
		End Function
        ''' <summary>
		'''Specifies whether to use the internal or external local oscillator (LO) source.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    To use an external LO source, set this attribute to NIRFSG_VAL_LO_SOURCE_LO_IN_STR,    connect a signal to the LO IN connector on the device, and use the    NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute to specify the LO frequency. 
		'''    To use the internal LO source, set the NIRFSG_ATTR_LO_SOURCE attribute to    NIRFSG_VAL_LO_SOURCE_ONBOARD_STR. If you specify an internal LO source,    the LO is generated inside the device itself. 
		''' 
		''' </summary>
		Public Function GetLoSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.LoSource, channel, value)
		End Function

        ''' <summary>
		'''Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
		'''    When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is enabled, the specified step size    affects the fractional spur performance of the device. When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED    attribute is disabled, the specified step size affects the phase noise performance of the device. 
		'''    The valid values for this attribute depend on the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute.    If you disable the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute, the specified value is    coerced to the closest valid value. 
		''' 
		''' </summary>
		Public Function SetLoFrequencyStepSize(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.LoFrequencyStepSize, channel, value)
		End Function
        ''' <summary>
		'''Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
		'''    When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is enabled, the specified step size    affects the fractional spur performance of the device. When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED    attribute is disabled, the specified step size affects the phase noise performance of the device. 
		'''    The valid values for this attribute depend on the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute.    If you disable the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute, the specified value is    coerced to the closest valid value. 
		''' 
		''' </summary>
		Public Function GetLoFrequencyStepSize(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.LoFrequencyStepSize, channel, value)
		End Function

		''' <summary>
		'''Indicates the LO module temperature in degrees Celsius. 
		'''   Units: degrees Celsius (°C) 
		''' 
		''' </summary>
		Public Function GetLoTemperature(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.LoTemperature, channel, value)
		End Function

		''' <summary>
		'''Returns the name of the fully-qualified signal name as a string. 
		''' 
		''' </summary>
		Public Function GetMarkerEventTerminalName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.MarkerEventTerminalName, channel, value)
		End Function

		''' <summary>
		'''The total amount of memory on the signal generator in bytes. 
		'''   Note: Not all onboard memory can be used for waveform storage. A portion   of onboard memory stores scripts that specify how the waveforms are   generated. These scripts typically require less than 1 KB of   onboard memory.  
		'''     Units: bytes 
		''' 
		''' </summary>
		Public Function GetMemorySize(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.MemorySize, channel, value)
		End Function

		''' <summary>
		'''Returns the module revision letter.  If the NI-RFSG session is controlling multiple devices,  this returns the module revision letter of the primary RF device.  The NI-RFSG session is   opened using the primary RF device name.
		''' 
		''' </summary>
		Public Function GetModuleRevision(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ModuleRevision, channel, value)
		End Function

		''' <summary>
		'''Specifies whether signal output is enabled. Setting the   NIRFSG_ATTR_OUTPUT_ENABLED attribute to VI_FALSE while in   the Generation state stops signal output, although generation   continues internally. Setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute while in the Committed state does not transition the   device to the Configuration state, but output changes immediately. 
		'''   Note: When the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set   to a valid list name, setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute transitions the device to the Configuration state. 
		''' 
		''' </summary>
		Public Function SetOutputEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.OutputEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether signal output is enabled. Setting the   NIRFSG_ATTR_OUTPUT_ENABLED attribute to VI_FALSE while in   the Generation state stops signal output, although generation   continues internally. Setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute while in the Committed state does not transition the   device to the Configuration state, but output changes immediately. 
		'''   Note: When the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set   to a valid list name, setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute transitions the device to the Configuration state. 
		''' 
		''' </summary>
		Public Function GetOutputEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.OutputEnabled, channel, value)
		End Function

        ''' <summary>
		'''Specifies the connector(s) to use to generate the signal. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
		'''    You must write complex I and Q data for all options. The Q data has no effect if    you set this attribute to I Only and set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY    attribute to 0. If you set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY attribute to a    value other than 0, the onboard signal processing (OSP) frequency shifts I and Q as a complex    value and outputs the real portion of the result on the I connector(s) of the device. 
		'''    If you set the NIRFSG_ATTR_OUTPUT_PORT attribute to NIRFSG_VAL_I_ONLY or NIRFSG_VAL_IQ_OUT,    the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute applies. 
		''' 
		''' </summary>
		Public Function SetOutputPort(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.OutputPort, channel, value)
		End Function
        ''' <summary>
		'''Specifies the connector(s) to use to generate the signal. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
		'''    You must write complex I and Q data for all options. The Q data has no effect if    you set this attribute to I Only and set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY    attribute to 0. If you set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY attribute to a    value other than 0, the onboard signal processing (OSP) frequency shifts I and Q as a complex    value and outputs the real portion of the result on the I connector(s) of the device. 
		'''    If you set the NIRFSG_ATTR_OUTPUT_PORT attribute to NIRFSG_VAL_I_ONLY or NIRFSG_VAL_IQ_OUT,    the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute applies. 
		''' 
		''' </summary>
		Public Function GetOutputPort(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.OutputPort, channel, value)
		End Function

		''' <summary>
		'''Specifies the initial amount of data that the writer peer    can transfer over the bus into the configured endpoint when the    peer-to-peer data stream is enabled. If this attribute is not    set and the endpoint is empty, credits equal to the full endpoint    size are issued to the writer peer. If data is written to the    endpoint using the niRFSG_WriteP2PEndpointI16 function prior to    enabling the stream, credits equal to the remaining space available    in the endpoint are issued to the writer peer. This attribute is    coerced up by NI-RFSG to 8-byte boundaries.     This attribute is endpoint based 
		'''    Units: samples per channel 
		''' 
		''' </summary>
		Public Function SetP2pDataTransferPermissionitialCredits(channel As String, value As Long) As Integer
			Return SetLong(niRFSGProperties.P2pDataTransferPermissionitialCredits, channel, value)
		End Function

		''' <summary>
		'''Specifies the initial amount of data that the writer peer    can transfer over the bus into the configured endpoint when the    peer-to-peer data stream is enabled. If this attribute is not    set and the endpoint is empty, credits equal to the full endpoint    size are issued to the writer peer. If data is written to the    endpoint using the niRFSG_WriteP2PEndpointI16 function prior to    enabling the stream, credits equal to the remaining space available    in the endpoint are issued to the writer peer. This attribute is    coerced up by NI-RFSG to 8-byte boundaries.     This attribute is endpoint based 
		'''    Units: samples per channel 
		''' 
		''' </summary>
		Public Function GetP2pDataTransferPermissionitialCredits(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.P2pDataTransferPermissionitialCredits, channel, value)
		End Function

		''' <summary>
		'''Specifies the interval at which the RF signal generator issues    credits to allow the writer peer to transfer data over the bus into    the configured endpoint. Refer to the Flow Control topic in the    NI RF Signal Generators Help for more information. This attribute is    coerced up by NI-RFSG to the nearest 128-byte boundary.    This attribute is endpoint based.   
		'''    Units: samples per channel 
		''' 
		''' </summary>
		Public Function SetP2pDataTransferPermissionInterval(channel As String, value As Long) As Integer
			Return SetLong(niRFSGProperties.P2pDataTransferPermissionInterval, channel, value)
		End Function

		''' <summary>
		'''Specifies the interval at which the RF signal generator issues    credits to allow the writer peer to transfer data over the bus into    the configured endpoint. Refer to the Flow Control topic in the    NI RF Signal Generators Help for more information. This attribute is    coerced up by NI-RFSG to the nearest 128-byte boundary.    This attribute is endpoint based.   
		'''    Units: samples per channel 
		''' 
		''' </summary>
		Public Function GetP2pDataTransferPermissionInterval(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.P2pDataTransferPermissionInterval, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the device reads data from the peer-to-peer    endpoint.  This attribute is endpoint-based. 
		''' 
		''' </summary>
		Public Function SetP2pEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.P2pEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the device reads data from the peer-to-peer    endpoint.  This attribute is endpoint-based. 
		''' 
		''' </summary>
		Public Function GetP2pEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.P2pEnabled, channel, value)
		End Function

		''' <summary>
		'''Returns the number of peer-to-peer FIFO endpoints supported by the device. 
		''' 
		''' </summary>
		Public Function GetP2pEndpointCount(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.P2pEndpointCount, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of samples needed to be received by the endpoint before    the device starts generation. This attribute applies only when the    NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSG_VAL_P2P_ENDPOINT_FULLNESS.
		''' 
		''' </summary>
		Public Function SetP2pEndpointFullnessStartTriggerLevel(channel As String, value As Long) As Integer
			Return SetLong(niRFSGProperties.P2pEndpointFullnessStartTriggerLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies the number of samples needed to be received by the endpoint before    the device starts generation. This attribute applies only when the    NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSG_VAL_P2P_ENDPOINT_FULLNESS.
		''' 
		''' </summary>
		Public Function GetP2pEndpointFullnessStartTriggerLevel(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.P2pEndpointFullnessStartTriggerLevel, channel, value)
		End Function

		''' <summary>
		'''Returns the size, in samples, of the device's endpoint.    This attribute is endpoint-based. 
		''' 
		''' </summary>
		Public Function GetP2pEndpointSize(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.P2pEndpointSize, channel, value)
		End Function

		''' <summary>
		'''Returns the largest number of samples per channel available in the endpoint since    this attribute was last read. You can use this attribute to determine how much    endpoint space to use as a buffer against bus traffic latencies by reading    the attribute and keeping track of the largest value returned.    This attribute is endpoint based. 
		'''    If you want to minimize the latency for data to move through the endpoint    and be generated by the RF signal generator, use the    NIRFSG_ATTR_P2P_DATA_TRANSFER_PERMISSION_INITIAL_CREDITS attribute to grant    fewer initial credits than the default of the entire endpoint size. 
		'''    Units: samples per channel 
		''' 
		''' </summary>
		Public Function GetP2pMostSpaceAvailableInEndpoint(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.P2pMostSpaceAvailableInEndpoint, channel, value)
		End Function

		''' <summary>
		'''Returns the current space available in the endpoint. You can use this    attribute when priming the endpoint with initial data using the    niRFSG_WriteP2PEndpointI16 function to determine how many samples    you can write. You also can use this attribute to characterize the    performance and measure the latency of the peer-to-peer stream as data    moves across the bus. This attribute is endpoint based. 
		'''    Units: samples per channel 
		''' 
		''' </summary>
		Public Function GetP2pSpaceAvailableInEndpoint(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.P2pSpaceAvailableInEndpoint, channel, value)
		End Function

		''' <summary>
		'''Specifies the maximum instantaneous power of the current RF output signal.   
		'''   Note: This attribute is valid only when the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute is set to NIRFSG_VAL_AVERAGE_POWER. 
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function GetPeakEnvelopePower(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.PeakEnvelopePower, channel, value)
		End Function

		''' <summary>
		'''Determines the inheritance behavior of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute when a script inherits values from specified waveforms. 
		''' 
		''' </summary>
		<Obsolete("Use PeakPowerAdjustmentInheritance")> _
		Public Function SetPeakPowerAdjsutmentInheritance(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.PeakPowerAdjsutmentInheritance, channel, value)
		End Function

		''' <summary>
		'''Determines the inheritance behavior of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute when a script inherits values from specified waveforms. 
		''' 
		''' </summary>
		<Obsolete("Use PeakPowerAdjustmentInheritance")> _
		Public Function GetPeakPowerAdjsutmentInheritance(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.PeakPowerAdjsutmentInheritance, channel, value)
		End Function

		''' <summary>
		'''Specifies the adjustment for the NIRFSG_ATTR_POWER_LEVEL attribute.    The value of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT attribute adds    to the NIRFSG_ATTR_POWER_LEVEL attribute. The NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute typically specifies the peak-to-average power ratio (PAPR) of    a waveform. If the PAPR is specified, the specified power level becomes    the average power level of the waveform, even if the    NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to NIRFSG_VAL_PEAK_POWER. 
		'''    Note: Use this attribute to associate a peak power adjustment with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of the    NI RFSG Main Help for more information. 
		''' 
		''' </summary>
		Public Function SetPeakPowerAdjustment(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.PeakPowerAdjustment, channel, value)
		End Function

		''' <summary>
		'''Specifies the adjustment for the NIRFSG_ATTR_POWER_LEVEL attribute.    The value of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT attribute adds    to the NIRFSG_ATTR_POWER_LEVEL attribute. The NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute typically specifies the peak-to-average power ratio (PAPR) of    a waveform. If the PAPR is specified, the specified power level becomes    the average power level of the waveform, even if the    NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to NIRFSG_VAL_PEAK_POWER. 
		'''    Note: Use this attribute to associate a peak power adjustment with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of the    NI RFSG Main Help for more information. 
		''' 
		''' </summary>
		Public Function GetPeakPowerAdjustment(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.PeakPowerAdjustment, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the driver maintains phase continuity in the   arbitrary waveforms. When this attribute is set to   NIRFSG_VAL_ENABLE, NI-RFSG may increase the waveform size. When   this attribute is set to NIRFSG_VAL_ENABLE, the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute specifies the maximum   allowable frequency error that can be introduced when keeping the   signal phase-continuous. To set the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED   attribute, the NI-RFSG device must be in the Configuration state.   NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED applies only when the   NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
		'''   On the NI 5671: When using the NI 5671 with I/Q rates less than or equal   to 8.33 MS/s, an input phase-continuous signal is always phase-continuous   upon output, and this attribute has no effect. 
		'''   NI 5672/5673/5673E: Phase continuity is always enabled on this device. 
		''' 
		''' </summary>
		Public Function SetPhaseContinuityEnabled(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.PhaseContinuityEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the driver maintains phase continuity in the   arbitrary waveforms. When this attribute is set to   NIRFSG_VAL_ENABLE, NI-RFSG may increase the waveform size. When   this attribute is set to NIRFSG_VAL_ENABLE, the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute specifies the maximum   allowable frequency error that can be introduced when keeping the   signal phase-continuous. To set the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED   attribute, the NI-RFSG device must be in the Configuration state.   NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED applies only when the   NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
		'''   On the NI 5671: When using the NI 5671 with I/Q rates less than or equal   to 8.33 MS/s, an input phase-continuous signal is always phase-continuous   upon output, and this attribute has no effect. 
		'''   NI 5672/5673/5673E: Phase continuity is always enabled on this device. 
		''' 
		''' </summary>
		Public Function GetPhaseContinuityEnabled(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.PhaseContinuityEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies the phase of the RF output signal. You can use this attribute   to align the phase of the RF output with the phase of the RF output of   another device, as long as the two devices are phase-coherent. 
		'''   Units: degrees (º) 
		''' 
		''' </summary>
		Public Function SetPhaseOffset(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.PhaseOffset, channel, value)
		End Function

		''' <summary>
		'''Specifies the phase of the RF output signal. You can use this attribute   to align the phase of the RF output with the phase of the RF output of   another device, as long as the two devices are phase-coherent. 
		'''   Units: degrees (º) 
		''' 
		''' </summary>
		Public Function GetPhaseOffset(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.PhaseOffset, channel, value)
		End Function

		''' <summary>
		'''Specifies either the average power level or peak power level of the   generated RF signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute setting. average power of the signal or the peak power of the   signal. 
		'''   Refer to the specifications document for your device for allowable   power level settings. 
		'''   Note: This attribute is read-only for the NI 5653 device.   It is read/write for all other supported devices. 
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function SetPowerLevel(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.PowerLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies either the average power level or peak power level of the   generated RF signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute setting. average power of the signal or the peak power of the   signal. 
		'''   Refer to the specifications document for your device for allowable   power level settings. 
		'''   Note: This attribute is read-only for the NI 5653 device.   It is read/write for all other supported devices. 
		'''   Units: dBm 
		''' 
		''' </summary>
		Public Function GetPowerLevel(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.PowerLevel, channel, value)
		End Function

		''' <summary>
		'''Specifies how NI-RFSG interprets the value of the   NIRFSG_ATTR_POWER_LEVEL attribute.  The NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute also affects how waveforms are scaled.
		''' 
		''' </summary>
		Public Function SetPowerLevelType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.PowerLevelType, channel, value)
		End Function

		''' <summary>
		'''Specifies how NI-RFSG interprets the value of the   NIRFSG_ATTR_POWER_LEVEL attribute.  The NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute also affects how waveforms are scaled.
		''' 
		''' </summary>
		Public Function GetPowerLevelType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.PowerLevelType, channel, value)
		End Function

		''' <summary>
		'''Enables or disables pulse modulation.  If this property is enabled and the   signal at the PLS MOD connector is high, the device generates a signal. If   the signal is low, output generation is disabled. 
		''' 
		''' </summary>
		Public Function SetPulseModulationEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.PulseModulationEnabled, channel, value)
		End Function

		''' <summary>
		'''Enables or disables pulse modulation.  If this property is enabled and the   signal at the PLS MOD connector is high, the device generates a signal. If   the signal is low, output generation is disabled. 
		''' 
		''' </summary>
		Public Function GetPulseModulationEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.PulseModulationEnabled, channel, value)
		End Function

		''' <summary>
		'''Specifies the clock source for driving the PXI 10 MHz backplane reference   clock. This option can only be configured if the NI 5610 upconverter   module is installed in Slot 2 of a PXI chassis. To set this attribute, the   NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetPxiChassisClk10Source(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.PxiChassisClk10Source, channel, value)
		End Function

		''' <summary>
		'''Specifies the clock source for driving the PXI 10 MHz backplane reference   clock. This option can only be configured if the NI 5610 upconverter   module is installed in Slot 2 of a PXI chassis. To set this attribute, the   NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetPxiChassisClk10Source(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.PxiChassisClk10Source, channel, value)
		End Function

		''' <summary>
		'''Specifies whether NI-RFSG queries the NI-RFSG device status   after each operation. Querying the device status is useful   for debugging. After you validate your program, set this attribute   to VI_FALSE to disable status checking and maximize performance.   NI-RFSG can choose to ignore status checking for particular attributes,   regardless of the setting of this attribute. Use the niRFSG_InitWithOptions   function to override the default value. 
		''' 
		''' </summary>
		Public Function SetQueryInstrumentStatus(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.QueryInstrumentStatus, channel, value)
		End Function

		''' <summary>
		'''Specifies whether NI-RFSG queries the NI-RFSG device status   after each operation. Querying the device status is useful   for debugging. After you validate your program, set this attribute   to VI_FALSE to disable status checking and maximize performance.   NI-RFSG can choose to ignore status checking for particular attributes,   regardless of the setting of this attribute. Use the niRFSG_InitWithOptions   function to override the default value. 
		''' 
		''' </summary>
		Public Function GetQueryInstrumentStatus(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.QueryInstrumentStatus, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to validate attribute values and function   parameters. Range checking parameters is very useful for debugging.   After you validate your program, set this attribute to VI_FALSE to disable   range checking and maximize performance. Use the niRFSG_InitWithOptions   function to override the default value. 
		''' 
		''' </summary>
		Public Function SetRangeCheck(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.RangeCheck, channel, value)
		End Function

		''' <summary>
		'''Specifies whether to validate attribute values and function   parameters. Range checking parameters is very useful for debugging.   After you validate your program, set this attribute to VI_FALSE to disable   range checking and maximize performance. Use the niRFSG_InitWithOptions   function to override the default value. 
		''' 
		''' </summary>
		Public Function GetRangeCheck(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.RangeCheck, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the IVI engine keeps a list of the value coercions it   makes for integer and real type attributes.
		'''   This attribute is currently not supported.
		''' 
		''' </summary>
		Public Function SetRecordCoercions(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.RecordCoercions, channel, value)
		End Function

		''' <summary>
		'''Specifies whether the IVI engine keeps a list of the value coercions it   makes for integer and real type attributes.
		'''   This attribute is currently not supported.
		''' 
		''' </summary>
		Public Function GetRecordCoercions(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.RecordCoercions, channel, value)
		End Function

		''' <summary>
		'''Specifies the rate of the reference clock. NI-RFSG supports only   a Reference clock rate of 10 MHz.To set this attribute, the   NI-RFSG device must be in the Configuration state.
		'''    Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function SetRefClockRate(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.RefClockRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the rate of the reference clock. NI-RFSG supports only   a Reference clock rate of 10 MHz.To set this attribute, the   NI-RFSG device must be in the Configuration state.
		'''    Units: hertz (Hz) 
		''' 
		''' </summary>
		Public Function GetRefClockRate(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.RefClockRate, channel, value)
		End Function

		''' <summary>
		'''Specifies the reference clock source. To set this attribute, the NI-RFSG   device must be in the Configuration state. Only certain combinations   of this attribute and the NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE   attribute are valid
		'''   Note: NI 5670/5671/5672 devices also allow you to drive the PXI 10 MHz   backplane clock on PXI chassis only using the   NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE attribute. 
		''' 
		''' </summary>
		Public Function SetRefClockSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.RefClockSource, channel, value)
		End Function

		''' <summary>
		'''Specifies the reference clock source. To set this attribute, the NI-RFSG   device must be in the Configuration state. Only certain combinations   of this attribute and the NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE   attribute are valid
		'''   Note: NI 5670/5671/5672 devices also allow you to drive the PXI 10 MHz   backplane clock on PXI chassis only using the   NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE attribute. 
		''' 
		''' </summary>
		Public Function GetRefClockSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.RefClockSource, channel, value)
		End Function

		''' <summary>
		'''Configures the loop bandwidth of the reference PLL.
		''' 
		''' </summary>
		Public Function SetRefPllBandwidth(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.RefPllBandwidth, channel, value)
		End Function
		''' <summary>
		'''Configures the loop bandwidth of the reference PLL.
		''' 
		''' </summary>
		Public Function GetRefPllBandwidth(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.RefPllBandwidth, channel, value)
		End Function

        ''' <summary>
		'''Specifies the marker event at which RF blanking occurs. RF blanking quickly attenuates the RF OUT signal.    Use marker events to toggle the state of RF blanking. The RF Output always starts in the unblanked state. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    You can specify marker events by using scripts to trigger blanking at a certain point in a waveform.    For example, if you set this attribute to NIRFSG_VAL_MARKER0, and marker0 occurs on samples 1,000    and 2,000 of a script, then the RF Output will be blanked (attenuated) between samples 1,000 and 2,000. 
		'''    Note: The shortest supported blanking interval is eight microseconds. 
		''' 
		''' </summary>
		Public Function SetRfBlankingSource(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.RfBlankingSource, channel, value)
		End Function
        ''' <summary>
		'''Specifies the marker event at which RF blanking occurs. RF blanking quickly attenuates the RF OUT signal.    Use marker events to toggle the state of RF blanking. The RF Output always starts in the unblanked state. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    You can specify marker events by using scripts to trigger blanking at a certain point in a waveform.    For example, if you set this attribute to NIRFSG_VAL_MARKER0, and marker0 occurs on samples 1,000    and 2,000 of a script, then the RF Output will be blanked (attenuated) between samples 1,000 and 2,000. 
		'''    Note: The shortest supported blanking interval is eight microseconds. 
		''' 
		''' </summary>
		Public Function GetRfBlankingSource(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.RfBlankingSource, channel, value)
		End Function
		''' <summary>
		'''Returns the name of the fully-qualified signal name as a string.
		''' 
		''' </summary>
		Public Function GetScriptTriggerTerminalName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.ScriptTriggerTerminalName, channel, value)
		End Function

		''' <summary>
		'''Specifies the script trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		''' 
		''' </summary>
		Public Function SetScriptTriggerType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.ScriptTriggerType, channel, value)
		End Function

		''' <summary>
		'''Specifies the script trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
		''' 
		''' </summary>
		Public Function GetScriptTriggerType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.ScriptTriggerType, channel, value)
		End Function

		''' <summary>
		'''Specifies the script in onboard memory to generate upon calling the   niRFSG_Initiate function when NIRFSG_ATTR_GENERATION_MODE is set to   NIRFSG_VAL_SCRIPT.  
		'''   The NIRFSG_ATTR_SELECTED_SCRIPT attribute is ignored   when the NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_CW. To set the   NIRFSG_ATTR_SELECTED_SCRIPT attribute, the NI-RFSG device must be in the   Configuration state.
		''' 
		''' </summary>
		Public Function SetSelectedScript(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.SelectedScript, channel, value)
		End Function

		''' <summary>
		'''Specifies the script in onboard memory to generate upon calling the   niRFSG_Initiate function when NIRFSG_ATTR_GENERATION_MODE is set to   NIRFSG_VAL_SCRIPT.  
		'''   The NIRFSG_ATTR_SELECTED_SCRIPT attribute is ignored   when the NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_CW. To set the   NIRFSG_ATTR_SELECTED_SCRIPT attribute, the NI-RFSG device must be in the   Configuration state.
		''' 
		''' </summary>
		Public Function GetSelectedScript(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SelectedScript, channel, value)
		End Function

		''' <summary>
		'''Indicates in degrees Celsius the temperature of the device at the time of   the last self calibration. 
		''' 
		''' </summary>
		Public Function GetSelfCalibrationTemperature(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.SelfCalibrationTemperature, channel, value)
		End Function

		''' <summary>
		'''Returns the serial number of the RF module.
		''' 
		''' </summary>
		Public Function GetSerialNumber(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SerialNumber, channel, value)
		End Function

		''' <summary>
		'''Specifies the bandwidth of the arbitrary signal. 
		'''   This value must be less than or equal to (0.8 * IQ rate).  
		''' 
		''' </summary>
		Public Function SetSignalBandwidth(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.SignalBandwidth, channel, value)
		End Function

		''' <summary>
		'''Specifies the bandwidth of the arbitrary signal. 
		'''   This value must be less than or equal to (0.8 * IQ rate).  
		''' 
		''' </summary>
		Public Function GetSignalBandwidth(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.SignalBandwidth, channel, value)
		End Function

		''' <summary>
		'''Returns whether NI-RFSG simulates I/O operations. This attribute   is useful for debugging applications without using hardware.   Once a session is opened, you cannot change the simulation state.   Use the niRFSG_InitWithOptions function to enable simulation.
		''' 
		''' </summary>
		Public Function GetSimulate(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.Simulate, channel, value)
		End Function

		''' <summary>
		'''Returns the major version number of the class specification with which   NI-RFSG is compliant.
		''' 
		''' </summary>
		Public Function GetSpecificDriverClassSpecMajorVersion(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.SpecificDriverClassSpecMajorVersion, channel, value)
		End Function

		''' <summary>
		'''Returns the minor version number of the class specification with which   NI-RFSG is compliant.
		''' 
		''' </summary>
		Public Function GetSpecificDriverClassSpecMinorVersion(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.SpecificDriverClassSpecMinorVersion, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains a brief description of NI-RFSG.
		''' 
		''' </summary>
		Public Function GetSpecificDriverDescription(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SpecificDriverDescription, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the prefix for NI-RFSG. The name of each   user-callable function in NI-RFSG starts with this prefix.
		''' 
		''' </summary>
		Public Function GetSpecificDriverPrefix(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SpecificDriverPrefix, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains additional version information about   NI-RFSG.
		''' 
		''' </summary>
		Public Function GetSpecificDriverRevision(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SpecificDriverRevision, channel, value)
		End Function

		''' <summary>
		'''Returns a string that contains the name of the vendor that supplies   NI-RFSG.
		''' 
		''' </summary>
		Public Function GetSpecificDriverVendor(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SpecificDriverVendor, channel, value)
		End Function

		''' <summary>
		'''Returns the name of the fully-qualified signal name as a string. 
		''' 
		''' </summary>
		Public Function GetStartedEventTerminalName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.StartedEventTerminalName, channel, value)
		End Function

		''' <summary>
		'''Returns the name of the fully-qualified signal name as a string.
		''' 
		''' </summary>
		Public Function GetStartTriggerTerminalName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.StartTriggerTerminalName, channel, value)
		End Function

		''' <summary>
		'''Specifies the start trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function SetStartTriggerType(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.StartTriggerType, channel, value)
		End Function

		''' <summary>
		'''Specifies the start trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration state.
		''' 
		''' </summary>
		Public Function GetStartTriggerType(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.StartTriggerType, channel, value)
		End Function

		''' <summary>
		'''Enables or disables streaming of waveform data.
		''' 
		''' </summary>
		Public Function SetStreamingEnabled(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.StreamingEnabled, channel, value)
		End Function

		''' <summary>
		'''Enables or disables streaming of waveform data.
		''' 
		''' </summary>
		Public Function GetStreamingEnabled(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.StreamingEnabled, channel, value)
		End Function

		''' <summary>
		'''Indicates the space available in samples in the streaming   waveform for writing new data. For optimal performance, write   new data to the waveform in a fixed size that is an integer   divisor of the total size of the streaming waveform.   This waveform size ensures that writes do not have to wrap   around from the end to the beginning of the waveform buffer. 
		'''   To read this attribute, the NI-RFSG device must be in   the Committed state. 
		'''   Units: Samples 
		''' 
		''' </summary>
		Public Function GetStreamingSpaceAvailableInWaveform(channel As String, ByRef value As Long) As Integer
			Return GetLong(niRFSGProperties.StreamingSpaceAvailableInWaveform, channel, value)
		End Function

		''' <summary>
		'''Specifies the name of the waveform used to continuously stream data during   generation.
		''' 
		''' </summary>
		Public Function SetStreamingWaveformName(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.StreamingWaveformName, channel, value)
		End Function

		''' <summary>
		'''Specifies the name of the waveform used to continuously stream data during   generation.
		''' 
		''' </summary>
		Public Function GetStreamingWaveformName(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.StreamingWaveformName, channel, value)
		End Function

		''' <summary>
		'''Indicates the maximum amount of time allowed to complete a streaming write operation.
		''' 
		''' </summary>
		Public Function SetStreamingWriteTimeout(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.StreamingWriteTimeout, channel, value)
		End Function

		''' <summary>
		'''Indicates the maximum amount of time allowed to complete a streaming write operation.
		''' 
		''' </summary>
		Public Function GetStreamingWriteTimeout(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.StreamingWriteTimeout, channel, value)
		End Function

		''' <summary>
		'''Returns a model code of the NI-RFSG device.   For drivers that support more than one device,   this attribute contains a comma-separated list of supported devices. 
		''' 
		''' </summary>
		Public Function GetSupportedInstrumentModels(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SupportedInstrumentModels, channel, value)
		End Function

        ''' <summary>
		'''Specifies which external trigger line distributes the Sample Clock sync signal.    When synchronizing the Sample Clock, configure all devices to use the same Sample Clock sync distribution line.
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
		''' 
		''' </summary>
		Public Function GetSyncSampleClockDistLine(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SyncSampleClockDistLine, channel, value)
		End Function

        ''' <summary>
		'''Specifies which external trigger line distributes the Sample Clock sync signal.    When synchronizing the Sample Clock, configure all devices to use the same Sample Clock sync distribution line.
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
		''' 
		''' </summary>
		Public Function SetSyncSampleClockDistLine(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.SyncSampleClockDistLine, channel, value)
		End Function

        ''' <summary>
		'''Specifies whether the device is the master device when synchronizing the Sample Clock between multiple devices. 
		'''    The master device distributes the Sample Clock sync signal to all devices in the system through the Sample     Clock sync distribution line. 
		'''    When synchronizing the Sample Clock, one device must always be designated as the master.    The master device actively drives the Sample Clock sync distribution line. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
		''' 
		''' </summary>
		Public Function GetSyncSampleClockMaster(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.SyncSampleClockMaster, channel, value)
		End Function
        ''' <summary>
		'''Specifies whether the device is the master device when synchronizing the Sample Clock between multiple devices. 
		'''    The master device distributes the Sample Clock sync signal to all devices in the system through the Sample     Clock sync distribution line. 
		'''    When synchronizing the Sample Clock, one device must always be designated as the master.    The master device actively drives the Sample Clock sync distribution line. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state.
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
		''' 
		''' </summary>
		Public Function SetSyncSampleClockMaster(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.SyncSampleClockMaster, channel, value)
		End Function

        ''' <summary>
		'''Specifies which external trigger line distributes the synchronized Script Trigger signal.    When synchronizing the Script Trigger, configure all devices to use the same Script Trigger distribution line. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function GetSyncScriptTriggerDistLine(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SyncScriptTriggerDistLine, channel, value)
		End Function

        ''' <summary>
		'''Specifies which external trigger line distributes the synchronized Script Trigger signal.    When synchronizing the Script Trigger, configure all devices to use the same Script Trigger distribution line. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function SetSyncScriptTriggerDistLine(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.SyncScriptTriggerDistLine, channel, value)
		End Function

        ''' <summary>
		'''Specifies whether the device is the master device when synchronizing the Script Trigger between multiple devices. 
		'''    The master device distributes the synchronized Script Trigger to all devices in the system through the Script Trigger distribution line. 
		'''    When synchronizing the Script Trigger, one device must always be designated as the master.    The master device actively drives the Script Trigger distribution line. For slave devices, set the    NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute to NIRFSG_VAL_DIGITAL_EDGE, and set the    NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_SOURCE attribute to sync_script. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function GetSyncScriptTriggerMaster(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.SyncScriptTriggerMaster, channel, value)
		End Function

        ''' <summary>
		'''Specifies whether the device is the master device when synchronizing the Script Trigger between multiple devices. 
		'''    The master device distributes the synchronized Script Trigger to all devices in the system through the Script Trigger distribution line. 
		'''    When synchronizing the Script Trigger, one device must always be designated as the master.    The master device actively drives the Script Trigger distribution line. For slave devices, set the    NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute to NIRFSG_VAL_DIGITAL_EDGE, and set the    NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_SOURCE attribute to sync_script. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function SetSyncScriptTriggerMaster(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.SyncScriptTriggerMaster, channel, value)
		End Function

		''' <summary>
		'''Specifies which external trigger line distributes the synchronized Start Trigger signal. When synchronizing the Start Trigger,    configure all devices to use the same Start Trigger distribution line. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function GetSyncStartTriggerDistLine(channel As String, ByRef value As String) As Integer
			Return GetString(niRFSGProperties.SyncStartTriggerDistLine, channel, value)
		End Function

        ''' <summary>
		'''Specifies which external trigger line distributes the synchronized Start Trigger signal. When synchronizing the Start Trigger,    configure all devices to use the same Start Trigger distribution line. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function SetSyncStartTriggerDistLine(channel As String, value As String) As Integer
			Return SetString(niRFSGProperties.SyncStartTriggerDistLine, channel, value)
		End Function

        ''' <summary>
		'''Specifies whether the device is the master device when synchronizing the Start Trigger between multiple devices. 
		'''    The master device distributes the synchronized Start Trigger to all devices in the system through the Start Trigger distribution line. 
		'''    When synchronizing the Start Trigger, one device must always be designated as the master.    The master device actively drives the Start Trigger distribution line. For slave devices, set the NIRFSG_ATTR_START_TRIGGER_TYPE    attribute to NIRFSG_VAL_DIGITAL_EDGE, and set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to sync_script. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function GetSyncStartTriggerMaster(channel As String, ByRef value As Boolean) As Integer
			Return GetBoolean(niRFSGProperties.SyncStartTriggerMaster, channel, value)
		End Function

        ''' <summary>
		'''Specifies whether the device is the master device when synchronizing the Start Trigger between multiple devices. 
		'''    The master device distributes the synchronized Start Trigger to all devices in the system through the Start Trigger distribution line. 
		'''    When synchronizing the Start Trigger, one device must always be designated as the master.    The master device actively drives the Start Trigger distribution line. For slave devices, set the NIRFSG_ATTR_START_TRIGGER_TYPE    ibute to NIRFSG_VAL_DIGITAL_EDGE, and set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to sync_script. 
		'''    To set this attribute, the NI-RFSG device must be in the Configuration state. 
		'''    Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
		''' 
		''' </summary>
		Public Function SetSyncStartTriggerMaster(channel As String, value As Boolean) As Integer
			Return SetBoolean(niRFSGProperties.SyncStartTriggerMaster, channel, value)
		End Function

		''' <summary>
		'''Specifies the time before the timer emits an event    after the task is started and the time interval    between Timer events after the first one. 
		''' 
		''' </summary>
		Public Function SetTimerEventInterval(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.TimerEventInterval, channel, value)
		End Function

		''' <summary>
		'''Specifies the time before the timer emits an event    after the task is started and the time interval    between Timer events after the first one. 
		''' 
		''' </summary>
		Public Function GetTimerEventInterval(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.TimerEventInterval, channel, value)
		End Function

		''' <summary>
		'''Indicates the center frequency of the passband containing the upconverted   RF signal.  Writing a value to this attribute while using the    NI 5672/5673/5673E device enables in-band retuning.    In-band retuning increases the speed of   frequency sweeps by reducing the amount of upconverter retunes. 
		'''   This attribute is read-write on the NI 5610/5611/5672/5673/5673E and read-only   on the NI 5670/5671.  This attribute is resettable only on the NI 5673/5673E. 
		'''   Units: Hz 
		''' 
		''' </summary>
		Public Function SetUpconverterCenterFrequency(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.UpconverterCenterFrequency, channel, value)
		End Function

		''' <summary>
		'''Indicates the center frequency of the passband containing the upconverted   RF signal.  Writing a value to this attribute while using the    NI 5672/5673/5673E device enables in-band retuning.    In-band retuning increases the speed of   frequency sweeps by reducing the amount of upconverter retunes. 
		'''   This attribute is read-write on the NI 5610/5611/5672/5673/5673E and read-only   on the NI 5670/5671.  This attribute is resettable only on the NI 5673/5673E. 
		'''   Units: Hz 
		''' 
		''' </summary>
		Public Function GetUpconverterCenterFrequency(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.UpconverterCenterFrequency, channel, value)
		End Function

		''' <summary>
		'''Specifies which upconverter center frequencies are used. This attribute   can be used to increase the speed of frequency sweeps by reducing the   number of times the upconverter is retuned. 
		''' 
		''' </summary>
		Public Function SetUpconverterCenterFrequencyIncrement(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.UpconverterCenterFrequencyIncrement, channel, value)
		End Function

		''' <summary>
		'''Specifies which upconverter center frequencies are used. This attribute   can be used to increase the speed of frequency sweeps by reducing the   number of times the upconverter is retuned. 
		''' 
		''' </summary>
		Public Function GetUpconverterCenterFrequencyIncrement(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.UpconverterCenterFrequencyIncrement, channel, value)
		End Function

		''' <summary>
		'''Specifies the reference point for the upconverter center frequencies to   use.This attribute can be used to speed up frequency sweeps by reducing   the number of times the upconverter is retuned. 
		''' 
		''' </summary>
		Public Function SetUpconverterCenterFrequencyIncrementAnchor(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.UpconverterCenterFrequencyIncrementAnchor, channel, value)
		End Function

		''' <summary>
		'''Specifies the reference point for the upconverter center frequencies to   use.This attribute can be used to speed up frequency sweeps by reducing   the number of times the upconverter is retuned. 
		''' 
		''' </summary>
		Public Function GetUpconverterCenterFrequencyIncrementAnchor(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.UpconverterCenterFrequencyIncrementAnchor, channel, value)
		End Function

        ''' <summary>
		'''This attribute offsets the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY from the RF frequency.    Use this attribute to keep the local oscillator (LO) leakage at a determined offset from the RF signal. 
		'''    Note: You cannot set the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute or    the NIRFSG_ATTR_ARB_CARRIER_FREQUENCY attribute at the same time as the NIRFSG_ATTR_UPCONVERTER_FREQUENCY_OFFSET attribute. 
		'''    Note: Resetting this attribute disables the upcoverter frequency offset. 
		''' 
		''' </summary>
		Public Function SetUpconverterFrequencyOffset(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.UpconverterFrequencyOffset, channel, value)
		End Function
        ''' <summary>
		'''This attribute offsets the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY from the RF frequency.    Use this attribute to keep the local oscillator (LO) leakage at a determined offset from the RF signal. 
		'''    Note: You cannot set the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute or    the NIRFSG_ATTR_ARB_CARRIER_FREQUENCY attribute at the same time as the NIRFSG_ATTR_UPCONVERTER_FREQUENCY_OFFSET attribute. 
		'''    Note: Resetting this attribute disables the upcoverter frequency offset. 
		''' 
		''' </summary>
		Public Function GetUpconverterFrequencyOffset(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.UpconverterFrequencyOffset, channel, value)
		End Function

		''' <summary>
		'''Specifies the gain the upconverter applies to the signal. 
		'''   Units: dB 
		'''   Note: This attribute is read/write on the NI 5610/5611 and   read-only on the NI 5670/5671/5672/5673/5673E. 
		''' 
		''' </summary>
		Public Function SetUpconverterGain(channel As String, value As Double) As Integer
			Return SetDouble(niRFSGProperties.UpconverterGain, channel, value)
		End Function

		''' <summary>
		'''Specifies the gain the upconverter applies to the signal. 
		'''   Units: dB 
		'''   Note: This attribute is read/write on the NI 5610/5611 and   read-only on the NI 5670/5671/5672/5673/5673E. 
		''' 
		''' </summary>
		Public Function GetUpconverterGain(channel As String, ByRef value As Double) As Integer
			Return GetDouble(niRFSGProperties.UpconverterGain, channel, value)
		End Function

		Public Function GetUserData(Channel_Name As String, bufferSize As Integer, ByRef data As Char(), ByRef actualDataSize As Integer) As Integer
			Return PInvoke.GetUserData(Me._handle, Channel_Name, bufferSize, data, actualDataSize)
		End Function

		Public Function SetUserData(Channel_Name As String, bufferSize As Integer, data As Char()) As Integer
			Return PInvoke.SetUserData(Me._handle, Channel_Name, bufferSize, data)
		End Function

		''' <summary>
		'''Adjusts the dynamics of the current driving the YIG main coil.
		'''    Note: Setting this attribute to NIRFSG_VAL_FAST on the NI 5653    allows the frequency to settle significantly faster for some frequency    transitions at the expense of increased phase noise. 
		''' 
		''' </summary>
		Public Function SetYigMainCoilDrive(channel As String, value As Integer) As Integer
			Return SetInt32(niRFSGProperties.YigMainCoilDrive, channel, value)
		End Function

		''' <summary>
		'''Adjusts the dynamics of the current driving the YIG main coil.
		'''    Note: Setting this attribute to NIRFSG_VAL_FAST on the NI 5653    allows the frequency to settle significantly faster for some frequency    transitions at the expense of increased phase noise. 
		''' 
		''' </summary>
		Public Function GetYigMainCoilDrive(channel As String, ByRef value As Integer) As Integer
			Return GetInt32(niRFSGProperties.YigMainCoilDrive, channel, value)
		End Function

		#Region "OldGetMethods - retained only for backward compatibility"
		Public Function GetInt32(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String) As Integer
			Dim val As Integer
			PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViInt32(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
			Return val
		End Function

		Public Function GetInt32(propertyId As niRFSGProperties) As Integer
			Return Me.GetInt32(propertyId, "")
		End Function

		Public Function GetLong(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String) As Long
			Dim val As Long
			PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViInt64(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
			Return val
		End Function

		Public Function GetLong(propertyId As niRFSGProperties) As Long
			Return Me.GetLong(propertyId, "")
		End Function

		Public Function GetDouble(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String) As Double
			Dim val As Double
			PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViReal64(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
			Return val
		End Function

		Public Function GetDouble(propertyId As niRFSGProperties) As Double
			Return Me.GetDouble(propertyId, "")
		End Function

		Public Function GetString(ByVal propertyId As niRFSGProperties) As String
            Return Me.GetString(propertyId, "")
        End Function

        Public Function GetString(ByVal propertyId As niRFSGProperties, ByVal repeatedCapabilityOrChannel As String) As String
            Dim newVal As New StringBuilder(&H200)
            Dim size As Integer = PInvoke.GetAttributeViString(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), &H200, newVal)
            If (size < 0) Then
                PInvoke.ThrowError(Me._handle, size)
            ElseIf (size > 0) Then
                newVal.Capacity = size
                PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViString(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), size, newVal))
            End If
            Return newVal.ToString
        End Function

		Public Function GetBoolean(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String) As Boolean
			Dim val As UShort
			PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViBoolean(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
			Return System.Convert.ToBoolean(val)
		End Function

		Public Function GetBoolean(propertyId As niRFSGProperties) As Boolean
			Return Me.GetBoolean(propertyId, "")
		End Function
		#End Region

		Public Function GetInt32(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, ByRef val As Integer) As Integer
			Return PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViInt32(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
		End Function

		Public Function GetInt32(propertyId As niRFSGProperties, ByRef val As Integer) As Integer
			Return Me.GetInt32(propertyId, "", val)
		End Function

		Public Function GetLong(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, ByRef val As Long) As Integer
			Return PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViInt64(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
		End Function

		Public Function GetLong(propertyId As niRFSGProperties, ByRef val As Long) As Integer
			Return Me.GetLong(propertyId, "", val)
		End Function

		Public Function GetDouble(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, ByRef val As Double) As Integer
			Return PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViReal64(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
		End Function

		Public Function GetDouble(propertyId As niRFSGProperties, ByRef val As Double) As Integer
			Return Me.GetDouble(propertyId, "", val)
		End Function

        Public Function GetString(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, ByRef val As String) As Integer
            val = String.Empty
            Dim pInvokeResult As Integer = 0
            Dim newVal As New System.Text.StringBuilder(512)
            Dim size As Integer = PInvoke.GetAttributeViString(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), 0, newVal)
            If (size < 0) Then
                Return PInvoke.ThrowError(Me._handle, size)
            Else
                If (size > 0) Then
                    newVal.Capacity = size
                    pInvokeResult = PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViString(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), size, newVal))
                    val = newVal.ToString()
                End If
            End If
            Return pInvokeResult
        End Function

        'Public Function GetString(propertyId As niRFSGProperties, ByRef val As String) As Integer
        '   Return Me.GetString(propertyId, "", val)
        'End Function

        Public Function GetBoolean(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, ByRef val As Boolean) As Integer
            Dim value As UShort
            Dim pInvokeResult As Integer = PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViBoolean(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), value))
            val = System.Convert.ToBoolean(value)
            Return pInvokeResult
        End Function

        Public Function GetBoolean(propertyId As niRFSGProperties, ByRef val As Boolean) As Integer
            Return Me.GetBoolean(propertyId, "", val)
        End Function

        Public Function SetInt32(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, val As Integer) As Integer
            Return PInvoke.TestForError(Me._handle, PInvoke.SetAttributeViInt32(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
        End Function

        Public Function SetInt32(propertyId As niRFSGProperties, val As Integer) As Integer
            Return Me.SetInt32(propertyId, "", val)
        End Function

        Public Function SetLong(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, val As Long) As Integer
            Return PInvoke.TestForError(Me._handle, PInvoke.SetAttributeViInt64(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
        End Function

        Public Function SetLong(propertyId As niRFSGProperties, val As Long) As Integer
            Return Me.SetLong(propertyId, "", val)
        End Function

        Public Function SetDouble(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, val As Double) As Integer
            Return PInvoke.TestForError(Me._handle, PInvoke.SetAttributeViReal64(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
        End Function

        Public Function SetDouble(propertyId As niRFSGProperties, val As Double) As Integer
            Return Me.SetDouble(propertyId, "", val)
        End Function

        Public Function SetString(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, val As String) As Integer
            Return PInvoke.TestForError(Me._handle, PInvoke.SetAttributeViString(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
        End Function

        Public Function SetString(propertyId As niRFSGProperties, val As String) As Integer
            Return Me.SetString(propertyId, "", val)
        End Function

        Public Function SetBoolean(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, val As Boolean) As Integer
            Return PInvoke.TestForError(Me._handle, PInvoke.SetAttributeViBoolean(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), System.Convert.ToUInt16(val)))
        End Function

        Public Function SetBoolean(propertyId As niRFSGProperties, val As Boolean) As Integer
            Return Me.SetBoolean(propertyId, "", val)
        End Function

        Public Function GetAttributeViSession(propertyId As niRFSGProperties, repeatedCapabilityOrChannel As String, ByRef val As System.IntPtr) As Integer	        
	        Return PInvoke.TestForError(Me._handle, PInvoke.GetAttributeViSession(Me._handle, repeatedCapabilityOrChannel, CInt(propertyId), val))
        End Function

        ''' <summary>
        ''' Retrieves and then clears the IVI error information for the session or the current execution thread.
        ''' 
        ''' </summary>
        '''<param name="code">
        ''' Specifies the error code.
        ''' 
        '''</param>
        '''<param name="msg">
        ''' Specifies the error message returned.
        ''' 
        '''</param>
        '''<returns>    
        ''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSG function to determine if an error has occurred.   
        ''' The general meaning of the status code is as follows:   
        ''' Value           Meaning 
        ''' 0               Success 
        ''' Positive Values Warnings    
        ''' Negative Values Errors  
        ''' </returns>
        Public Shared Function GetError(handle As HandleRef, code As Integer, msg As StringBuilder) As Integer
            Dim pInvokeResult As Integer = 0
            Dim size As Integer = PInvoke.GetError(handle, code, 0, Nothing)
            If (size >= 0) Then
                msg.Capacity = size
                pInvokeResult = PInvoke.GetError(handle, code, size, msg)
            End If
            PInvoke.TestForError(handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Retrieves and then clears the IVI error information for the session or the current execution thread.
        ''' 
        ''' </summary>
        '''<param name="code">
        ''' Specifies the error code.
        ''' 
        '''</param>
        '''<param name="msg">
        ''' Specifies the error message returned.
        ''' 
        '''</param>
        '''<returns>    
        ''' Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSG function to determine if an error has occurred.   
        ''' To obtain a text description of the status code and additional information about the error condition, call the niRFSG_GetError function.    
        ''' The general meaning of the status code is as follows:   
        ''' Value           Meaning 
        ''' 0               Success 
        ''' Positive Values Warnings    
        ''' Negative Values Errors  
        ''' </returns>
        Public Function GetError(code As Integer, msg As StringBuilder) As Integer
            Return niRFSG.GetError(Handle, code, msg)
        End Function

        ''' <summary>
        ''' Converts a status code returned by an NI-RFSG function into a user-readable string.
        ''' 
        ''' </summary>
        '''<param name="handle">
        ''' Identifies your instrument session. vi is obtained from the niRFSG_init or niRFSG_InitExtCal function and identifies a particular instrument session.
        ''' 
        '''</param>
        '''<param name="code">
        ''' Passes the Status parameter that is returned from any NI-RFSG function. The default value is 0 (VI_SUCCESS).
        ''' 
        '''</param>
        '''<param name="msg">
        ''' Returns the user-readable message string that corresponds to the status code you specify.
        ''' 
        '''</param>
        '''<returns>
        ''' Converts a status code returned by an NI-RFSG function into a user-readable string.
        ''' 
        '''</returns>
        Public Shared Function ErrorMessage(handle As HandleRef, code As Integer, msg As StringBuilder) As Integer
            msg.Capacity = maxErrorMessageSize
            Dim pInvokeResult As Integer = PInvoke.error_message(handle, code, msg)
            PInvoke.TestForError(handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' Converts a status code returned by an NI-RFSG function into a user-readable string.
        ''' 
        ''' </summary>
        '''<param name="code">
        ''' Passes the Status parameter that is returned from any NI-RFSG function. The default value is 0 (VI_SUCCESS).
        ''' 
        '''</param>
        '''<param name="msg">
        ''' Returns the user-readable message string that corresponds to the status code you specify.
        ''' 
        '''</param>
        '''<returns>
        ''' Converts a status code returned by an NI-RFSG function into a user-readable string.
        ''' 
        '''</returns>:
        Public Function ErrorMessage(code As Integer, msg As StringBuilder) As Integer
            Return niRFSG.ErrorMessage(Handle, code, msg)
        End Function

        #Region "17.1"

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="name"></param>
        ''' <param name="relativeTo"></param>
        ''' <param name="offset"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function SetArbWaveformNextWritePosition(name As String, relativeTo As Integer, offset As Integer) As Integer
            Dim pInvokeResult As Integer = PInvoke.SetArbWaveformNextWritePosition(Me._handle, name, relativeTo, offset)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        #End Region

        #Region "Missing SetGetMethodsForAttributes 14.5, 16.0 & 17.1"

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetPulseModulationMode(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.PulseModulationMode, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetPulseModulationMode(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.PulseModulationMode, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAnalogModulationFmBand(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.AnalogModulationFmBand, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAnalogModulationFmBand(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.AnalogModulationFmBand, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAnalogModulationFmNarrowbandIntegrator(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.AnalogModulationFmNarrowbandIntegrator, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAnalogModulationFmNarrowbandIntegrator(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.AnalogModulationFmNarrowbandIntegrator, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAnalogModulationFmSensitivity(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.AnalogModulationFmSensitivity, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAnalogModulationFmSensitivity(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AnalogModulationFmSensitivity, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAnalogModulationAmSensitivity(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.AnalogModulationAmSensitivity, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAnalogModulationAmSensitivity(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AnalogModulationAmSensitivity, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAnalogModulationPmSensitivity(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.AnalogModulationPmSensitivity, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAnalogModulationPmSensitivity(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AnalogModulationPmSensitivity, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAnalogModulationPmMode(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.AnalogModulationPmMode, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAnalogModulationPmMode(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.AnalogModulationPmMode, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetExportedConfigurationSettledEventOutputTerminal(ByVal channel As String, ByVal value As String) As Integer
            Return SetString(niRFSGProperties.ExportedConfigurationSettledEventOutputTerminal, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetExportedConfigurationSettledEventOutputTerminal(ByVal channel As String, ByRef value As String) As Integer
            Return GetString(niRFSGProperties.ExportedConfigurationSettledEventOutputTerminal, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetConfigurationSettledEventTerminalName(ByVal channel As String, ByVal value As String) As Integer
            Return SetString(niRFSGProperties.ConfigurationSettledEventTerminalName, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetConfigurationSettledEventTerminalName(ByVal channel As String, ByRef value As String) As Integer
            Return GetString(niRFSGProperties.ConfigurationSettledEventTerminalName, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAeTemperature(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AeTemperature, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAmplitudeSettling(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.AmplitudeSettling, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAmplitudeSettling(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AmplitudeSettling, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetCorrectionTemperature(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.CorrectionTemperature, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetCorrectionTemperature(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.CorrectionTemperature, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAlcControl(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.AlcControl, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAlcControl(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.AlcControl, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAutoPowerSearch(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.AutoPowerSearch, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAutoPowerSearch(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.AutoPowerSearch, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAmpPath(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.AmpPath, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAmpPath(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.AmpPath, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAttenuatorSetting(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.AttenuatorSetting, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAttenuatorSetting(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AttenuatorSetting, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetFastTuningOption(ByVal channel As String, ByRef value As Boolean) As Integer
            Return GetBoolean(niRFSGProperties.FastTuningOption, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetConfigurationListRepeat(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.ConfigurationListRepeat, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetConfigurationListRepeat(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.ConfigurationListRepeat, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetConfigurationListIsDone(ByVal channel As String, ByRef value As Boolean) As Integer
            Return GetBoolean(niRFSGProperties.ConfigurationListIsDone, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetMarkerEventOutputBehaviour(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.MarkerEventOutputBehaviour, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetMarkerEventOutputBehaviour(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.MarkerEventOutputBehaviour, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetMarkerEventPulseWidth(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.MarkerEventPulseWidth, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetMarkerEventPulseWidth(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.MarkerEventPulseWidth, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetMarkerEventPulseWidthUnits(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.MarkerEventPulseWidthUnits, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetMarkerEventPulseWidthUnits(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.MarkerEventPulseWidthUnits, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetMarkerEventToggleInitialState(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.MarkerEventToggleInitialState, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetMarkerEventToggleInitialState(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.MarkerEventToggleInitialState, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetArbDigitalGain(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.ArbDigitalGain, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetArbDigitalGain(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.ArbDigitalGain, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetFpgaTemperature(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.FpgaTemperature, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetTemperatureReadInterval(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.TemperatureReadInterval, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetTemperatureReadInterval(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.TemperatureReadInterval, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetPeakPowerAdjustmentInheritance(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.PeakPowerAdjustmentInheritance, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetPeakPowerAdjustmentInheritance(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.PeakPowerAdjustmentInheritance, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetModulePowerConsumption(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.ModulePowerConsumption, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetRelativeDelay(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.RelativeDelay, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetRelativeDelay(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.RelativeDelay, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetAbsoluteDelay(ByVal channel As String, ByVal value As Double) As Integer
            Return SetDouble(niRFSGProperties.AbsoluteDelay, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetAbsoluteDelay(ByVal channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AbsoluteDelay, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function SetOverflowErrorReporting(ByVal channel As String, ByVal value As Integer) As Integer
            Return SetInt32(niRFSGProperties.OverflowErrorReporting, channel, value)
        End Function

        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="channel"></param>
        ''' <param name="value"></param>
        ''' <returns></returns>
        Public Function GetOverflowErrorReporting(ByVal channel As String, ByRef value As Integer) As Integer
            Return GetInt32(niRFSGProperties.OverflowErrorReporting, channel, value)
        End Function

		#Region "SetGetAttributeMethods 18.1"

		''' <summary>
		''' 
		''' </summary>
		''' <param name="channel"></param>
		''' <param name="value"></param>
		''' <returns></returns>
		Public Function SetThermalCorrectionTemperatureResolution(channel As String, value As Double) As Integer
			Return Me.SetDouble(niRFSGProperties.AttrThermalCorrectionTemperatureResolution, channel, value)
		End Function

		''' <summary>
		''' 
		''' </summary>
		''' <param name="channel"></param>
		''' <param name="value"></param>
		''' <returns></returns>
		Public Function GetThermalCorrectionTemperatureResolution(channel As String, ByRef value As Double) As Integer
			Return Me.GetDouble(niRFSGProperties.AttrThermalCorrectionTemperatureResolution, channel, value)
		End Function

		''' <summary>
		'''
		''' </summary>
		Public Function SetRFInLOExportEnabled(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSGProperties.AttrRFInLOExportEnabled, channel, value)
		End Function
		''' <summary>
		'''
		''' </summary>
		Public Function GetRFInLOExportEnabled(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSGProperties.AttrRFInLOExportEnabled, channel, value)
		End Function

		''' <summary>
		'''
		''' </summary>
		Public Function SetLOOutExportConfigureFromRfsa(channel As String, value As Integer) As Integer
			Return Me.SetInt32(niRFSGProperties.AttrLOOutExportConfigureFromRfsa, channel, value)
		End Function
		''' <summary>
		'''
		''' </summary>
		Public Function GetLOOutExportConfigureFromRfsa(channel As String, ByRef value As Integer) As Integer
			Return Me.GetInt32(niRFSGProperties.AttrLOOutExportConfigureFromRfsa, channel, value)
		End Function

		#End Region

        #Region "SetGetAttributeMethods 18.2"

        ''' <summary>
        ''' Sets the type of de-embedding to apply to measurements.
        ''' </summary>
        Public Function SetDeembeddingType(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSGProperties.AttrDeembeddingType, channel, value)
        End Function
        ''' <summary>
        ''' Gets the type of de-embedding to apply to measurements.
        ''' </summary>
        Public Function GetDeembeddingType(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSGProperties.AttrDeembeddingType, channel, value)
        End Function

        ''' <summary>
        ''' Sets the de-embedding table to apply to the measurements.
        ''' </summary>
        Public Function SetDeembeddingSelectedTable(channel As String, value As String) As Integer
            Return Me.SetString(niRFSGProperties.AttrDeembeddingSelectedTable, channel, value)
        End Function
        ''' <summary>
        ''' Gets the de-embedding table to apply to the measurements.
        ''' </summary>
        Public Function GetDeembeddingSelectedTable(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSGProperties.AttrDeembeddingSelectedTable, channel, value)
        End Function

        ''' <summary>
        ''' Sets which port to configure to acquire a signal.
        ''' </summary>
        Public Function SetSelectedPorts(channel As String, value As String) As Integer
            Return Me.SetString(niRFSGProperties.AttrSelectedPorts, channel, value)
        End Function

        ''' <summary>
        ''' Gets which port to configure to acquire a signal.
        ''' </summary>
        Public Function GetSelectedPorts(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSGProperties.AttrSelectedPorts, channel, value)
        End Function

        ''' <summary>
        ''' Gets a comma-separated list of the ports available for use based on your instrument configuration.
        ''' </summary>
        Public Function GetAvailablePorts(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSGProperties.AttrAvailablePorts, channel, value)
        End Function

        ''' <summary>
        ''' Gets a string that contains the name of the FPGA target being used. This name can be used with the RIO open session to open a reference to the FPGA.
        ''' </summary>
        Public Function GetFpgaTargetName(channel As String, ByRef value As String) As Integer
            Return Me.GetString(niRFSGProperties.AttrFpgaTargetName, channel, value)
        End Function

        ''' <summary>
        ''' Sets the bandwidth of the device. The instantaneous bandwidth is the effective real-time bandwidth of the signal path for your configuration.
        ''' </summary>
        Public Function SetDeviceInstantaneousBandwidth(channel As String, value As Double) As Integer
            Return SetDouble(niRFSGProperties.AttrDeviceInstantaneousBandwidth, channel, value)
        End Function

        ''' <summary>
        ''' Gets the bandwidth of the device. The instantaneous bandwidth is the effective real-time bandwidth of the signal path for your configuration.
        ''' </summary>
        Public Function GetDeviceInstantaneousBandwidth(channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AttrDeviceInstantaneousBandwidth, channel, value)
        End Function

        ''' <summary>
        ''' Sets the frequency of the LO source.
        ''' </summary>
        Public Function SetLOFrequency(channel As String, value As Double) As Integer
            Return SetDouble(niRFSGProperties.AttrLOFrequency, channel, value)
        End Function

        ''' <summary>
        ''' Gets the frequency of the LO source.
        ''' </summary>
        Public Function GetLOFrequency(channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AttrLOFrequency, channel, value)
        End Function

        ''' <summary>
        ''' Sets the step size for tuning the internal voltage-controlled oscillator (VCO) used to generate the LO signal.
        ''' </summary>
        Public Function SetLOVcoFrequencyStepSize(channel As String, value As Double) As Integer
            Return SetDouble(niRFSGProperties.AttrLOVcoFrequencyStepSize, channel, value)
        End Function

        ''' <summary>
        ''' Gets the step size for tuning the internal voltage-controlled oscillator (VCO) used to generate the LO signal.
        ''' </summary>
        Public Function GetLOVcoFrequencyStepSize(channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AttrLOVcoFrequencyStepSize, channel, value)
        End Function

        ''' <summary>
        ''' Sets whether to allow NI-RFSG to select the upconverter frequency offset. You can either set an offset yourself or let NI-RFSG set one for you.
        ''' </summary>
        Public Function SetUpconverterFrequencyOffsetMode(channel As String, value As Integer) As Integer
            Return Me.SetInt32(niRFSGProperties.AttrUpconverterFrequencyOffsetMode, channel, value)
        End Function
        ''' <summary>
        ''' Gets whether to allow NI-RFSG to select the upconverter frequency offset. You can either set an offset yourself or let NI-RFSG set one for you.
        ''' </summary>
        Public Function GetUpconverterFrequencyOffsetMode(channel As String, ByRef value As Integer) As Integer
            Return Me.GetInt32(niRFSGProperties.AttrUpconverterFrequencyOffsetMode, channel, value)
        End Function

        ''' <summary>
        ''' Specifies the expected thermal operating range of the instrument from the self-calibration temperature, in degrees Celsius, returned from the DeviceTemperature property.
        ''' </summary>
        Public Function SetThermalCorrectionHeadroomRange(channel As String, value As Double) As Integer
            Return SetDouble(niRFSGProperties.AttrThermalCorrectionHeadroomRange, channel, value)
        End Function

        ''' <summary>
        ''' Specifies the expected thermal operating range of the instrument from the self-calibration temperature, in degrees Celsius, returned from the DeviceTemperature property.
        ''' </summary>
        Public Function GetThermalCorrectionHeadroomRange(channel As String, ByRef value As Double) As Integer
            Return GetDouble(niRFSGProperties.AttrThermalCorrectionHeadroomRange, channel, value)
        End Function

        #End Region

        #End Region

        Private Class PInvoke
            Const nativeDllName32 As String = "niRFSG.dll"

            Private Const nativeDllName64 As String = "niRFSG_64.dll"
			Private Const vstModuleName As String = "niVSTSelfCal.dll"

            ' Define the readonly field to check for process' bitness.
            Private Shared ReadOnly Is64BitProcess As Boolean = (IntPtr.Size = 8)


            <DllImport(nativeDllName32, EntryPoint:="niRFSG_init", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function init32(Resource_Name As String, ID_Query As UShort, Reset As UShort, ByRef Instrument_Handle As System.IntPtr) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_init", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function init64(Resource_Name As String, ID_Query As UShort, Reset As UShort, ByRef Instrument_Handle As System.IntPtr) As Integer
            End Function

            Public Shared Function init(Resource_Name As String, ID_Query As UShort, Reset As UShort, ByRef Instrument_Handle As System.IntPtr) As Integer
                If Is64BitProcess Then
                    Return init64(Resource_Name, ID_Query, Reset, Instrument_Handle)
                Else
                    Return init32(Resource_Name, ID_Query, Reset, Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_InitWithOptions", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function InitWithOptions32(Resource_Name As String, ID_Query As UShort, Reset As UShort, Option_String As String, ByRef Instrument_Handle As System.IntPtr) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_InitWithOptions", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function InitWithOptions64(Resource_Name As String, ID_Query As UShort, Reset As UShort, Option_String As String, ByRef Instrument_Handle As System.IntPtr) As Integer
            End Function

            Public Shared Function InitWithOptions(Resource_Name As String, ID_Query As UShort, Reset As UShort, Option_String As String, ByRef Instrument_Handle As System.IntPtr) As Integer
                If Is64BitProcess Then
                    Return InitWithOptions64(Resource_Name, ID_Query, Reset, Option_String, Instrument_Handle)
                Else
                    Return InitWithOptions32(Resource_Name, ID_Query, Reset, Option_String, Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureRF", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureRF32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Frequency As Double, Power_Level As Double) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureRF", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureRF64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Frequency As Double, Power_Level As Double) As Integer
            End Function

            Public Shared Function ConfigureRF(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Frequency As Double, Power_Level As Double) As Integer
                If Is64BitProcess Then
                    Return ConfigureRF64(Instrument_Handle, Frequency, Power_Level)
                Else
                    Return ConfigureRF32(Instrument_Handle, Frequency, Power_Level)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureGenerationMode", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureGenerationMode32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Generation_Mode As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureGenerationMode", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureGenerationMode64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Generation_Mode As Integer) As Integer
            End Function

            Public Shared Function ConfigureGenerationMode(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Generation_Mode As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigureGenerationMode64(Instrument_Handle, Generation_Mode)
                Else
                    Return ConfigureGenerationMode32(Instrument_Handle, Generation_Mode)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_AllocateArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function AllocateArbWaveform32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Size_In_Samples As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_AllocateArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function AllocateArbWaveform64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Size_In_Samples As Integer) As Integer
            End Function

            Public Shared Function AllocateArbWaveform(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Size_In_Samples As Integer) As Integer
                If Is64BitProcess Then
                    Return AllocateArbWaveform64(Instrument_Handle, Name, Size_In_Samples)
                Else
                    Return AllocateArbWaveform32(Instrument_Handle, Name, Size_In_Samples)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveform32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, IData As Double(), QData As Double(), More_Data_Pending As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveform64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, IData As Double(), QData As Double(), More_Data_Pending As UShort) As Integer
            End Function

            Public Shared Function WriteArbWaveform(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, IData As Double(), QData As Double(), More_Data_Pending As UShort) As Integer
                If Is64BitProcess Then
                    Return WriteArbWaveform64(Instrument_Handle, Name, Number_Of_Samples, IData, QData, More_Data_Pending)
                Else
                    Return WriteArbWaveform32(Instrument_Handle, Name, Number_Of_Samples, IData, QData, More_Data_Pending)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformF3232(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, IData As Single(), QData As Single(), More_Data_Pending As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformF3264(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, IData As Single(), QData As Single(), More_Data_Pending As UShort) As Integer
            End Function

            Public Shared Function WriteArbWaveformF32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, IData As Single(), QData As Single(), More_Data_Pending As UShort) As Integer
                If Is64BitProcess Then
                    Return WriteArbWaveformF3264(Instrument_Handle, Name, Number_Of_Samples, IData, QData, More_Data_Pending)
                Else
                    Return WriteArbWaveformF3232(Instrument_Handle, Name, Number_Of_Samples, IData, QData, More_Data_Pending)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteArbWaveformComplexF32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformComplexF3232(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, wfmData As niComplexNumberF32(), More_Data_Pending As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteArbWaveformComplexF32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformComplexF3264(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, wfmData As niComplexNumberF32(), More_Data_Pending As UShort) As Integer
            End Function

            Public Shared Function WriteArbWaveformComplexF32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, wfmData As niComplexNumberF32(), More_Data_Pending As UShort) As Integer
                If Is64BitProcess Then
                    Return WriteArbWaveformComplexF3264(Instrument_Handle, Name, Number_Of_Samples, wfmData, More_Data_Pending)
                Else
                    Return WriteArbWaveformComplexF3232(Instrument_Handle, Name, Number_Of_Samples, wfmData, More_Data_Pending)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteArbWaveformComplexF64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformComplexF6432(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As niComplexNumber(), More_Data_Pending As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteArbWaveformComplexF64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformComplexF6464(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As niComplexNumber(), More_Data_Pending As UShort) As Integer
            End Function

            Public Shared Function WriteArbWaveformComplexF64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As niComplexNumber(), More_Data_Pending As UShort) As Integer
                If Is64BitProcess Then
                    Return WriteArbWaveformComplexF6464(Instrument_Handle, Name, Number_Of_Samples, Data, More_Data_Pending)
                Else
                    Return WriteArbWaveformComplexF6432(Instrument_Handle, Name, Number_Of_Samples, Data, More_Data_Pending)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteArbWaveformComplexI16", CallingConvention:=CallingConvention.StdCall)> _
            <Obsolete> _
			Public Shared Function WriteArbWaveformComplexI1632(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As niComplexI16()) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteArbWaveformComplexI16", CallingConvention:=CallingConvention.StdCall)> _
           <Obsolete> _
		   Public Shared Function WriteArbWaveformComplexI1664(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As niComplexI16()) As Integer
            End Function

			<Obsolete> _
            Public Shared Function WriteArbWaveformComplexI16(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As niComplexI16()) As Integer
                If Is64BitProcess Then
                    Return WriteArbWaveformComplexI1664(Instrument_Handle, Name, Number_Of_Samples, Data)
                Else
                    Return WriteArbWaveformComplexI1632(Instrument_Handle, Name, Number_Of_Samples, Data)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteArbWaveformComplexI16", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformComplexI1632(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As RfsgNIComplexI16()) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteArbWaveformComplexI16", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteArbWaveformComplexI1664(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As RfsgNIComplexI16()) As Integer
            End Function

            Public Shared Function WriteArbWaveformComplexI16(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String, Number_Of_Samples As Integer, Data As RfsgNIComplexI16()) As Integer
                If Is64BitProcess Then
                    Return WriteArbWaveformComplexI1664(Instrument_Handle, Name, Number_Of_Samples, Data)
                Else
                    Return WriteArbWaveformComplexI1632(Instrument_Handle, Name, Number_Of_Samples, Data)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SelectArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SelectArbWaveform32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SelectArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SelectArbWaveform64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String) As Integer
            End Function

            Public Shared Function SelectArbWaveform(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String) As Integer
                If Is64BitProcess Then
                    Return SelectArbWaveform64(Instrument_Handle, Name)
                Else
                    Return SelectArbWaveform32(Instrument_Handle, Name)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ClearArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ClearArbWaveform32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ClearArbWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ClearArbWaveform64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String) As Integer
            End Function

            Public Shared Function ClearArbWaveform(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Name As String) As Integer
                If Is64BitProcess Then
                    Return ClearArbWaveform64(Instrument_Handle, Name)
                Else
                    Return ClearArbWaveform32(Instrument_Handle, Name)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ClearAllArbWaveforms", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ClearAllArbWaveforms32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ClearAllArbWaveforms", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ClearAllArbWaveforms64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function ClearAllArbWaveforms(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return ClearAllArbWaveforms64(Instrument_Handle)
                Else
                    Return ClearAllArbWaveforms32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureSignalBandwidth", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureSignalBandwidth32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal_Bandwidth As Double) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureSignalBandwidth", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureSignalBandwidth64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal_Bandwidth As Double) As Integer
            End Function

            Public Shared Function ConfigureSignalBandwidth(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal_Bandwidth As Double) As Integer
                If Is64BitProcess Then
                    Return ConfigureSignalBandwidth64(Instrument_Handle, Signal_Bandwidth)
                Else
                    Return ConfigureSignalBandwidth32(Instrument_Handle, Signal_Bandwidth)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureDigitalModulationUserDefinedWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalModulationUserDefinedWaveform32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Number_Of_Samples As Integer, User_Defined_Waveform As SByte()) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureDigitalModulationUserDefinedWaveform", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalModulationUserDefinedWaveform64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Number_Of_Samples As Integer, User_Defined_Waveform As SByte()) As Integer
            End Function

            Public Shared Function ConfigureDigitalModulationUserDefinedWaveform(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Number_Of_Samples As Integer, User_Defined_Waveform As SByte()) As Integer
                If Is64BitProcess Then
                    Return ConfigureDigitalModulationUserDefinedWaveform64(Instrument_Handle, Number_Of_Samples, User_Defined_Waveform)
                Else
                    Return ConfigureDigitalModulationUserDefinedWaveform32(Instrument_Handle, Number_Of_Samples, User_Defined_Waveform)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigurePowerLevelType", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigurePowerLevelType32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Power_Level_Type As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigurePowerLevelType", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigurePowerLevelType64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Power_Level_Type As Integer) As Integer
            End Function

            Public Shared Function ConfigurePowerLevelType(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Power_Level_Type As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigurePowerLevelType64(Instrument_Handle, Power_Level_Type)
                Else
                    Return ConfigurePowerLevelType32(Instrument_Handle, Power_Level_Type)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_CreateConfigurationList", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function CreateConfigurationList32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, List_Name As String, Number_Of_Attributes As Integer, Configuration_List_Attributes As niRFSGProperties(), Set_As_Active_List As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_CreateConfigurationList", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function CreateConfigurationList64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, List_Name As String, Number_Of_Attributes As Integer, Configuration_List_Attributes As niRFSGProperties(), Set_As_Active_List As UShort) As Integer
            End Function

            Public Shared Function CreateConfigurationList(Instrument_Handle As System.Runtime.InteropServices.HandleRef, List_Name As String, Number_Of_Attributes As Integer, Configuration_List_Attributes As niRFSGProperties(), Set_As_Active_List As UShort) As Integer
                If Is64BitProcess Then
                    Return CreateConfigurationList64(Instrument_Handle, List_Name, Number_Of_Attributes, Configuration_List_Attributes, Set_As_Active_List)
                Else
                    Return CreateConfigurationList32(Instrument_Handle, List_Name, Number_Of_Attributes, Configuration_List_Attributes, Set_As_Active_List)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_CreateConfigurationListStep", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function CreateConfigurationListStep32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Set_As_Active_Step As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_CreateConfigurationListStep", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function CreateConfigurationListStep64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Set_As_Active_Step As UShort) As Integer
            End Function

            Public Shared Function CreateConfigurationListStep(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Set_As_Active_Step As UShort) As Integer
                If Is64BitProcess Then
                    Return CreateConfigurationListStep64(Instrument_Handle, Set_As_Active_Step)
                Else
                    Return CreateConfigurationListStep32(Instrument_Handle, Set_As_Active_Step)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_DeleteConfigurationList", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DeleteConfigurationList32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, List_Name As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_DeleteConfigurationList", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DeleteConfigurationList64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, List_Name As String) As Integer
            End Function

            Public Shared Function DeleteConfigurationList(Instrument_Handle As System.Runtime.InteropServices.HandleRef, List_Name As String) As Integer
                If Is64BitProcess Then
                    Return DeleteConfigurationList64(Instrument_Handle, List_Name)
                Else
                    Return DeleteConfigurationList32(Instrument_Handle, List_Name)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureSoftwareStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureSoftwareStartTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureSoftwareStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureSoftwareStartTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function ConfigureSoftwareStartTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return ConfigureSoftwareStartTrigger64(Instrument_Handle)
                Else
                    Return ConfigureSoftwareStartTrigger32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureDigitalEdgeStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalEdgeStartTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Source As String, Edge As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureDigitalEdgeStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalEdgeStartTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Source As String, Edge As Integer) As Integer
            End Function

            Public Shared Function ConfigureDigitalEdgeStartTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Source As String, Edge As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigureDigitalEdgeStartTrigger64(Instrument_Handle, Source, Edge)
                Else
                    Return ConfigureDigitalEdgeStartTrigger32(Instrument_Handle, Source, Edge)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureP2PEndpointFullnessStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureP2PEndpointFullnessStartTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, P2P_Endpoint_Fullness_Level As Long) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureP2PEndpointFullnessStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureP2PEndpointFullnessStartTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, P2P_Endpoint_Fullness_Level As Long) As Integer
            End Function

            Public Shared Function ConfigureP2PEndpointFullnessStartTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, P2P_Endpoint_Fullness_Level As Long) As Integer
                If Is64BitProcess Then
                    Return ConfigureP2PEndpointFullnessStartTrigger64(Instrument_Handle, P2P_Endpoint_Fullness_Level)
                Else
                    Return ConfigureP2PEndpointFullnessStartTrigger32(Instrument_Handle, P2P_Endpoint_Fullness_Level)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_DisableStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DisableStartTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_DisableStartTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DisableStartTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function DisableStartTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return DisableStartTrigger64(Instrument_Handle)
                Else
                    Return DisableStartTrigger32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureSoftwareScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureSoftwareScriptTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureSoftwareScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureSoftwareScriptTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String) As Integer
            End Function

            Public Shared Function ConfigureSoftwareScriptTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String) As Integer
                If Is64BitProcess Then
                    Return ConfigureSoftwareScriptTrigger64(Instrument_Handle, Trigger_Identifier)
                Else
                    Return ConfigureSoftwareScriptTrigger32(Instrument_Handle, Trigger_Identifier)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureDigitalEdgeScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalEdgeScriptTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String, Source As String, Edge As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureDigitalEdgeScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalEdgeScriptTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String, Source As String, Edge As Integer) As Integer
            End Function

            Public Shared Function ConfigureDigitalEdgeScriptTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String, Source As String, Edge As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigureDigitalEdgeScriptTrigger64(Instrument_Handle, Trigger_Identifier, Source, Edge)
                Else
                    Return ConfigureDigitalEdgeScriptTrigger32(Instrument_Handle, Trigger_Identifier, Source, Edge)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureDigitalLevelScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalLevelScriptTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String, Source As String, Level As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureDigitalLevelScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalLevelScriptTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String, Source As String, Level As Integer) As Integer
            End Function

            Public Shared Function ConfigureDigitalLevelScriptTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String, Source As String, Level As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigureDigitalLevelScriptTrigger64(Instrument_Handle, Trigger_Identifier, Source, Level)
                Else
                    Return ConfigureDigitalLevelScriptTrigger32(Instrument_Handle, Trigger_Identifier, Source, Level)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_DisableScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DisableScriptTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_DisableScriptTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DisableScriptTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String) As Integer
            End Function

            Public Shared Function DisableScriptTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger_Identifier As String) As Integer
                If Is64BitProcess Then
                    Return DisableScriptTrigger64(Instrument_Handle, Trigger_Identifier)
                Else
                    Return DisableScriptTrigger32(Instrument_Handle, Trigger_Identifier)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SendSoftwareEdgeTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SendSoftwareEdgeTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger As Integer, Trigger_Identifier As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SendSoftwareEdgeTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SendSoftwareEdgeTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger As Integer, Trigger_Identifier As String) As Integer
            End Function

            Public Shared Function SendSoftwareEdgeTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Trigger As Integer, Trigger_Identifier As String) As Integer
                If Is64BitProcess Then
                    Return SendSoftwareEdgeTrigger64(Instrument_Handle, Trigger, Trigger_Identifier)
                Else
                    Return SendSoftwareEdgeTrigger32(Instrument_Handle, Trigger, Trigger_Identifier)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalEdgeConfigurationListStepTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Source As String, Edge As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureDigitalEdgeConfigurationListStepTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Source As String, Edge As Integer) As Integer
            End Function

            Public Shared Function ConfigureDigitalEdgeConfigurationListStepTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Source As String, Edge As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigureDigitalEdgeConfigurationListStepTrigger64(Instrument_Handle, Source, Edge)
                Else
                    Return ConfigureDigitalEdgeConfigurationListStepTrigger32(Instrument_Handle, Source, Edge)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_DisableConfigurationListStepTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DisableConfigurationListStepTrigger32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_DisableConfigurationListStepTrigger", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function DisableConfigurationListStepTrigger64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function DisableConfigurationListStepTrigger(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return DisableConfigurationListStepTrigger64(Instrument_Handle)
                Else
                    Return DisableConfigurationListStepTrigger32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetTerminalName", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetTerminalName32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal As Integer, Signal_Identifier As String, Buffer_Size As Integer, Terminal_Name As System.Text.StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetTerminalName", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetTerminalName64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal As Integer, Signal_Identifier As String, Buffer_Size As Integer, Terminal_Name As System.Text.StringBuilder) As Integer
            End Function

            Public Shared Function GetTerminalName(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal As Integer, Signal_Identifier As String, Buffer_Size As Integer, Terminal_Name As System.Text.StringBuilder) As Integer
                If Is64BitProcess Then
                    Return GetTerminalName64(Instrument_Handle, Signal, Signal_Identifier, Buffer_Size, Terminal_Name)
                Else
                    Return GetTerminalName32(Instrument_Handle, Signal, Signal_Identifier, Buffer_Size, Terminal_Name)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureRefClock", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureRefClock32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureRefClock", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureRefClock64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
            End Function

            Public Shared Function ConfigureRefClock(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Ref_Clock_Source As String, Ref_Clock_Rate As Double) As Integer
                If Is64BitProcess Then
                    Return ConfigureRefClock64(Instrument_Handle, Ref_Clock_Source, Ref_Clock_Rate)
                Else
                    Return ConfigureRefClock32(Instrument_Handle, Ref_Clock_Source, Ref_Clock_Rate)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigurePXIChassisClk10", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigurePXIChassisClk1032(Instrument_Handle As System.Runtime.InteropServices.HandleRef, PXI_Clk_10_Source As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigurePXIChassisClk10", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigurePXIChassisClk1064(Instrument_Handle As System.Runtime.InteropServices.HandleRef, PXI_Clk_10_Source As String) As Integer
            End Function

            Public Shared Function ConfigurePXIChassisClk10(Instrument_Handle As System.Runtime.InteropServices.HandleRef, PXI_Clk_10_Source As String) As Integer
                If Is64BitProcess Then
                    Return ConfigurePXIChassisClk1064(Instrument_Handle, PXI_Clk_10_Source)
                Else
                    Return ConfigurePXIChassisClk1032(Instrument_Handle, PXI_Clk_10_Source)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ExportSignal", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ExportSignal32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ExportSignal", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ExportSignal64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
            End Function

            Public Shared Function ExportSignal(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Signal As Integer, Signal_Identifier As String, Output_Terminal As String) As Integer
                If Is64BitProcess Then
                    Return ExportSignal64(Instrument_Handle, Signal, Signal_Identifier, Output_Terminal)
                Else
                    Return ExportSignal32(Instrument_Handle, Signal, Signal_Identifier, Output_Terminal)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetStreamEndpointHandle", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetStreamEndpointHandle32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Stream_Endpoint As String, ByRef Reader_Handle As UInteger) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetStreamEndpointHandle", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetStreamEndpointHandle64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Stream_Endpoint As String, ByRef Reader_Handle As UInteger) As Integer
            End Function

            Public Shared Function GetStreamEndpointHandle(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Stream_Endpoint As String, ByRef Reader_Handle As UInteger) As Integer
                If Is64BitProcess Then
                    Return GetStreamEndpointHandle64(Instrument_Handle, Stream_Endpoint, Reader_Handle)
                Else
                    Return GetStreamEndpointHandle32(Instrument_Handle, Stream_Endpoint, Reader_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteP2PEndpointI16", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteP2PEndpointI1632(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Stream_Endpoint As String, Number_Of_Samples As Integer, Endpoint_Data As Short()) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteP2PEndpointI16", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteP2PEndpointI1664(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Stream_Endpoint As String, Number_Of_Samples As Integer, Endpoint_Data As Short()) As Integer
            End Function

            Public Shared Function WriteP2PEndpointI16(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Stream_Endpoint As String, Number_Of_Samples As Integer, Endpoint_Data As Short()) As Integer
                If Is64BitProcess Then
                    Return WriteP2PEndpointI1664(Instrument_Handle, Stream_Endpoint, Number_Of_Samples, Endpoint_Data)
                Else
                    Return WriteP2PEndpointI1632(Instrument_Handle, Stream_Endpoint, Number_Of_Samples, Endpoint_Data)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WriteScript", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteScript32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Script As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WriteScript", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WriteScript64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Script As String) As Integer
            End Function

            Public Shared Function WriteScript(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Script As String) As Integer
                If Is64BitProcess Then
                    Return WriteScript64(Instrument_Handle, Script)
                Else
                    Return WriteScript32(Instrument_Handle, Script)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureOutputEnabled", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureOutputEnabled32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Output_Enabled As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureOutputEnabled", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureOutputEnabled64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Output_Enabled As UShort) As Integer
            End Function

            Public Shared Function ConfigureOutputEnabled(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Output_Enabled As UShort) As Integer
                If Is64BitProcess Then
                    Return ConfigureOutputEnabled64(Instrument_Handle, Output_Enabled)
                Else
                    Return ConfigureOutputEnabled32(Instrument_Handle, Output_Enabled)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ConfigureIQEnabled", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureIQEnabled32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, IQ_Enabled As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ConfigureIQEnabled", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ConfigureIQEnabled64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, IQ_Enabled As UShort) As Integer
            End Function

            Public Shared Function ConfigureIQEnabled(Instrument_Handle As System.Runtime.InteropServices.HandleRef, IQ_Enabled As UShort) As Integer
                If Is64BitProcess Then
                    Return ConfigureIQEnabled64(Instrument_Handle, IQ_Enabled)
                Else
                    Return ConfigureIQEnabled32(Instrument_Handle, IQ_Enabled)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ResetAttribute", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ResetAttribute32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ResetAttribute", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ResetAttribute64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer) As Integer
            End Function

            Public Shared Function ResetAttribute(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer) As Integer
                If Is64BitProcess Then
                    Return ResetAttribute64(Instrument_Handle, Channel_Name, Attribute_ID)
                Else
                    Return ResetAttribute32(Instrument_Handle, Channel_Name, Attribute_ID)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_Initiate", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Initiate32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_Initiate", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Initiate64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function Initiate(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return Initiate64(Instrument_Handle)
                Else
                    Return Initiate32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_CheckGenerationStatus", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function CheckGenerationStatus32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Is_Done As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_CheckGenerationStatus", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function CheckGenerationStatus64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Is_Done As UShort) As Integer
            End Function

            Public Shared Function CheckGenerationStatus(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Is_Done As UShort) As Integer
                If Is64BitProcess Then
                    Return CheckGenerationStatus64(Instrument_Handle, Is_Done)
                Else
                    Return CheckGenerationStatus32(Instrument_Handle, Is_Done)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_Abort", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Abort32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_Abort", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Abort64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function Abort(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return Abort64(Instrument_Handle)
                Else
                    Return Abort32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_Commit", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Commit32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_Commit", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Commit64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function Commit(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return Commit64(Instrument_Handle)
                Else
                    Return Commit32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_PerformThermalCorrection", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function PerformThermalCorrection32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_PerformThermalCorrection", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function PerformThermalCorrection64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function PerformThermalCorrection(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return PerformThermalCorrection64(Instrument_Handle)
                Else
                    Return PerformThermalCorrection32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_WaitUntilSettled", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WaitUntilSettled32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Max_Time_Milliseconds As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_WaitUntilSettled", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function WaitUntilSettled64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Max_Time_Milliseconds As Integer) As Integer
            End Function

            Public Shared Function WaitUntilSettled(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Max_Time_Milliseconds As Integer) As Integer
                If Is64BitProcess Then
                    Return WaitUntilSettled64(Instrument_Handle, Max_Time_Milliseconds)
                Else
                    Return WaitUntilSettled32(Instrument_Handle, Max_Time_Milliseconds)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_reset", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function reset32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_reset", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function reset64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function reset(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return reset64(Instrument_Handle)
                Else
                    Return reset32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ResetDevice", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ResetDevice32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ResetDevice", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ResetDevice64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function ResetDevice(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return ResetDevice64(Instrument_Handle)
                Else
                    Return ResetDevice32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ResetWithDefaults", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ResetWithDefaults32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ResetWithDefaults", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ResetWithDefaults64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function ResetWithDefaults(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return ResetWithDefaults64(Instrument_Handle)
                Else
                    Return ResetWithDefaults32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetChannelName", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetChannelName32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Index As Integer, BufferSize As Integer, Channel_Name As System.Text.StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetChannelName", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetChannelName64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Index As Integer, BufferSize As Integer, Channel_Name As System.Text.StringBuilder) As Integer
            End Function

            Public Shared Function GetChannelName(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Index As Integer, BufferSize As Integer, Channel_Name As System.Text.StringBuilder) As Integer
                If Is64BitProcess Then
                    Return GetChannelName64(Instrument_Handle, Index, BufferSize, Channel_Name)
                Else
                    Return GetChannelName32(Instrument_Handle, Index, BufferSize, Channel_Name)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_Disable", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Disable32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_Disable", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function Disable64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function Disable(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return Disable64(Instrument_Handle)
                Else
                    Return Disable32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_self_test", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function self_test32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Self_Test_Result As Short, Self_Test_Message As System.Text.StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_self_test", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function self_test64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Self_Test_Result As Short, Self_Test_Message As System.Text.StringBuilder) As Integer
            End Function

            Public Shared Function self_test(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Self_Test_Result As Short, Self_Test_Message As System.Text.StringBuilder) As Integer
                If Is64BitProcess Then
                    Return self_test64(Instrument_Handle, Self_Test_Result, Self_Test_Message)
                Else
                    Return self_test32(Instrument_Handle, Self_Test_Result, Self_Test_Message)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_error_message", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function error_message32(instrumentHandle As System.Runtime.InteropServices.HandleRef, errorCode As Integer, errorMessage As StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_error_message", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function error_message64(instrumentHandle As System.Runtime.InteropServices.HandleRef, errorCode As Integer, errorMessage As StringBuilder) As Integer
            End Function

            Public Shared Function error_message(instrumentHandle As System.Runtime.InteropServices.HandleRef, errorCode As Integer, errorMessage As StringBuilder) As Integer
                If Is64BitProcess Then
                    Return error_message64(instrumentHandle, errorCode, errorMessage)
                Else
                    Return error_message32(instrumentHandle, errorCode, errorMessage)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_error_query", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function error_query32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Error_Code As Integer, Error_Message As System.Text.StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_error_query", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function error_query64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Error_Code As Integer, Error_Message As System.Text.StringBuilder) As Integer
            End Function

            Public Shared Function error_query(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Error_Code As Integer, Error_Message As System.Text.StringBuilder) As Integer
                If Is64BitProcess Then
                    Return error_query64(Instrument_Handle, Error_Code, Error_Message)
                Else
                    Return error_query32(Instrument_Handle, Error_Code, Error_Message)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_revision_query", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function revision_query32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_revision_query", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function revision_query64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
            End Function

            Public Shared Function revision_query(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Instrument_Driver_Revision As System.Text.StringBuilder, Firmware_Revision As System.Text.StringBuilder) As Integer
                If Is64BitProcess Then
                    Return revision_query64(Instrument_Handle, Instrument_Driver_Revision, Firmware_Revision)
                Else
                    Return revision_query32(Instrument_Handle, Instrument_Driver_Revision, Firmware_Revision)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_QueryArbWaveformCapabilities", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function QueryArbWaveformCapabilities32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Max_Number_Waveforms As Integer, ByRef Waveform_Quantum As Integer, ByRef Min_Waveform_Size As Integer, ByRef Max_Waveform_Size As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_QueryArbWaveformCapabilities", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function QueryArbWaveformCapabilities64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Max_Number_Waveforms As Integer, ByRef Waveform_Quantum As Integer, ByRef Min_Waveform_Size As Integer, ByRef Max_Waveform_Size As Integer) As Integer
            End Function

            Public Shared Function QueryArbWaveformCapabilities(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Max_Number_Waveforms As Integer, ByRef Waveform_Quantum As Integer, ByRef Min_Waveform_Size As Integer, ByRef Max_Waveform_Size As Integer) As Integer
                If Is64BitProcess Then
                    Return QueryArbWaveformCapabilities64(Instrument_Handle, Max_Number_Waveforms, Waveform_Quantum, Min_Waveform_Size, Max_Waveform_Size)
                Else
                    Return QueryArbWaveformCapabilities32(Instrument_Handle, Max_Number_Waveforms, Waveform_Quantum, Min_Waveform_Size, Max_Waveform_Size)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SelfCal", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SelfCal32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SelfCal", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SelfCal64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function SelfCal(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return SelfCal64(Instrument_Handle)
                Else
                    Return SelfCal32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetSelfCalibrationDateAndTime", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetSelfCalibrationDateAndTime32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, [Module] As Integer, ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, _
                ByRef Minute As Integer, ByRef Second As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetSelfCalibrationDateAndTime", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetSelfCalibrationDateAndTime64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, [Module] As Integer, ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, _
                ByRef Minute As Integer, ByRef Second As Integer) As Integer
            End Function

            Public Shared Function SelfCalibrateRange(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minPowerLevel As Double, maxPowerLevel As Double) As Integer
                If Is64BitProcess Then
                    Return SelfCalibrateRange64(instrumentHandle, stepsToOmit, minFrequency, maxFrequency, minPowerLevel, maxPowerLevel)
                Else
                    Return SelfCalibrateRange32(instrumentHandle, stepsToOmit, minFrequency, maxFrequency, minPowerLevel, maxPowerLevel)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SelfCalibrateRange", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SelfCalibrateRange32(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minPowerLevel As Double, maxPowerLevel As Double) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SelfCalibrateRange", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SelfCalibrateRange64(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Long, minFrequency As Double, maxFrequency As Double, minPowerLevel As Double, maxPowerLevel As Double) As Integer
            End Function

            Public Shared Function GetSelfCalibrationDateAndTime(Instrument_Handle As System.Runtime.InteropServices.HandleRef, [Module] As Integer, ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, _
                ByRef Minute As Integer, ByRef Second As Integer) As Integer
                If Is64BitProcess Then
                    Return GetSelfCalibrationDateAndTime64(Instrument_Handle, [Module], Year, Month, Day, Hour, _
                        Minute, Second)
                Else
                    Return GetSelfCalibrationDateAndTime32(Instrument_Handle, [Module], Year, Month, Day, Hour, _
                        Minute, Second)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetExternalCalibrationLastDateAndTime", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetExternalCalibrationLastDateAndTime32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, ByRef Minute As Integer, _
                ByRef Second As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetExternalCalibrationLastDateAndTime", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetExternalCalibrationLastDateAndTime64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, ByRef Minute As Integer, _
                ByRef Second As Integer) As Integer
            End Function

            Public Shared Function GetExternalCalibrationLastDateAndTime(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef Year As Integer, ByRef Month As Integer, ByRef Day As Integer, ByRef Hour As Integer, ByRef Minute As Integer, _
                ByRef Second As Integer) As Integer
                If Is64BitProcess Then
                    Return GetExternalCalibrationLastDateAndTime64(Instrument_Handle, Year, Month, Day, Hour, Minute, _
                        Second)
                Else
                    Return GetExternalCalibrationLastDateAndTime32(Instrument_Handle, Year, Month, Day, Hour, Minute, _
                        Second)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_ChangeExternalCalibrationPassword", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ChangeExternalCalibrationPassword32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Old_Password As String, New_Password As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_ChangeExternalCalibrationPassword", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function ChangeExternalCalibrationPassword64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Old_Password As String, New_Password As String) As Integer
            End Function

            Public Shared Function ChangeExternalCalibrationPassword(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Old_Password As String, New_Password As String) As Integer
                If Is64BitProcess Then
                    Return ChangeExternalCalibrationPassword64(Instrument_Handle, Old_Password, New_Password)
                Else
                    Return ChangeExternalCalibrationPassword32(Instrument_Handle, Old_Password, New_Password)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_close", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function close32(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_close", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function close64(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function close(Instrument_Handle As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return close64(Instrument_Handle)
                Else
                    Return close32(Instrument_Handle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetAttributeViInt32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViInt3232(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetAttributeViInt32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViInt3264(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Integer) As Integer
            End Function

            Public Shared Function GetAttributeViInt32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Integer) As Integer
                If Is64BitProcess Then
                    Return GetAttributeViInt3264(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return GetAttributeViInt3232(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetAttributeViInt64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViInt6432(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Long) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetAttributeViInt64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViInt6464(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Long) As Integer
            End Function

            Public Shared Function GetAttributeViInt64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Long) As Integer
                If Is64BitProcess Then
                    Return GetAttributeViInt6464(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return GetAttributeViInt6432(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetAttributeViReal64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViReal6432(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Double) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetAttributeViReal64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViReal6464(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Double) As Integer
            End Function

            Public Shared Function GetAttributeViReal64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As Double) As Integer
                If Is64BitProcess Then
                    Return GetAttributeViReal6464(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return GetAttributeViReal6432(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetAttributeViString", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViString32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Buffer_Size As Integer, Attribute_Value As System.Text.StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetAttributeViString", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViString64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Buffer_Size As Integer, Attribute_Value As System.Text.StringBuilder) As Integer
            End Function

            Public Shared Function GetAttributeViString(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Buffer_Size As Integer, Attribute_Value As System.Text.StringBuilder) As Integer
                If Is64BitProcess Then
                    Return GetAttributeViString64(Instrument_Handle, Channel_Name, Attribute_ID, Buffer_Size, Attribute_Value)
                Else
                    Return GetAttributeViString32(Instrument_Handle, Channel_Name, Attribute_ID, Buffer_Size, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetAttributeViBoolean", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViBoolean32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetAttributeViBoolean", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViBoolean64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As UShort) As Integer
            End Function

            Public Shared Function GetAttributeViBoolean(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As UShort) As Integer
                If Is64BitProcess Then
                    Return GetAttributeViBoolean64(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return GetAttributeViBoolean32(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetAttributeViSession", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViSession32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As System.IntPtr) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetAttributeViSession", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetAttributeViSession64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As System.IntPtr) As Integer
            End Function

            Public Shared Function GetAttributeViSession(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, ByRef Attribute_Value As System.IntPtr) As Integer
                If Is64BitProcess Then
                    Return GetAttributeViSession64(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return GetAttributeViSession32(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SetAttributeViInt32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViInt3232(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SetAttributeViInt32", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViInt3264(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Integer) As Integer
            End Function

            Public Shared Function SetAttributeViInt32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Integer) As Integer
                If Is64BitProcess Then
                    Return SetAttributeViInt3264(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return SetAttributeViInt3232(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SetAttributeViInt64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViInt6432(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Long) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SetAttributeViInt64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViInt6464(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Long) As Integer
            End Function

            Public Shared Function SetAttributeViInt64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Long) As Integer
                If Is64BitProcess Then
                    Return SetAttributeViInt6464(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return SetAttributeViInt6432(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SetAttributeViReal64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViReal6432(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Double) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SetAttributeViReal64", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViReal6464(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Double) As Integer
            End Function

            Public Shared Function SetAttributeViReal64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As Double) As Integer
                If Is64BitProcess Then
                    Return SetAttributeViReal6464(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return SetAttributeViReal6432(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SetAttributeViString", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViString32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SetAttributeViString", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViString64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As String) As Integer
            End Function

            Public Shared Function SetAttributeViString(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As String) As Integer
                If Is64BitProcess Then
                    Return SetAttributeViString64(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return SetAttributeViString32(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SetAttributeViBoolean", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViBoolean32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As UShort) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SetAttributeViBoolean", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViBoolean64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As UShort) As Integer
            End Function

            Public Shared Function SetAttributeViBoolean(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As UShort) As Integer
                If Is64BitProcess Then
                    Return SetAttributeViBoolean64(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return SetAttributeViBoolean32(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SetAttributeViSession", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViSession32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SetAttributeViSession", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetAttributeViSession64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As System.Runtime.InteropServices.HandleRef) As Integer
            End Function

            Public Shared Function SetAttributeViSession(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, Attribute_ID As Integer, Attribute_Value As System.Runtime.InteropServices.HandleRef) As Integer
                If Is64BitProcess Then
                    Return SetAttributeViSession64(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                Else
                    Return SetAttributeViSession32(Instrument_Handle, Channel_Name, Attribute_ID, Attribute_Value)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetUserData", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetUserData32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, bufferSize As Integer, ByRef data As Char(), ByRef actualDataSize As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetUserData", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetUserData64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, bufferSize As Integer, ByRef data As Char(), ByRef actualDataSize As Integer) As Integer
            End Function

            Public Shared Function GetUserData(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, bufferSize As Integer, ByRef data As Char(), ByRef actualDataSize As Integer) As Integer
                If Is64BitProcess Then
                    Return GetUserData64(Instrument_Handle, Channel_Name, bufferSize, data, actualDataSize)
                Else
                    Return GetUserData32(Instrument_Handle, Channel_Name, bufferSize, data, actualDataSize)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_SetUserData", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetUserData32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, bufferSize As Integer, data As Char()) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_SetUserData", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function SetUserData64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, bufferSize As Integer, data As Char()) As Integer
            End Function

            Public Shared Function SetUserData(Instrument_Handle As System.Runtime.InteropServices.HandleRef, Channel_Name As String, bufferSize As Integer, data As Char()) As Integer
                If Is64BitProcess Then
                    Return SetUserData64(Instrument_Handle, Channel_Name, bufferSize, data)
                Else
                    Return SetUserData32(Instrument_Handle, Channel_Name, bufferSize, data)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:="niRFSG_GetError", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetError32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef errorCode As Integer, BufferSize As Integer, Description As System.Text.StringBuilder) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint:="niRFSG_GetError", CallingConvention:=CallingConvention.StdCall)> _
            Public Shared Function GetError64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef errorCode As Integer, BufferSize As Integer, Description As System.Text.StringBuilder) As Integer
            End Function

            Public Shared Function GetError(Instrument_Handle As System.Runtime.InteropServices.HandleRef, ByRef errorCode As Integer, BufferSize As Integer, Description As System.Text.StringBuilder) As Integer
                If Is64BitProcess Then
                    Return GetError64(Instrument_Handle, errorCode, BufferSize, Description)
                Else
                    Return GetError32(Instrument_Handle, errorCode, BufferSize, Description)
                End If
            End Function


            Public Shared Function TestForError(handle As System.Runtime.InteropServices.HandleRef, status As Integer) As Integer
                If (status < 0) Then
                    PInvoke.ThrowError(handle, status)
                End If
                Return status
            End Function

            Public Shared Function ThrowError(handle As System.Runtime.InteropServices.HandleRef, code As Integer) As Integer
                Dim status As Integer
                Dim size As Integer = PInvoke.GetError(handle, status, 0, Nothing)
                Dim msg As New System.Text.StringBuilder()
                If (size >= 0) Then
                    msg.Capacity = size
                    PInvoke.GetError(handle, status, size, msg)
                End If
                Throw New System.Runtime.InteropServices.ExternalException(msg.ToString(), code)
            End Function

            'Added in 14.5

            Public shared Function CheckIfWaveformExists(Instrument_Handle As System.Runtime.InteropServices.HandleRef , waveformName As String, ByRef waveformExists As Boolean) As Integer
                If (Is64BitProcess)
                    return CheckIfWaveformExists64(Instrument_Handle, waveformName, waveformExists)
                Else
                    return CheckIfWaveformExists32(Instrument_Handle, waveformName, waveformExists)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint:= "niRFSG_CheckIfWaveformExists", CallingConvention:= CallingConvention.StdCall)> _
            Public Shared Function CheckIfWaveformExists32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, waveformName As String, ByRef waveformExists As Boolean) As Integer                
            End Function

            <DllImport(nativeDllName64, EntryPoint: = "niRFSG_CheckIfWaveformExists", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function CheckIfWaveformExists64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, waveformName As String, ByRef waveformExists As Boolean) As Integer
            End Function

            Public Shared Function CheckIfScriptExists(Instrument_Handle As System.Runtime.InteropServices.HandleRef, scriptName As string, ByRef scriptExists As Boolean) As Integer
                If (Is64BitProcess)
                    return CheckIfScriptExists64(Instrument_Handle, scriptName, scriptExists)
                Else
                    return CheckIfScriptExists32(Instrument_Handle, scriptName, scriptExists)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint: = "niRFSG_CheckIfScriptExists", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function CheckIfScriptExists32(Instrument_Handle As System.Runtime.InteropServices.HandleRef, scriptName As String, ByRef scriptExists As Boolean) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint: = "niRFSG_CheckIfScriptExists", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function CheckIfScriptExists64(Instrument_Handle As System.Runtime.InteropServices.HandleRef, scriptName As String, ByRef scriptExists As Boolean) As Integer
            End Function
                        
            Public Shared Function CheckIfConfigurationListExists(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String, ByRef listExists As Boolean) As Integer
                If (Is64BitProcess)
                    return CheckIfConfigurationListExists64(instrumentHandle, listName, listExists)
                Else
                    return CheckIfConfigurationListExists32(instrumentHandle, listName, listExists)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint: = "niRFSG_CheckIfConfigurationListExists", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function CheckIfConfigurationListExists32(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String, ByRef listExists As Boolean) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint: = "niRFSG_CheckIfConfigurationListExists", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function CheckIfConfigurationListExists64(instrumentHandle As System.Runtime.InteropServices.HandleRef, listName As String, ByRef listExists As Boolean) As Integer

            End Function

            Public Shared Function PerformPowerSearch(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
                If (Is64BitProcess)
                    return PerformPowerSearch64(instrumentHandle)
                Else
                    return PerformPowerSearch32(instrumentHandle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint: = "niRFSG_PerformPowerSearch", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function PerformPowerSearch32(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer

            End Function

            <DllImport(nativeDllName64, EntryPoint: = "niRFSG_PerformPowerSearch", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function PerformPowerSearch64(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer

            End Function
                        
            Public Shared Function GetSelfCalibrationTemperature(instrumentHandle As System.Runtime.InteropServices.HandleRef, data As Integer, ByRef temperature As Double) As Integer
                If (Is64BitProcess)
                    return GetSelfCalibrationTemperature64(instrumentHandle, data, temperature)
                Else
                    return GetSelfCalibrationTemperature32(instrumentHandle, data, temperature)
                End If
            End Function


            <DllImport(nativeDllName32, EntryPoint: = "niRFSG_GetSelfCalibrationTemperature", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function GetSelfCalibrationTemperature32(instrumentHandle As System.Runtime.InteropServices.HandleRef, data As Integer, ByRef temperature As Double) As Integer

            End Function

            <DllImport(nativeDllName64, EntryPoint: = "niRFSG_GetSelfCalibrationTemperature", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function GetSelfCalibrationTemperature64(instrumentHandle As System.Runtime.InteropServices.HandleRef, data As Integer, ByRef temperature As Double) As Integer

            End Function

            #Region "17.1"

            Public shared Function SetArbWaveformNextWritePosition(Instrument_Handle As System.Runtime.InteropServices.HandleRef , name As String, relativeTo As Integer, offset As Integer) As Integer
                If (Is64BitProcess)
                    return SetArbWaveformNextWritePosition64(Instrument_Handle, name, relativeTo, offset)
                Else
                    return SetArbWaveformNextWritePosition32(Instrument_Handle, name, relativeTo, offset)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint: = "niRFSG_SetArbWaveformNextWritePosition", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function SetArbWaveformNextWritePosition32(instrumentHandle As System.Runtime.InteropServices.HandleRef, name As String, relativeTo As Integer, offset As Integer) As Integer

            End Function

            <DllImport(nativeDllName64, EntryPoint: = "niRFSG_SetArbWaveformNextWritePosition", CallingConvention: = CallingConvention.StdCall)> _
            Public Shared Function SetArbWaveformNextWritePosition64(instrumentHandle As System.Runtime.InteropServices.HandleRef, name As String, relativeTo As Integer, offset As Integer) As Integer

            End Function            

            #End Region

			#Region "18.1"

			<DllImport(vstModuleName, EntryPoint := "niVSTCal_SelfCalibrate", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function VstSelfCalibrate(resource_Name As String) As Integer
			End Function

			<DllImport(vstModuleName, EntryPoint := "niVSTCal_SelfCalErrorMessage", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function VstSelfCalibrateErrorMessage(errorCode As Integer, BufferSize As Integer, errorMessage As System.Text.StringBuilder) As Integer
			End Function

			<DllImport(nativeDllName32, EntryPoint := "niRFSG_5840_AlignLODaisyChain", CallingConvention := CallingConvention.StdCall, CharSet := CharSet.Ansi)> _
			Public Shared Function AlignLODaisyChain5840_32(useExternalLO As Boolean, externalLO As String, resourceName As String, portTypesLength As Integer, portTypes As Integer(), startFrequency As Double, _
				stopFrequency As Double) As Integer
			End Function

			<DllImport(nativeDllName64, EntryPoint := "niRFSG_5840_AlignLODaisyChain", CallingConvention := CallingConvention.StdCall, CharSet := CharSet.Ansi)> _
			Public Shared Function AlignLODaisyChain5840_64(useExternalLO As Boolean, externalLO As String, resourceName As String, portTypesLength As Integer, portTypes As Integer(), startFrequency As Double, _
				stopFrequency As Double) As Integer
			End Function


			Public Shared Function AlignLODaisyChain5840(useExternalLO As Boolean, externalLO As String, resourceName As String, portTypesLength As Integer, portTypes As Integer(), startFrequency As Double, _
				stopFrequency As Double) As Integer

				If Is64BitProcess Then
					Return AlignLODaisyChain5840_64(useExternalLO, externalLO, resourceName, portTypesLength, portTypes, startFrequency, _
						stopFrequency)
				Else
					Return AlignLODaisyChain5840_32(useExternalLO, externalLO, resourceName, portTypesLength, portTypes, startFrequency, _
						stopFrequency)
				End If

			End Function

			'--------------------------------------------------------------------------------------------

			<DllImport(nativeDllName32, EntryPoint := "niRFSG_ClearSelfCalRange", CallingConvention := CallingConvention.StdCall)> _
			Private Shared Function ClearSelfCalibrationRange32(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			<DllImport(nativeDllName64, EntryPoint := "niRFSG_ClearSelfCalRange", CallingConvention := CallingConvention.StdCall)> _
			Private Shared Function ClearSelfCalibrationRange64(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
			End Function

			Friend Shared Function ClearSelfCalibrationRange(instrumentHandle As System.Runtime.InteropServices.HandleRef) As Integer
				If Is64BitProcess Then
					Return ClearSelfCalibrationRange64(instrumentHandle)
				Else
					Return ClearSelfCalibrationRange32(instrumentHandle)
				End If
			End Function

			#End Region

            #Region "18.2"

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_CreateDeembeddingSparameterTableS2PFile", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function CreateDeembeddingSParameterTableS2pFile32(instrumentHandle As HandleRef, port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_CreateDeembeddingSparameterTableS2PFile", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function CreateDeembeddingSParameterTableS2pFile64(instrumentHandle As HandleRef, port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
            End Function

            Public Shared Function CreateDeembeddingSParameterTableS2pFile(instrumentHandle As HandleRef, port As String, tableName As String, s2pFilePath As String, sParameterOrientation As Integer) As Integer
                If Is64BitProcess Then
                    Return CreateDeembeddingSParameterTableS2pFile64(instrumentHandle, port, tableName, s2pFilePath, sParameterOrientation)
                Else
                    Return CreateDeembeddingSParameterTableS2pFile32(instrumentHandle, port, tableName, s2pFilePath, sParameterOrientation)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_CreateDeembeddingSparameterTableArray", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function CreateDeembeddingSParameterTableArray32(instrumentHandle As HandleRef, port As String, tableName As String, frequencies As Double(), frequenciesSize As Integer, sParameterTable As niComplexNumber(,,), _
                sParameterTableSize As Integer, numberOfPorts As Integer, sParameterOrientation As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_CreateDeembeddingSparameterTableArray", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function CreateDeembeddingSParameterTableArray64(instrumentHandle As HandleRef, port As String, tableName As String, frequencies As Double(), frequenciesSize As Integer, sParameterTable As niComplexNumber(,,), _
                sParameterTableSize As Integer, numberOfPorts As Integer, sParameterOrientation As Integer) As Integer
            End Function

            Public Shared Function CreateDeembeddingSParameterTableArray(instrumentHandle As HandleRef, port As String, tableName As String, frequencies As Double(), frequenciesSize As Integer, sParameterTable As niComplexNumber(,,), _
                sParameterTableSize As Integer, numberOfPorts As Integer, sParameterOrientation As Integer) As Integer
                If Is64BitProcess Then
                    Return CreateDeembeddingSParameterTableArray64(instrumentHandle, port, tableName, frequencies, frequenciesSize, sParameterTable, _
                        sParameterTableSize, numberOfPorts, sParameterOrientation)
                Else
                    Return CreateDeembeddingSParameterTableArray32(instrumentHandle, port, tableName, frequencies, frequenciesSize, sParameterTable, _
                        sParameterTableSize, numberOfPorts, sParameterOrientation)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_DeleteDeembeddingTable", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function DeleteDeembeddingTable32(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_DeleteDeembeddingTable", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function DeleteDeembeddingTable64(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            Public Shared Function DeleteDeembeddingTable(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
                If Is64BitProcess Then
                    Return DeleteDeembeddingTable64(instrumentHandle, port, tableName)
                Else
                    Return DeleteDeembeddingTable32(instrumentHandle, port, tableName)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_DeleteAllDeembeddingTables", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function DeleteAllDeembeddingTables32(instrumentHandle As HandleRef) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_DeleteAllDeembeddingTables", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function DeleteAllDeembeddingTables64(instrumentHandle As HandleRef) As Integer
            End Function

            Public Shared Function DeleteAllDeembeddingTables(instrumentHandle As HandleRef) As Integer
                If Is64BitProcess Then
                    Return DeleteAllDeembeddingTables64(instrumentHandle)
                Else
                    Return DeleteAllDeembeddingTables32(instrumentHandle)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_ConfigureDeembeddingTableInterpolationNearest", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function ConfigureDeembeddingTableInterpolationNearest32(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_ConfigureDeembeddingTableInterpolationNearest", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function ConfigureDeembeddingTableInterpolationNearest64(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            Public Shared Function ConfigureDeembeddingTableInterpolationNearest(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
                If Is64BitProcess Then
                    Return ConfigureDeembeddingTableInterpolationNearest64(instrumentHandle, port, tableName)
                Else
                    Return ConfigureDeembeddingTableInterpolationNearest32(instrumentHandle, port, tableName)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_ConfigureDeembeddingTableInterpolationLinear", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function ConfigureDeembeddingTableInterpolationLinear32(instrumentHandle As HandleRef, port As String, tableName As String, format As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_ConfigureDeembeddingTableInterpolationLinear", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function ConfigureDeembeddingTableInterpolationLinear64(instrumentHandle As HandleRef, port As String, tableName As String, format As Integer) As Integer
            End Function

            Public Shared Function ConfigureDeembeddingTableInterpolationLinear(instrumentHandle As HandleRef, port As String, tableName As String, format As Integer) As Integer
                If Is64BitProcess Then
                    Return ConfigureDeembeddingTableInterpolationLinear64(instrumentHandle, port, tableName, format)
                Else
                    Return ConfigureDeembeddingTableInterpolationLinear32(instrumentHandle, port, tableName, format)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_ConfigureDeembeddingTableInterpolationSpline", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function ConfigureDeembeddingTableInterpolationSpline32(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_ConfigureDeembeddingTableInterpolationSpline", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function ConfigureDeembeddingTableInterpolationSpline64(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
            End Function

            Public Shared Function ConfigureDeembeddingTableInterpolationSpline(instrumentHandle As HandleRef, port As String, tableName As String) As Integer
                If Is64BitProcess Then
                    Return ConfigureDeembeddingTableInterpolationSpline64(instrumentHandle, port, tableName)
                Else
                    Return ConfigureDeembeddingTableInterpolationSpline32(instrumentHandle, port, tableName)
                End If
            End Function

            <DllImport(nativeDllName32, EntryPoint := "niRFSG_GetDeembeddingSparameters", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function GetDeembeddingSParameters32(instrumentHandle As HandleRef, <Out> sParameters As niComplexNumber(), sParametersArraySize As Integer, ByRef numberOfSParametersReturned As Integer, ByRef numberOfPorts As Integer) As Integer
            End Function

            <DllImport(nativeDllName64, EntryPoint := "niRFSG_GetDeembeddingSparameters", CallingConvention := CallingConvention.StdCall)> _
            Public Shared Function GetDeembeddingSParameters64(instrumentHandle As HandleRef, <Out> sParameters As niComplexNumber(), sParametersArraySize As Integer, ByRef numberOfSParametersReturned As Integer, ByRef numberOfPorts As Integer) As Integer
            End Function

            Public Shared Function GetDeembeddingSParameters(instrumentHandle As HandleRef, <Out> sParameters As niComplexNumber(), sParametersArraySize As Integer, ByRef numberOfSParametersReturned As Integer, ByRef numberOfPorts As Integer) As Integer
                If Is64BitProcess Then
                    Return GetDeembeddingSParameters64(instrumentHandle, sParameters, sParametersArraySize, numberOfSParametersReturned, numberOfPorts)
                Else
                    Return GetDeembeddingSParameters32(instrumentHandle, sParameters, sParametersArraySize, numberOfSParametersReturned, numberOfPorts)
                End If
            End Function

            #End Region

			#Region "19.1"

			<DllImport(nativeDllName32, EntryPoint := "niRFSG_ResetWithOptions", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetWithOptions32(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Integer) As Integer
			End Function
			<DllImport(nativeDllName64, EntryPoint := "niRFSG_ResetWithOptions", CallingConvention := CallingConvention.StdCall)> _
			Public Shared Function ResetWithOptions64(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Integer) As Integer
			End Function

			Public Shared Function ResetWithOptions(instrumentHandle As System.Runtime.InteropServices.HandleRef, stepsToOmit As Integer) As Integer
				If Is64BitProcess Then
					Return ResetWithOptions64(instrumentHandle, stepsToOmit)
				Else
					Return ResetWithOptions32(instrumentHandle, stepsToOmit)
				End If
			End Function

			#End Region

        End Class
        'Added in 14.5

        ''' <summary>
        ''' 
        ''' niRFSG_CheckIfWaveformExists
        ''' 
        ''' C Function Prototype
        ''' ViStatus niRFSG_CheckIfWaveformExists (ViSession vi, ViConstString waveformName, ViBoolean waveformExists);
        ''' Purpose
        ''' Returns whether the waveform that you specify as waveformName exists.
        ''' Supported Devices NI 5673/5673E
        ''' 
        ''' </summary>
        ''' <param name="waveformName">
        ''' 
        ''' waveformName
        ''' ViConstString
        ''' Specifies the name used to store the waveform. This string is case-insensitive.
        ''' 
        ''' </param>
        ''' <param name="waveformExists">
        ''' 
        ''' waveformExists
        ''' ViBoolean*
        ''' Returns VI_TRUE if the waveform exists.
        ''' Defined Values:
        ''' VI_TRUEThe waveform exists. VI_FALSE The waveform does not exist.
        ''' 
        ''' </param>
        ''' <returns>
        ''' 
        ''' status
        ''' ViStatus
        ''' Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
        ''' 
        ''' To obtain a text description of the error code, call the niRFSG_GetError function.
        '''           
        ''' The general meaning of the status code is as follows:
        ''' Value  Meaning
        ''' 0  Success
        ''' Positive Values  Warnings
        ''' Negative Values  Errors
        ''' 
        ''' </returns>
        Public Function CheckIfWaveformExists(waveformName As String, ByRef waveformExists As Boolean) As Integer
            Dim pInvokeResult As Integer = PInvoke.CheckIfWaveformExists(Me._handle, waveformName, waveformExists)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            Return pInvokeResult
        End Function

        ''' <summary>
        ''' 
        ''' niRFSG_CheckIfScriptExists
        ''' 
        ''' C Function Prototype
        ''' ViStatus niRFSG_CheckIfScriptExists (ViSession vi, ViConstString scriptName, ViBoolean* scriptExists);
        ''' Purpose
        ''' Returns whether the script that you specify as scriptName exists. 
        ''' Supported Devices NI 5673/5673E
        ''' 
        ''' </summary>
        ''' <param name="scriptName">
        ''' 
        ''' waveformName
        ''' ViConstString
        ''' Specifies the name of the script. This string is case-insensitive
        ''' 
        ''' 
        ''' </param>
        ''' <param name="scriptExists">
        ''' 
        ''' scriptExists
        ''' ViBoolean*
        ''' Returns VI_TRUE if the script exists.
        ''' 
        ''' Valid Values:
        ''' VI_TRUE The script exists.
        ''' VI_FALSE The script does not exist.
        ''' </param>
        ''' <returns>
        ''' 
        ''' status
        ''' ViStatus
        ''' Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
        ''' To obtain a text description of the error code, call the niRFSG_GetError function.
        '''           
        ''' The general meaning of the status code is as follows:
        ''' Value  Meaning
        ''' 0  Success
        ''' Positive Values  Warnings
        ''' Negative Values  Errors
        ''' </returns>
        Public Function CheckIfScriptExists(scriptName As String, ByRef scriptExists As Boolean) As Integer
            Dim pInvokeResult As Integer= PInvoke.CheckIfScriptExists(Me._handle, scriptName, scriptExists)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            return pInvokeResult
        End Function


        ''' <summary>
        ''' 
        ''' niRFSG_CheckIfConfigurationListExists
        ''' 
        ''' C Function Prototype
        ''' ViStatus niRFSG_CheckIfConfigurationListExists (ViSession vi, ViConstString listName, ViBoolean* listExists);
        ''' Purpose
        ''' Returns whether the configuration list that you specify as listName exists.
        ''' Supported Devices NI PXIe-5650/5651/5652/5654/5654 with NI 5696, NI 5673E
        ''' 
        ''' </summary>
        ''' <param name = "listName">
        ''' listName
        ''' ViConstString
        ''' Specifies the name of the configuration list. This string is case-insensitive.
        ''' 
        ''' </param>
        ''' <param name = "listExists">
        ''' listExists
        ''' ViBoolean*
        ''' Returns VI_TRUE if the configuration list exists.
        ''' Defined Values:
        ''' VI_TRUE The configuration list exists. 
        ''' VI_FALSE The configuration list does not exist.
        ''' 
        ''' </param>
        ''' <returns>
        ''' 
        ''' status
        ''' ViStatus
        ''' 
        ''' Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
        ''' To obtain a text description of the error code, call the niRFSG_GetError function.
        ''' 
        ''' The general meaning of the status code is as follows:
        ''' Value  Meaning
        ''' 0  Success
        ''' Positive Values  Warnings
        ''' Negative Values  Errors
        ''' </returns>
        Public Function CheckIfConfigurationListExists(listName As String, ByRef listExists As Boolean) As Integer
            Dim pInvokeResult As Integer = PInvoke.CheckIfConfigurationListExists(Me._handle, listName, listExists)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            return pInvokeResult
        End Function


        ''' <summary>
        ''' 
        ''' niRFSG_GetSelfCalibrationTemperature
        ''' 
        ''' C Function Prototype
        ''' ViStatus niRFSG_GetSelfCalibrationTemperature (ViSession vi, ViInt32 module, ViReal64* temperature);
        ''' Purpose
        ''' Returns the temperature, in degrees Celsius, of the device at the last successful self-calibration. 
        ''' Supported Devices: NI 5610, NI 5653, NI 5670/5671/5672/5673/5673E
        ''' 
        ''' </summary>
        ''' <param name = "data">
        '''
        ''' Module
        ''' ViInt32
        ''' 
        ''' Specifies from which module to retrieve the last successful self-calibration temperature.
        ''' Defined Values:
        ''' NIRFSG_VAL_PRIMARY_MODULEThe stand-alone device or the main module in a multi-module device.
        ''' NIRFSG_VAL_AWGThe AWG associated with the primary module.
        ''' NIRFSG_VAL_LOThe LO associated with the primary module.
        ''' Default Value: NIRFSG_VAL_PRIMARY_MODULE
        ''' 
        ''' </param>
        ''' <param name = "temperature">
        '''
        ''' temperature
        ''' ViReal64*
        ''' Returns the temperature, in degrees Celsius, of the device at the last successful self-calibration.
        ''' 
        ''' </param>
        ''' <returns>
        ''' 
        ''' status
        ''' ViStatus
        ''' 
        ''' Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
        ''' To obtain a text description of the error code, call the niRFSG_GetError function.
        ''' 
        ''' The general meaning of the status code is as follows:
        ''' Value  Meaning
        ''' 0  Success
        ''' Positive Values  Warnings
        ''' Negative Values  Errors
        ''' </returns>
        Public Function GetSelfCalibrationTemperature(data As Integer, ByRef temperature As Double)As Integer
            Dim pInvokeResult As Integer = PInvoke.GetSelfCalibrationTemperature(Me._handle, data, temperature)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            return pInvokeResult
        End Function

            ''' <summary>
            ''' 
            ''' niRFSG_PerformPowerSearch
            ''' 
            ''' C Function Prototype
            ''' ViStatus niRFSG_PerformPowerSearch(ViSession vi);
            ''' Purpose
            ''' Performs a power search if the NIRFSG_ATTR_ALC_CONTROL attribute is disabled. Calling this function disables modulation for a short time while the device levels the output signal.
            ''' Note: Power search temporarily enables the ALC, so ensure the appropriate included cable is connected between the NI 5654 ALC IN connector and the NI 5696 ALC OUT connector to successfully perform a power search.
            ''' 
            ''' Supported Devices NI 5654 with NI 5696
            ''' 
            ''' </summary>
            '''<returns>
            ''' 
            ''' status
            ''' ViStatus
            ''' 
            ''' Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
            ''' To obtain a text description of the error code, call the niRFSG_GetError function.
            ''' 
            ''' The general meaning of the status code is as follows:
            ''' Value  Meaning
            ''' 0  Success
            ''' Positive Values  Warnings
            ''' Negative Values  Errors
            ''' 
            '''</returns>
        Public Function PerformPowerSearch()As Integer
            Dim pInvokeResult As Integer = PInvoke.PerformPowerSearch(Me._handle)
            PInvoke.TestForError(Me._handle, pInvokeResult)
            return pInvokeResult
        End Function
    End Class

	Public Class niRFSGConstants
		<ObsoleteAttribute> _
		Public Const Rtsi7Str As String = "RTSI7"

		<ObsoleteAttribute> _
		Public Const Rtsi0Str As String = "RTSI0"

		<ObsoleteAttribute> _
		Public Const Rtsi4Str As String = "RTSI4"

		<ObsoleteAttribute> _
		Public Const Rtsi1Str As String = "RTSI1"

		<ObsoleteAttribute> _
		Public Const Rtsi5Str As String = "RTSI5"

		<ObsoleteAttribute> _
		Public Const Rtsi2Str As String = "RTSI2"

		<ObsoleteAttribute> _
		Public Const Rtsi6Str As String = "RTSI6"

		<ObsoleteAttribute> _
		Public Const Rtsi3Str As String = "RTSI3"


		<ObsoleteAttribute> _
		Public Const PxiClk10Str As String = "PXI_CLK10"

		Public Const Cw As Integer = 1000

		Public Const ArbWaveform As Integer = 1001

		Public Const Script As Integer = 1002

		Public Const AveragePower As Integer = 7000

		Public Const PeakPower As Integer = 7001

		Public Const Pfi0Str As String = "PFI0"

		Public Const Pfi1Str As String = "PFI1"

		Public Const Pfi2Str As String = "PFI2"

		Public Const Pfi3Str As String = "PFI3"

		Public Const PxiTrig0Str As String = "PXI_Trig0"

		Public Const PxiTrig1Str As String = "PXI_Trig1"

		Public Const PxiTrig2Str As String = "PXI_Trig2"

		Public Const PxiTrig3Str As String = "PXI_Trig3"

		Public Const PxiTrig4Str As String = "PXI_Trig4"

		Public Const PxiTrig5Str As String = "PXI_Trig5"

		Public Const PxiTrig6Str As String = "PXI_Trig6"

		Public Const PxiTrig7Str As String = "PXI_Trig7"

		Public Const PxiStarStr As String = "PXI_STAR"

		Public Const RisingEdge As Integer = 0

		Public Const FallingEdge As Integer = 1

		Public Const ScriptTrigger0 As String = "scriptTrigger0"

		Public Const ScriptTrigger1 As String = "scriptTrigger1"

		Public Const ScriptTrigger2 As String = "scriptTrigger2"

		Public Const ScriptTrigger3 As String = "scriptTrigger3"

		Public Const SelfCalOmitNone As Integer = 0

		Public Const SelfCalLoSelfCal As Integer = 1

		Public Const SelfCalPowerLevelAccuracy As Integer = 2

		Public Const SelfCalResidualLoPower As Integer = 4

		Public Const SelfCalImageSuppression As Integer = 8

		Public Const ActiveHigh As Integer = 9000

		Public Const ActiveLow As Integer = 9001

		Public Const StartTrigger As Integer = 0

		Public Const ScriptTrigger As Integer = 1

		Public Const Marker0EventStr As String = "Marker0Event"

		Public Const Marker1EventStr As String = "Marker1Event"

		Public Const Marker2EventStr As String = "Marker2Event"

		Public Const Marker3EventStr As String = "Marker3Event"

		Public Const TimerEventStr As String = "TimerEvent"

		Public Const MarkerEvent As Integer = 2

		Public Const RefClock As Integer = 3

		Public Const StartedEvent As Integer = 4

		Public Const DoneEvent As Integer = 5

		Public Const ConfigurationListStepTrigger As Integer = 6

		Public Const MarkerEvent0 As String = "marker0"

		Public Const MarkerEvent1 As String = "marker1"

		Public Const MarkerEvent2 As String = "marker2"

		Public Const MarkerEvent3 As String = "marker3"

		Public Const OnboardClockStr As String = "OnboardClock"

		Public Const RefInStr As String = "RefIn"

		Public Const PxiClkStr As String = "PXI_CLK"

		Public Const ClkInStr As String = "ClkIn"

		Public Const NoneStr As String = "None"

		Public Const DoNotExportStr As String = ""

		Public Const RefOutStr As String = "RefOut"

		Public Const RefOut2Str As String = "RefOut2"

		Public Const Pfi4Str As String = "PFI4"

		Public Const Pfi5Str As String = "PFI5"

		Public Const SyncStartTriggerStr As String = "Sync_Start"

		Public Const SyncScriptTriggerStr As String = "Sync_Script"

		Public Const LoSourceOnboardStr As String = "Onboard"

		Public Const LoSourceLoInStr As String = "LO_In"

		Public Const Enable As Integer = 1

		Public Const Disable As Integer = 0

		Public Const Auto As Integer = -1

		Public Const ArbFilterTypeNone As Integer = 10000

		Public Const ArbFilterTypeRootRaisedCosine As Integer = 10001

		Public Const ArbFilterTypeRaisedCosine As Integer = 10002

		<ObsoleteAttribute> _
		Public Const DucNone As Integer = ArbFilterTypeNone

		<ObsoleteAttribute> _
		Public Const DucRootRaisedCosine As Integer = ArbFilterTypeRootRaisedCosine

		<ObsoleteAttribute> _
		Public Const DucRaisedCosine As Integer = ArbFilterTypeRaisedCosine

		Public Const HighResolution As Integer = 6000

		Public Const DivideDown As Integer = 6001

		Public Const ClkOutStr As String = "ClkOut"

		Public Const None As Integer = 0

		Public Const Fm As Integer = 2000

		Public Const Pm As Integer = 2001

		Public Const Sine As Integer = 3000

		Public Const Square As Integer = 3001

		Public Const Triangle As Integer = 3002

		Public Const Fsk As Integer = 4000

		Public Const Ook As Integer = 4001

		Public Const Psk As Integer = 4002

		Public Const Prbs As Integer = 5000

		Public Const RfOut As Integer = 14000

		Public Const IqOut As Integer = 14001

		Public Const CalOut As Integer = 14002

		Public Const IOnly As Integer = 14003

		Public Const Differential As Integer = 15000

		Public Const SingleEnded As Integer = 15001

		Public Const UserDefined As Integer = 5001

		Public Const Medium As Integer = 1

		Public Const Wide As Integer = 2

		Public Const Slow As Integer = 0

		Public Const Fast As Integer = 1

		Public Const TimeAfterLock As Integer = 12000

		Public Const TimeAfterIo As Integer = 12001

		Public Const Ppm As Integer = 12002

		Public Const DigitalEdge As Integer = 1

		Public Const DigitalLevel As Integer = 8000

		Public Const Software As Integer = 2

		Public Const P2pEndpointFullness As Integer = 3

		Public Const MaxTimeImmediate As Integer = 0

		Public Const MaxTimeInfinite As Int64 = &HffffffffUI

		Public Const ArbTriggerSourceImmediate As Integer = None

		Public Const ArbTriggerSourceExternal As Integer = DigitalEdge

		Public Const ArbTriggerSourceSoftware As Integer = Software

		Public Const ArbExternalTriggerSlopePositive As Integer = RisingEdge

		Public Const ArbExternalTriggerSlopeNegative As Integer = FallingEdge

		Public Const Percent As Integer = 11000

		Public Const Volts As Integer = 11001

		Public Const ExactMatch As Integer = 0

		Public Const Minimum As Integer = 1

		'NIRFSG_ATTR_ANALOG_MODULATION_TYPE
		Public Const FmContinuous As Integer = 14000

		Public Const FmBanded As Integer = 14001

        'Added in 14.5
                
        Public Const ConfigurationSettledEvent As Integer= 7

        Public Const TrigInStr As String = "TrigIn"

        Public Const TrigOutStr As String = "TrigOut"

        Public Const _10mhz As Integer = 10000000
        
        Public Const ConfigurationListRepeatContinuous As Integer = 0
        
        Public Const ConfigurationListRepeatSingle As Integer = 1
        
        Public Const Narrow As Integer = 0
        
        Public Const Am As Integer = 2002
        
        Public Const HighPower As Integer = 16000
        
        Public Const LowHarmonic As Integer = 16001
        
        Public Const Narrowband As Integer= 17000
        
        Public Const Wideband As Integer= 17001
        
        Public Const _100hzTo1khz As Integer = 18000
        
        Public Const _1khzTo10khz As Integer = 18001
        
        Public Const _10khzTo100khz As Integer = 18002
        
        Public Const HighDeviation As Integer = 19000
        
        Public Const LowPhaseNoise As Integer = 19001
        
        Public Const OptimalMatch As Integer= 20000
        
        Public Const HighIsolation As Integer = 20001
        
        <ObsoleteAttribute> _
        Public Const ReferenceOscillatorSourceInternal As Integer = 0        

        <ObsoleteAttribute> _
        Public Const ReferenceOscillatorSourceExternal As Integer = 1

        <ObsoleteAttribute> _
        Public Const RefClockSourcePxiClk As Integer = 1001

        <ObsoleteAttribute> _
        Public Const Low As Integer = 0

        #Region "16.0"

        Public Const DigitalLow As Integer = 21000

        Public Const DigitalHigh As Integer = 21001

        Public Const Seconds As Integer = 22000

        Public Const SampleClockPeriods As Integer = 22001

        Public Const Pulse As Integer = 23000

        Public Const Toggle As Integer = 23001

        Public Const SelfCalSynthesizerAlignment As Integer = 10

        Public Const ErrorReportingWarning As Integer = 1301

        Public Const ErrorReportingDisabled As Integer = 1302
        
        #End Region

        #Region "17.1"

        Public Const PXIeDStarBStr As String = "PXIe_DStarB"

        Public Const PXIeDStarCStr As String = "PXIe_DStarC"

        Public Const StartOfWaveform As Integer = 8000

        Public Const CurrentPosition As Integer = 8001

        #End Region

		#Region "18.1"

		Public Const Secondary As String = "Secondary"

		Public Const RefIn2Str As String = "RefIn2"

		Public Const PxiClkMasterStr As String = "PXI_ClkMaster"

		Public Const RFInLOExportEnabled As Integer = 1

		Public Const RFInLOExportDisabled As Integer = 0

		Public Const RFInLOExportUnspecified As Integer = -2

		Public Const LOOutExportConfigureFromRfsaEnabled As Integer = 1

		Public Const LOOutExportConfigureFromRfsaDisabled As Integer = 0

		Public Const PortRFIN As Integer = 14500

		Public Const PortRFOut As Integer = 14501

		#End Region

        #Region "18.2"

        ''' <summary>
        ''' 
        ''' </summary>
        Public Const DeembeddingTypeNone As Integer = 25000

        ''' <summary>
        ''' 
        ''' </summary>
		Public Const DeembeddingTypeScalar As Integer = 25001

        ''' <summary>
        ''' 
        ''' </summary>
		Public Const DeembeddingTypeVector As Integer = 25002

        ''' <summary>
        ''' 
        ''' </summary>
		Public Const SParameterOrientationPort1TowardsDut As Integer = 24000

        ''' <summary>
        ''' 
        ''' </summary>
		Public Const SParameterOrientationPort2TowardsDut As Integer = 24001

        ''' <summary>
        ''' 
        ''' </summary>
		Public Const LinearInterpolationFormatRealAndImaginary As Integer = 26000

        ''' <summary>
        ''' 
        ''' </summary>
		Public Const LinearInterpolationFormatMagnitudeAndPhase As Integer = 26001

        ''' <summary>
        ''' 
        ''' </summary>
		Public Const LinearInterpolationFormatMagnitudeInDecibelAndPhase As Integer = 26002

        #End Region
        
		#Region "19.1"

		''' <summary>
		''' 
		''' </summary>
		Public Const SGSAShared As String = "SGSAShared"

		''' <summary>
		''' 
		''' </summary>
		Public Const UpconverterFrequencyOffsetModeAuto As Integer = -1

		''' <summary>
		''' 
		''' </summary>
		Public Const UpconverterFrequencyOffsetModeUserDefined As Integer = 5001

		''' <summary>
		''' 
		''' </summary>
		Public Const UpconverterFrequencyOffsetModeEnable As Integer = 1

		''' <summary>
		''' 
		''' </summary>
		Public Const ResetWithOptionsNone As Integer = 0

		''' <summary>
		''' 
		''' </summary>
		Public Const ResetWithOptionsWaveforms As Integer = 1

		''' <summary>
		''' 
		''' </summary>
		Public Const ResetWithOptionsScripts As Integer = 2

		''' <summary>
		''' 
		''' </summary>
		Public Const ResetWithOptionsRoutes As Integer = 4

		''' <summary>
		''' 
		''' </summary>
		Public Const ResetWithOptionsDeembeddingTables As Integer = 8

		#End Region
	End Class

	Public Enum niRFSGProperties

        '''<summary>
        '''System.string
        '''</summary>
        IOResourceDescriptor = 1050304

		''' <summary>
		''' System.Double
		''' </summary>
		ArbCarrierFrequency = 1150015

		'''<summary>
		'''System.Boolean
		''' </summary>
		CompensateForFilterGroupDelay = 119740

		''' <summary>
		''' System.Int32
		''' </summary>
		DataTransferBlockSize = 1150048

		''' <summary>
		''' System.Boolean
		''' </summary>
		DirectDmaEnabled = 1150049

		''' <summary>
		''' System.Int32
		''' </summary>
		DirectDmaWindowAddress = 1150050

		''' <summary>
		''' System.Int32
		''' </summary>
		DirectDmaWindowSize = 1150051

		''' <summary>
		''' System.Int32
		''' </summary>
		DirectDownload = 1150042

		''' <summary>
		''' System.Int32
		''' </summary>
		StreamingSpaceAvailableInWaveform = 1150047

		''' <summary>
		''' System.Boolean
		''' </summary>
		StreamingEnabled = 1150045

		''' <summary>
		''' System.Double
		''' </summary>
		StreamingWriteTimeout = 1150140

		''' <summary>
		''' System.String
		''' </summary>
		StreamingWaveformName = 1150046

		''' <summary>
		''' System.Double
		''' </summary>
		DataTransferMaximumBandwidth = 1150086

		''' <summary>
		''' System.Int32
		''' </summary>
		DataTransferMaximumInFlightReads = 1150088

		''' <summary>
		''' System.Int32
		''' </summary>
		DataTransferPreferredPacketSize = 1150087

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalEqualizationEnabled = 1150012

		''' <summary>
		''' System.Boolean
		''' </summary>
		DigitalPattern = 1150044

		''' <summary>
		''' System.Int32
		''' </summary>
		GenerationMode = 1150018

		''' <summary>
		''' System.Double
		''' </summary>
		IqRate = 1250452

		''' <summary>
		''' System.Boolean
		''' </summary>
		IqSwapEnabled = 1250404

		''' <summary>
		''' System.Int32
		''' </summary>
		MemorySize = 1150061

		''' <summary>
		''' System.Int32
		''' </summary>
		PhaseContinuityEnabled = 1150005

		''' <summary>
		''' System.Double
		''' </summary>
		ArbPower = 1150016

		''' <summary>
		''' System.Double
		''' </summary>
		ArbPreFilterGain = 1150025

		''' <summary>
		''' System.Int32
		''' </summary>
		ArbFilterType = 1150056

		''' <summary>
		''' System.Double
		''' </summary>
		ArbFilterRaisedCosineAlpha = 1150060

		''' <summary>
		''' System.Double
		''' </summary>
		ArbFilterRootRaisedCosineAlpha = 1150057

		''' <summary>
		''' System.String
		''' </summary>
		SelectedScript = 1150023

		''' <summary>
		''' System.Double
		''' </summary>
		SignalBandwidth = 1150007

		''' <summary>
		''' System.Double
		''' </summary>
		ArbWaveformSoftwareScalingFactor = 1150052

		''' <summary>
		''' System.Int32
		''' </summary>
		ArbMaxNumberWaveforms = 1250454

		''' <summary>
		''' System.Int32
		''' </summary>
		ArbWaveformSizeMax = 1250457

		''' <summary>
		''' System.Int32
		''' </summary>
		ArbWaveformSizeMin = 1250456

		''' <summary>
		''' System.Int32
		''' </summary>
		ArbWaveformQuantum = 1250455

		''' <summary>
		''' int
		''' </summary>
		ArbWaveformRepeatCount = 1150158

		''' <summary>
		''' bool
		''' </summary>
		ArbWaveformRepeatCountIsFinite = 1150157

		''' <summary>
		''' System.Int32
		''' </summary>
		ArbOscillatorPhaseDacValue = 1150089

		''' <summary>
		''' System.Int32
		''' </summary>
		ArbOnboardSampleClockMode = 1150029

		''' <summary>
		''' System.Double
		''' </summary>
		ArbSampleClockRate = 1150031

		''' <summary>
		''' System.String
		''' </summary>
		ArbSampleClockSource = 1150030

		''' <summary>
		''' System.String
		''' </summary>
		PxiChassisClk10Source = 1150004

		''' <summary>
		''' System.String
		''' </summary>
		ExportedRefClockOutputTerminal = 1150053

		''' <summary>
		''' System.Double
		''' </summary>
		RefClockRate = 1250322

		''' <summary>
		''' System.String
		''' </summary>
		RefClockSource = 1150001

		''' <summary>
		''' System.String
		''' </summary>
		ActiveConfigurationList = 1150096

		''' <summary>
		''' System.Int32
		''' </summary>
		ActiveConfigurationListStep = 1150097

		''' <summary>
		''' System.Int32
		''' </summary>
		ConfigurationListStepInProgress = 1150122

		''' <summary>
		''' System.Double
		''' </summary>
		ArbTemperature = 1150068

		''' <summary>
		''' System.Double
		''' </summary>
		DeviceTemperature = 1150017

		''' <summary>
		''' System.Double
		''' </summary>
		LoTemperature = 1150075

		''' <summary>
		''' System.String
		''' </summary>
		SerialNumber = 1150026

		''' <summary>
		''' System.String
		''' </summary>
		ModuleRevision = 1150084

		''' <summary>
		''' System.String
		''' </summary>
		ExportedDoneEventOutputTerminal = 1150063

		''' <summary>
		''' System.String
		''' </summary>
		DoneEventTerminalName = 1150113

		''' <summary>
		''' System.String
		''' </summary>
		ExportedMarkerEventOutputTerminal = 1150064

		''' <summary>
		''' System.String
		''' </summary>
		MarkerEventTerminalName = 1150115

		''' <summary>
		''' System.String
		''' </summary>
		ExportedStartedEventOutputTerminal = 1150065

		''' <summary>
		''' System.String
		''' </summary>
		StartedEventTerminalName = 1150112

		''' <summary>
		''' string
		''' </summary>
		SyncSampleClockDistLine = 1150181

		''' <summary>
		''' bool
		''' </summary>
		SyncSampleClockMaster = 1150180

		''' <summary>
		''' string
		''' </summary>
		SyncScriptTriggerDistLine = 1150143

		''' <summary>
		''' bool
		''' </summary>
		SyncScriptTriggerMaster = 1150142

		''' <summary>
		''' string
		''' </summary>
		SyncStartTriggerDistLine = 1150156

		''' <summary>
		''' bool
		''' </summary>
		SyncStartTriggerMaster = 1150155

		''' <summary>
		''' double
		''' </summary>
		EventsDelay = 1150154

		''' <summary>
		''' double
		''' </summary>
		InterpolationDelay = 1150153

		''' <summary>
		''' RfsgAttrOutputPort
		''' </summary>
		OutputPort = 1150144

		''' <summary>
		''' string
		''' </summary>
		LoSource = 1150150

		''' <summary>
		''' double
		''' </summary>
		LoFrequencyStepSize = 1150151

		''' <summary>
		''' RfsgAttrDigitalEqualizationEnabled
		''' </summary>
		LoPllFractionalModeEnabled = 1150152

		''' <summary>
		''' double
		''' </summary>
		IqOutPortCarrierFrequency = 1150145


		''' <summary>
		''' RfsgAttrIqOutPortTerminalConfiguration
		''' </summary>
		IqOutPortTerminalConfiguration = 1150146

		''' <summary>
		''' double
		''' </summary>
		IqOutPortLevel = 1150147

		''' <summary>
		''' double
		''' </summary>
		IqOutPortCommonModeOffset = 1150148

		''' <summary>
		''' double
		''' </summary>
		IqOutPortOffset = 1150149

		''' <summary>
		''' double
		''' </summary>
		IqOutPortTemperature = 1150161

		''' <summary>
		''' double
		''' </summary>
		IqOutPortLoadImpedance = 1150163

		''' <summary>
		''' string
		''' </summary>
		RfBlankingSource = 1150162

		''' <summary>
		''' string
		''' </summary>
		FpgaBitfilePath = 1150186

		''' <summary>
		''' System.Double
		''' </summary>
		TimerEventInterval = 1150100

		''' <summary>
		''' System.Double
		''' </summary>
		ExternalCalibrationTemperature = 1150077

		''' <summary>
		''' System.Int32
		''' </summary>
		ExternalCalibrationRecommendedInterval = 1150076

		''' <summary>
		''' System.String
		''' </summary>
		LogicalName = 1050305

		''' <summary>
		''' System.String
		''' </summary>
		DriverSetup = 1050007

		''' <summary>
		''' System.String
		''' </summary>
		GroupCapabilities = 1050401

		''' <summary>
		''' System.String
		''' </summary>
		SupportedInstrumentModels = 1050327

		''' <summary>
		''' System.Int32
		''' </summary>
		SpecificDriverClassSpecMajorVersion = 1050515

		''' <summary>
		''' System.Int32
		''' </summary>
		SpecificDriverClassSpecMinorVersion = 1050516

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverDescription = 1050514

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverPrefix = 1050302

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverVendor = 1050513

		''' <summary>
		''' System.String
		''' </summary>
		SpecificDriverRevision = 1050551

		''' <summary>
		''' System.String
		''' </summary>
		InstrumentFirmwareRevision = 1050510

		''' <summary>
		''' System.String
		''' </summary>
		InstrumentManufacturer = 1050511

		''' <summary>
		''' System.String
		''' </summary>
		InstrumentModel = 1050512

		''' <summary>
		''' System.Boolean
		''' </summary>
		Cache = 1050004

		''' <summary>
		''' System.Boolean
		''' </summary>
		InterchangeCheck = 1050021

		''' <summary>
		''' System.Boolean
		''' </summary>
		QueryInstrumentStatus = 1050003

		''' <summary>
		''' System.Boolean
		''' </summary>
		RangeCheck = 1050002

		''' <summary>
		''' System.Boolean
		''' </summary>
		RecordCoercions = 1050006

		''' <summary>
		''' System.Boolean
		''' </summary>
		Simulate = 1050005

		''' <summary>
		''' System.Boolean
		''' </summary>
		IqImpairmentEnabled = 1150069

		''' <summary>
		''' System.Int32
		''' </summary>
		IqOffsetUnits = 1150081

		''' <summary>
		''' System.Double
		''' </summary>
		IqIOffset = 1150070

		''' <summary>
		''' System.Double
		''' </summary>
		IqQOffset = 1150071

		''' <summary>
		''' System.Double
		''' </summary>
		IqGainImbalance = 1150072

		''' <summary>
		''' System.Double
		''' </summary>
		IqSkew = 1150073

		''' <summary>
		''' System.Double
		''' </summary>
		AnalogModulationFmDeviation = 1150035

		''' <summary>
		''' System.Int32
		''' </summary>
		AnalogModulationType = 1150032

		''' <summary>
		''' System.Double
		''' </summary>
		AnalogModulationPmDeviation = 1150062

		''' <summary>
		''' System.Double
		''' </summary>
		AnalogModulationWaveformFrequency = 1150034

		''' <summary>
		''' System.Int32
		''' </summary>
		AnalogModulationWaveformType = 1150033

		''' <summary>
		''' System.Double
		''' </summary>
		DigitalModulationFskDeviation = 1150041

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalModulationType = 1150036

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalModulationPrbsOrder = 1150039

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalModulationPrbsSeed = 1150040

		''' <summary>
		''' System.Double
		''' </summary>
		DigitalModulationSymbolRate = 1150037

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalModulationWaveformType = 1150038

		''' <summary>
		''' double
		''' </summary>
		UpconverterFrequencyOffset = 1150160

		''' <summary>
		''' System.Double
		''' </summary>
		UpconverterCenterFrequencyIncrement = 1150058

		''' <summary>
		''' System.Double
		''' </summary>
		UpconverterCenterFrequencyIncrementAnchor = 1150059

		''' <summary>
		''' System.Int32
		''' </summary>
		P2pDataTransferPermissionitialCredits = 1150135

		''' <summary>
		''' System.Int32
		''' </summary>
		P2pDataTransferPermissionInterval = 1150134

		''' <summary>
		''' System.Boolean
		''' </summary>
		P2pEnabled = 1150123

		''' <summary>
		''' System.Int32
		''' </summary>
		P2pEndpointCount = 1150127

		''' <summary>
		''' System.Int32
		''' </summary>
		P2pEndpointSize = 1150124

		''' <summary>
		''' System.Int32
		''' </summary>
		P2pMostSpaceAvailableInEndpoint = 1150126

		''' <summary>
		''' System.Int32
		''' </summary>
		P2pSpaceAvailableInEndpoint = 1150125

		''' <summary>
		''' System.Int32
		''' </summary>
		RefPllBandwidth = 1150133

		''' <summary>
		''' System.Int32
		''' </summary>
		YigMainCoilDrive = 1150118

		''' <summary>
		''' System.Int32
		''' </summary>
		AllowOutOfSpecificationUserSettings = 1150014

		''' <summary>
		''' System.Boolean
		''' </summary>
		AttenuatorHoldEnabled = 1150009

		''' <summary>
		''' System.Double
		''' </summary>
		AttenuatorHoldMaxPower = 1150010

		''' <summary>
		''' System.Int32
		''' </summary>
		AutomaticThermalCorrection = 1150008

		''' <summary>
		''' System.Double
		''' </summary>
		ExternalGain = 1150085

		''' <summary>
		''' System.Double
		''' </summary>
		Frequency = 1250001

		''' <summary>
		''' System.Double
		''' </summary>
		FrequencySettling = 1150083

		''' <summary>
		''' System.Int32
		''' </summary>
		FrequencySettlingUnits = 1150082

		''' <summary>
		''' System.Double
		''' </summary>
		FrequencyTolerance = 1150006

		''' <summary>
		''' System.Double
		''' </summary>
		LoInPower = 1150067

		''' <summary>
		''' System.Boolean
		''' </summary>
		LoOutEnabled = 1150013

		''' <summary>
		''' System.Double
		''' </summary>
		LoOutPower = 1150066

		''' <summary>
		''' System.Int32
		''' </summary>
		LoopBandwidth = 1150027

		''' <summary>
		''' System.Boolean
		''' </summary>
		OutputEnabled = 1250004

		''' <summary>
		''' System.Double
		''' </summary>
		PeakEnvelopePower = 1150011

		''' <summary>
		''' System.Double
		''' </summary>
		PeakPowerAdjustment = 1150132

		''' <summary>
		''' System.Int32
		''' </summary>
		<Obsolete(" Use PeakPowerAdjustmentInheritance instead")> _
		PeakPowerAdjsutmentInheritance = 1150141

		''' <summary>
		''' System.Double
		''' </summary>
		PhaseOffset = 1150024

		''' <summary>
		''' System.Double
		''' </summary>
		PowerLevel = 1250002

		''' <summary>
		''' System.Int32
		''' </summary>
		PowerLevelType = 1150043

		''' <summary>
		''' System.Double
		''' </summary>
		UpconverterCenterFrequency = 1154098

		''' <summary>
		''' System.Double
		''' </summary>
		UpconverterGain = 1154097

		''' <summary>
		''' System.Boolean
		''' </summary>
		PulseModulationEnabled = 1250051

		''' <summary>
		''' System.Double
		''' </summary>
		SelfCalibrationTemperature = 1150136

		''' <summary>
		''' System.Int32
		''' </summary>
		ConfigurationListStepTriggerType = 1150098

		''' <summary>
		''' System.String
		''' </summary>
		ExportedConfigurationListStepTriggerOutputTerminal = 1150105

		''' <summary>
		''' System.String
		''' </summary>
		ConfigurationListStepTriggerTerminalName = 1150117

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalEdgeConfigurationListStepTriggerEdge = 1150103

		''' <summary>
		''' System.String
		''' </summary>
		DigitalEdgeConfigurationListStepTriggerSource = 1150099

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalEdgeScriptTriggerEdge = 1150021

		''' <summary>
		''' System.String
		''' </summary>
		DigitalEdgeScriptTriggerSource = 1150020

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalLevelScriptTriggerActiveLevel = 1150055

		''' <summary>
		''' System.String
		''' </summary>
		DigitalLevelScriptTriggerSource = 1150054

		''' <summary>
		''' System.String
		''' </summary>
		ExportedScriptTriggerOutputTerminal = 1150022

		''' <summary>
		''' System.String
		''' </summary>
		ScriptTriggerTerminalName = 1150116

		''' <summary>
		''' System.Int32
		''' </summary>
		ScriptTriggerType = 1150019

		''' <summary>
		''' System.Int32
		''' </summary>
		DigitalEdgeStartTriggerEdge = 1250459

		''' <summary>
		''' System.String
		''' </summary>
		DigitalEdgeStartTriggerSource = 1150002

		''' <summary>
		''' System.String
		''' </summary>
		ExportedStartTriggerOutputTerminal = 1150003

		''' <summary>
		''' System.Int32
		''' </summary>
		P2pEndpointFullnessStartTriggerLevel = 1150128

		''' <summary>
		''' System.String
		''' </summary>
		StartTriggerTerminalName = 1150114

		''' <summary>
		''' System.Int32
		''' </summary>
		StartTriggerType = 1250458

		<ObsoleteAttribute> _
		ThermalCorrectionEnabled = AutomaticThermalCorrection

		<ObsoleteAttribute> _
		SampleClockRate = IqRate

		<ObsoleteAttribute> _
		UpconverterTemperature = DeviceTemperature

		<ObsoleteAttribute> _
		LocalOscillatorOut0Enabled = LoOutEnabled

		<ObsoleteAttribute> _
		IfCarrierFrequency = ArbCarrierFrequency

		<ObsoleteAttribute> _
		IfPower = ArbPower

		<ObsoleteAttribute> _
		DigitalIfEqualizationEnabled = DigitalEqualizationEnabled

		<ObsoleteAttribute> _
		DucPreFilterGain = ArbPreFilterGain

		<ObsoleteAttribute> _
		DucFirFilterType = ArbFilterType

		<ObsoleteAttribute> _
		DucFirFilterRootRaisedCosineAlpha = ArbFilterRootRaisedCosineAlpha

		<ObsoleteAttribute> _
		DucFirFilterRaisedCosineAlpha = ArbFilterRaisedCosineAlpha

		<ObsoleteAttribute> _
		UpconverterLoopBandwidth = LoopBandwidth

		Spy = 1050022

		UseSpecificSimulation = 1050023

		ChannelCount = 1050203

		FunctionCapabilities = 1050402

		IqNominalVoltage = 1250402

        <Obsolete> _
		IqEnabled = 1250401

		ArbFilterFrequency = 1250453

		FgenSession = 1150028

		LoSession = 1150074

		ReferenceOscillatorExternalFrequency = RefClockRate

		ArbTriggerSource = StartTriggerType

        'Added in 14.5

        ''' <summary>
        ''' RfsgPulseModulationMode
        ''' </summary>
        PulseModulationMode = 1150190

        ''' <summary>
        ''' RfsgAnalogModulationFmBand
        ''' </summary>
        AnalogModulationFmBand = 1150191

        ''' <summary>
        ''' RfsgAnalogModulationFmNarrowbandIntegrator
        ''' </summary>
        AnalogModulationFmNarrowbandIntegrator = 1150165

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AnalogModulationFmSensitivity = 1150166

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AnalogModulationAmSensitivity = 1150167

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AnalogModulationPmSensitivity = 1150168

        ''' <summary>
        ''' RfsgAnalogModulationPmMode
        ''' </summary>
        AnalogModulationPmMode = 1150192

        ''' <summary>
        ''' System.String
        ''' </summary>
        ExportedConfigurationSettledEventOutputTerminal = 1150129

        ''' <summary>
        ''' System.String
        ''' </summary>
        ConfigurationSettledEventTerminalName = 1150194

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AeTemperature = 1150182
                
        AeSession = 1150183

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AmplitudeSettling = 1150137

        ''' <summary>
        ''' System.Double
        ''' </summary>
        CorrectionTemperature = 1150104

        ''' <summary>
        ''' RfsgAlcControl
        ''' </summary>
        AlcControl = 1150195

        ''' <summary>
        ''' RfsgAlcControl
        ''' </summary>
        AutoPowerSearch = 1150196

        ''' <summary>
        ''' RfsgAmpPath
        ''' </summary>
        AmpPath = 1150185

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AttenuatorSetting = 1150173

        ''' <summary>
        ''' System.Boolean
        ''' </summary>
        FastTuningOption = 1150188

        ''' <summary>
        ''' RfsgConfigurationListRepeat
        ''' </summary>
        ConfigurationListRepeat = 1150102

        ''' <summary>
        ''' System.Boolean
        ''' </summary>
        ConfigurationListIsDone = 1150175

        <ObsoleteAttribute> _
        AlcEnabled = 1250003
                
        <ObsoleteAttribute> _
        ReferenceOscillatorSource = 1250321

        ''' <summary>
        ''' System.String
        ''' </summary>
        <ObsoleteAttribute> _
        ExternalCalibrationUserDefinedInfo = 1150078
        
        ''' <summary>
        ''' System.Int32
        ''' </summary>
        <ObsoleteAttribute> _
        ExternalCalibrationUserDefinedInfoMaxSize = 1150079

        #region "16.0"

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        MarkerEventOutputBehaviour = 1150206

        ''' <summary>
        ''' System.Double
        ''' </summary>
        MarkerEventPulseWidth = 1150207

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        MarkerEventPulseWidthUnits = 1150208

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        MarkerEventToggleInitialState = 1150209

        ''' <summary>
        ''' System.Double
        ''' </summary>
        ArbDigitalGain = 1150204

        ''' <summary>
        ''' System.Double
        ''' </summary>        
        FpgaTemperature = 1150211

        ''' <summary>
        ''' System.Double
        ''' </summary>
        TemperatureReadInterval =1150212

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        PeakPowerAdjustmentInheritance = 1150141

        ''' <summary>
        ''' System.Double
        ''' </summary>
        ModulePowerConsumption = 1150210

        ''' <summary>
        ''' System.Boolean
        ''' </summary>
        P2pIsFiniteGeneration = 1150217

        ''' <summary>
        ''' System.Double
        ''' </summary>
        P2pNumberOfSamplesToGenerate = 1150218

        ''' <summary>
        ''' System.Double
        ''' </summary>
        P2pGenerationFifoSampleQuantum = 1150219

        ''' <summary>
        ''' System.Double
        ''' </summary>
        RelativeDelay = 1150220

        ''' <summary>
        ''' System.Double
        ''' </summary>
        AbsoluteDelay = 1150225

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        OverflowErrorReporting = 1150228

        #End Region

		#Region "18.1"

		''' <summary>
		''' System.Double
		''' </summary>
		AttrLOOutExportConfigureFromRfsa = 1150242

		''' <summary>
		''' System.Int32
		''' </summary>
		AttrRFInLOExportEnabled = 1150243

		''' <summary>
		''' System.Int32
		''' </summary>
		AttrThermalCorrectionTemperatureResolution = 1150244

		#End Region

        #Region "18.2"

        ''' <summary>
        ''' System.Int32
        ''' </summary>
        AttrDeembeddingType = 1150252
        ''' <summary>
        ''' System.String
        ''' </summary>
        AttrDeembeddingSelectedTable = 1150253

		''' <summary>
		''' System.String
		''' </summary>
		AttrSelectedPorts = 1150241
		''' <summary>
		''' System.String
		''' </summary>
		AttrAvailablePorts = 1150249
		''' <summary>
		''' System.String
		''' </summary>
		AttrFpgaTargetName = 1150251
		''' <summary>
		''' System.Double
		''' </summary>
		AttrDeviceInstantaneousBandwidth = 1150226
		''' <summary>
		''' System.Double
		''' </summary>
		AttrLOFrequency = 1150199
		''' <summary>
		''' System.Double
		''' </summary>
		AttrLOVcoFrequencyStepSize = 1150257
		''' <summary>
		''' System.Int32
		''' </summary>
		AttrUpconverterFrequencyOffsetMode = 1150248
		''' <summary>
		''' System.Double
		''' </summary>
		AttrThermalCorrectionHeadroomRange = 1150258

		#End Region
	End Enum

#Region "niRFSG types"
    <Obsolete("Use niComplexI16 defined in niInteropCommon.cs")> _
    Public Structure RfsgNIComplexI16

        Public Sub New(ByVal Real As Short, ByVal Imaginary As Short)
            _real = Real
            _imaginary = Imaginary
        End Sub

        '==========================================================================================

        '==========================================================================================
        Private _real As Short
        Public ReadOnly Property Real() As Short
            Get
                Return _real
            End Get
        End Property

        '==========================================================================================

        '==========================================================================================
        Private _imaginary As Short
        Public ReadOnly Property Imaginary() As Short
            Get
                Return _imaginary
            End Get
        End Property

    End Structure

    <Obsolete("Use niComplexI16 defined in niInteropCommon.cs")> _
    Public Structure RfsgNIComplexNumberF32

        Public Sub New(ByVal Real As Single, ByVal Imaginary As Single)
            _real = Real
            _imaginary = Imaginary
        End Sub

        '==========================================================================================

        '==========================================================================================
        Private _real As Single
        Public ReadOnly Property Real() As Single
            Get
                Return _real
            End Get
        End Property

        '==========================================================================================

        '==========================================================================================
        Private _imaginary As Single
        Public ReadOnly Property Imaginary() As Single
            Get
                Return _imaginary
            End Get
        End Property

    End Structure
#End Region
End Namespace
